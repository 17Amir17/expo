{"version":3,"file":"registerRootComponent.js","sourceRoot":"","sources":["../../src/launch/registerRootComponent.tsx"],"names":[],"mappings":"AAAA,OAAO,YAAY,CAAC;AAEpB,OAAO,EAAE,aAAa,EAAE,MAAM,WAAW,CAAC;AAC1C,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAarD,SAAS,oBAAoB;IAC3B,MAAM,mBAAmB,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,aAAa,EAAE,EAAE,EAAE,CAAC,CAAC;IACrE,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,mBAAmB,KAAK,IAAI,CAAC,CAAC;IAE3E,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,IAAI,mBAAmB,KAAK,IAAI,EAAE;YAChC,mBAAmB,CAAC,IAAI,CAAC,GAAG,EAAE;gBAC5B,IAAI,SAAS;oBAAE,SAAS,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,GAAG,EAAE;YACV,SAAS,GAAG,KAAK,CAAC;QACpB,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,SAAS,eAAe,CACtB,gBAA4B;IAE5B,SAAS,eAAe,CAAC,KAAuC;QAC9D,MAAM,SAAS,GAAG,oBAAoB,EAAE,CAAC;QACzC,4FAA4F;QAC5F,sGAAsG;QACtG,IAAI,CAAC,SAAS,EAAE;YACd,OAAO,IAAI,CAAC;SACb;QAED,OAAO,oBAAC,gBAAgB,OAAK,KAAK,GAAI,CAAC;IACzC,CAAC;IAED,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;QACzC,MAAM,IAAI,GAAG,gBAAgB,CAAC,WAAW,IAAI,gBAAgB,CAAC,IAAI,IAAI,WAAW,CAAC;QAClF,eAAe,CAAC,WAAW,GAAG,cAAc,IAAI,GAAG,CAAC;KACrD;IAED,OAAO,eAAe,CAAC;AACzB,CAAC;AAED,MAAM,CAAC,OAAO,UAAU,qBAAqB,CAC3C,SAAiC;IAEjC,IAAI,kBAAkB,GAAG,eAAe,CAAC,SAAS,CAAC,CAAC;IAEpD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;QACzC,MAAM,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC,gBAAgB,CAAoC,CAAC;QACtF,kBAAkB,GAAG,YAAY,CAAC,kBAAkB,CAAC,CAAC;KACvD;IAED,WAAW,CAAC,iBAAiB,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,kBAAkB,CAAC,CAAC;IAEhE,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,0DAA0D;QAC1D;QACE,2DAA2D;QAC3D,OAAO,QAAQ,KAAK,WAAW,EAC/B;YACA,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAChD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;gBACzC,IAAI,CAAC,OAAO,EAAE;oBACZ,MAAM,IAAI,KAAK,CACb,0EAA0E,CAC3E,CAAC;iBACH;aACF;YACD,WAAW,CAAC,cAAc,CAAC,MAAM,EAAE;gBACjC,OAAO;gBACP,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,sBAAsB,KAAK,GAAG;aACpD,CAAC,CAAC;SACJ;KACF;AACH,CAAC","sourcesContent":["import '../Expo.fx';\n\nimport { _flushPending } from 'expo-font';\nimport * as React from 'react';\nimport { AppRegistry, Platform } from 'react-native';\n\ntype InitialProps = {\n  exp: {\n    notification?: any;\n    manifestString?: string;\n    [key: string]: any;\n  };\n  shell?: boolean;\n  shellManifestUrl?: string;\n  [key: string]: any;\n};\n\nfunction useFlushPendingFonts() {\n  const flushPendingPromise = React.useMemo(() => _flushPending(), []);\n  const [isLoaded, setLoaded] = React.useState(flushPendingPromise === true);\n\n  React.useEffect(() => {\n    let isMounted = true;\n    if (flushPendingPromise !== true) {\n      flushPendingPromise.then(() => {\n        if (isMounted) setLoaded(true);\n      });\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  return isLoaded;\n}\n\nfunction withFontLoading<TComponent extends React.ComponentType<any>>(\n  AppRootComponent: TComponent\n): React.ComponentType<React.ComponentProps<TComponent>> {\n  function WithAsyncAssets(props: React.ComponentProps<TComponent>) {\n    const isLoading = useFlushPendingFonts();\n    // In production native apps, the fonts are loaded instantly because the assets are offline.\n    // In development, we need to wait for the fonts to load over the dev server before rendering the app.\n    if (!isLoading) {\n      return null;\n    }\n\n    return <AppRootComponent {...props} />;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    const name = AppRootComponent.displayName || AppRootComponent.name || 'Anonymous';\n    WithAsyncAssets.displayName = `withAssets(${name})`;\n  }\n\n  return WithAsyncAssets;\n}\n\nexport default function registerRootComponent<P extends InitialProps>(\n  component: React.ComponentType<P>\n): void {\n  let qualifiedComponent = withFontLoading(component);\n\n  if (process.env.NODE_ENV !== 'production') {\n    const { withDevTools } = require('./withDevTools') as typeof import('./withDevTools');\n    qualifiedComponent = withDevTools(qualifiedComponent);\n  }\n\n  AppRegistry.registerComponent('main', () => qualifiedComponent);\n\n  if (Platform.OS === 'web') {\n    // Use two if statements for better dead code elimination.\n    if (\n      // Skip querying the DOM if we're in a Node.js environment.\n      typeof document !== 'undefined'\n    ) {\n      const rootTag = document.getElementById('root');\n      if (process.env.NODE_ENV !== 'production') {\n        if (!rootTag) {\n          throw new Error(\n            'Required HTML element with id \"root\" was not found in the document HTML.'\n          );\n        }\n      }\n      AppRegistry.runApplication('main', {\n        rootTag,\n        hydrate: process.env.EXPO_PUBLIC_USE_STATIC === '1',\n      });\n    }\n  }\n}\n"]}