{"version":3,"file":"routes-manifest.js","sourceRoot":"","sources":["../src/routes-manifest.ts"],"names":[],"mappings":"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","sourcesContent":["// no relative imports\nimport { ctx } from '../_ctx';\n// import { ctx } from \"expo-router/_entry-ctx-lazy\";\nimport { getMatchableRouteConfigs } from './fork/getStateFromPath';\nimport { getReactNavigationConfig } from './getReactNavigationConfig';\nimport { getRoutes } from './getRoutes';\nimport { loadStaticParamsAsync } from './loadStaticParamsAsync';\nimport { matchGroupName } from './matchers';\n\nexport type RouteInfo<TRegex = string> = {\n  dynamic:\n    | {\n        name: string;\n        deep: boolean;\n      }[]\n    | null;\n  generated: boolean | undefined;\n  type: string;\n  file: string;\n  regex: TRegex;\n  src: string;\n};\n\nexport type ExpoRoutesManifestV1<TRegex = string> = {\n  functions: RouteInfo<TRegex>[];\n  staticHtml: RouteInfo<TRegex>[];\n  staticHtmlPaths: string[];\n};\n\nexport async function createRoutesManifest(): Promise<any> {\n  let routeTree = getRoutes(ctx, {\n    preserveApiRoutes: true,\n    ignoreRequireErrors: true,\n  });\n\n  if (!routeTree) {\n    return null;\n  }\n\n  routeTree = await loadStaticParamsAsync(routeTree);\n\n  const config = getReactNavigationConfig(routeTree, false);\n\n  const { configs } = getMatchableRouteConfigs(config);\n\n  const manifest = configs.map((config) => {\n    const isApi = config._route!.contextKey?.match(/\\+api\\.[tj]sx?/);\n\n    const src = config._route!.contextKey.replace(/\\.[tj]sx?$/, '.js').replace(/^\\.\\//, '');\n\n    return {\n      dynamic: config._route!.dynamic,\n      generated: config._route!.generated,\n      type: isApi ? 'dynamic' : 'static',\n      file: config._route!.contextKey,\n      regex: config.regex?.source ?? /^\\/$/.source,\n      src: isApi ? './_expo/functions/' + src : './' + src,\n    };\n  });\n\n  return {\n    functions: manifest.filter((v) => v.type === 'dynamic'),\n    staticHtml: manifest.filter((v) => v.type === 'static'),\n    staticHtmlPaths: [...getStaticFiles(config)],\n  };\n}\n\nfunction getStaticFiles(manifest: any) {\n  const files = new Set<string>();\n\n  const sanitizeName = (segment: string) => {\n    // Strip group names from the segment\n    return segment\n      .split('/')\n      .map((s) => {\n        const d = s.match(/^:(.*)/);\n        // if (d) s = ''\n        if (d) s = `[${d[1]}]`;\n        s = matchGroupName(s) ? '' : s;\n        return s;\n      })\n      .filter(Boolean)\n      .join('/');\n  };\n\n  const nameWithoutGroups = (segment: string) => {\n    // Strip group names from the segment\n    return segment\n      .split('/')\n      .map((s) => (matchGroupName(s) ? '' : s))\n      .filter(Boolean)\n      .join('/');\n  };\n\n  const fetchScreens = (screens: Record<string, any>, additionPath: string = ''): any[] => {\n    function fetchScreenExact(pathname: string, filename: string) {\n      const outputPath = [additionPath, filename].filter(Boolean).join('/').replace(/^\\//, '');\n      // TODO: Ensure no duplicates in the manifest.\n      if (!files.has(outputPath)) {\n        files.add(outputPath);\n      }\n    }\n\n    function fetchScreen({ segment, filename }: { segment: string; filename: string }) {\n      // Strip group names from the segment\n      const cleanSegment = sanitizeName(segment);\n\n      if (nameWithoutGroups(segment) !== segment) {\n        // has groups, should request multiple screens.\n        fetchScreenExact([additionPath, segment].filter(Boolean).join('/'), filename);\n      }\n\n      fetchScreenExact(\n        [additionPath, cleanSegment].filter(Boolean).join('/'),\n        sanitizeName(filename)\n      );\n    }\n\n    return Object.entries(screens)\n      .map(([name, segment]) => {\n        const filename = name;\n\n        // Segment is a directory.\n        if (typeof segment !== 'string') {\n          if (Object.keys(segment.screens).length) {\n            const cleanSegment = sanitizeName(segment.path);\n\n            return fetchScreens(\n              segment.screens,\n              [additionPath, cleanSegment].filter(Boolean).join('/')\n            );\n          } else {\n            // skip when extranrous `screens` object exists\n            segment = segment.path;\n          }\n        }\n\n        // TODO: handle dynamic routes\n        // if (!segment.startsWith('*')) {\n        fetchScreen({ segment, filename });\n        // }\n        return null;\n      })\n      .filter(Boolean);\n  };\n\n  fetchScreens(manifest.screens);\n\n  return files;\n}\n"]}