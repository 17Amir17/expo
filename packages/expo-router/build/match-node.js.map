{"version":3,"file":"match-node.js","sourceRoot":"","sources":["../src/match-node.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,yBAAyB,CAAC;AAC3D,OAAO,gBAAgB,EAAE,EAAE,wBAAwB,EAAE,MAAM,yBAAyB,CAAC;AACrF,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AACtE,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAGxC,SAAS,uBAAuB,CAAC,GAAa;IAC5C,MAAM,aAAa,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,KAAI,CAAC,EAAE,CAAC,CAAC;IAElD,MAAM,CAAC,cAAc,CAAC,aAAa,EAAE,MAAM,EAAE;QAC3C,KAAK,EAAE,GAAG,EAAE,CAAC,GAAG;KACjB,CAAC,CAAC;IAEH,OAAO,aAA0C,CAAC;AACpD,CAAC;AAED,MAAM,UAAU,YAAY,CAC1B,SAAmB;IAEnB,MAAM,GAAG,GAAG,uBAAuB,CAAC,SAAS,CAAC,CAAC;IAC/C,MAAM,SAAS,GAAG,SAAS,CAAC,GAAG,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC;IAE9D,wCAAwC;IACxC,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC;KACnB;IACD,MAAM,MAAM,GAAG,wBAAwB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAE1D,OAAO,CAAC,IAAY,EAAE,EAAE;QACtB,MAAM,KAAK,GAAG,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC7C,IAAI,KAAK,EAAE;YACT,OAAO,gBAAgB,CAAC,KAAK,CAAC,CAAC;SAChC;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;AACJ,CAAC;AAQD,MAAM,UAAU,oBAAoB,CAAC,SAAmB;IACtD,MAAM,GAAG,GAAG,uBAAuB,CAAC,SAAS,CAAC,CAAC;IAC/C,MAAM,SAAS,GAAG,SAAS,CAAC,GAAG,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC;IAE9D,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,IAAI,CAAC;KACb;IAED,MAAM,MAAM,GAAG,wBAAwB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAE1D,MAAM,EAAE,OAAO,EAAE,GAAG,wBAAwB,CAAC,MAAM,CAAC,CAAC;IAErD,MAAM,QAAQ,GAAmB,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QACxD,KAAK,EAAE,MAAM,CAAC,KAAM,CAAC,QAAQ,EAAE;QAC/B,GAAG,EAAE,MAAM,CAAC,MAAO,CAAC,UAAU;KAC/B,CAAC,CAAC,CAAC;IAEJ,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import { findFocusedRoute } from './fork/findFocusedRoute';\nimport getStateFromPath, { getMatchableRouteConfigs } from './fork/getStateFromPath';\nimport { getReactNavigationConfig } from './getReactNavigationConfig';\nimport { getRoutes } from './getRoutes';\nimport { RequireContext } from './types';\n\nfunction createMockContextModule(map: string[]) {\n  const contextModule = (key) => ({ default() {} });\n\n  Object.defineProperty(contextModule, 'keys', {\n    value: () => map,\n  });\n\n  return contextModule as unknown as RequireContext;\n}\n\nexport function buildMatcher(\n  filePaths: string[]\n): (path: string) => null | ReturnType<typeof findFocusedRoute> {\n  const ctx = createMockContextModule(filePaths);\n  const routeTree = getRoutes(ctx, { preserveApiRoutes: true });\n\n  // console.log(\"tree:\", ctx, routeTree);\n  if (!routeTree) {\n    return () => null;\n  }\n  const config = getReactNavigationConfig(routeTree, false);\n\n  return (path: string) => {\n    const state = getStateFromPath(path, config);\n    if (state) {\n      return findFocusedRoute(state);\n    }\n    return null;\n  };\n}\n\ntype RoutesManifest = {\n  regex: string;\n  // original file path\n  src: string;\n}[];\n\nexport function createRoutesManifest(filePaths: string[]): RoutesManifest | null {\n  const ctx = createMockContextModule(filePaths);\n  const routeTree = getRoutes(ctx, { preserveApiRoutes: true });\n\n  if (!routeTree) {\n    return null;\n  }\n\n  const config = getReactNavigationConfig(routeTree, false);\n\n  const { configs } = getMatchableRouteConfigs(config);\n\n  const manifest: RoutesManifest = configs.map((config) => ({\n    regex: config.regex!.toString(),\n    src: config._route!.contextKey,\n  }));\n\n  return manifest;\n}\n"]}