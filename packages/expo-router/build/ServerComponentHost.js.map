{"version":3,"file":"ServerComponentHost.js","sourceRoot":"","sources":["../src/ServerComponentHost.tsx"],"names":[],"mappings":";;;AAAA,iCAA0F;AAC1F,4EAA0E;AAG1E,SAAS,mBAAmB;IAC1B,OAAO,IAAI,GAAG,EAAE,CAAC;AACnB,CAAC;AAED,iCAAiC;AACjC,qDAAqD;AACrD,mDAAmD;AACnD,2EAA2E;AAC3E,OAAO;AACP,IAAI;AAEJ,MAAM,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;AAE/B,SAAgB,kBAAkB,CAAC,KAAK;IACtC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,EAAC,YAAY,CAAC,CAAC;IACjD,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAClC,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7B,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,GAAG,IAAA,gCAAe,EACvB,KAAK,CACH,oBAAoB,kBAAkB,CAAC,GAAG,CAAC,UAAU,kBAAkB,CACrE,KAAK,CAAC,OAAO;QACb,wDAAwD;SACzD,aAAa,KAAK,aAAa,kBAAkB;QAChD,4CAA4C;QAC5C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAC3C,EAAE;QACH,gCAAgC;SACjC,CACF,CAAC;QACF,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;KAC9B;IAED,OAAO,IAAA,WAAG,EAAC,OAAO,CAAC,CAAC;AACtB,CAAC;AArBD,gDAqBC;AAED,iDAAiD;AACjD,uCAAuC;AACvC,sCAAsC;AACtC,aAAa;AACb,iFAAiF;AACjF,wBAAwB;AACxB,mEAAmE;AACnE,8BAA8B;AAC9B,yCAAyC;AACzC,QAAQ;AACR,OAAO;AACP,0BAA0B;AAC1B,IAAI;AAEJ,SAAgB,mBAAmB,CAAC,KAAK;IACvC,OAAO,kBAAkB,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;AAC9C,CAAC;AAFD,kDAEC","sourcesContent":["import { use, useState, unstable_getCacheForType, unstable_useCacheRefresh } from 'react';\nimport { createFromFetch } from 'react-server-dom-webpack/client.browser';\nimport { Platform } from 'react-native';\n\nfunction createResponseCache() {\n  return new Map();\n}\n\n// export function useRefresh() {\n//   const refreshCache = unstable_useCacheRefresh();\n//   return function refresh(key, seededResponse) {\n//     refreshCache(createResponseCache, new Map([[key, seededResponse]]));\n//   };\n// }\n\nconst initialCache = new Map();\n\nexport function useServerComponent(props) {\n  const [cache, setCache] = useState(initialCache);\n  const key = JSON.stringify(props);\n  let content = cache.get(key);\n  if (!content) {\n    content = createFromFetch(\n      fetch(\n        `/_expo/rsc?props=${encodeURIComponent(key)}&route=${encodeURIComponent(\n          props.$$route\n          // TODO: Mock react-native when bundling for ios/android\n        )}&platform=${'web'}&manifest=${encodeURIComponent(\n          // Injected by the serializer in development\n          JSON.stringify(global.$$expo_rsc_manifest)\n        )}`\n        //   )}&platform=${Platform.OS}`\n      )\n    );\n    cache.set(location, content);\n  }\n\n  return use(content);\n}\n\n// export function useServerComponentAlt(props) {\n//   const key = JSON.stringify(props);\n//   const response = createFromFetch(\n//     fetch(\n//       `/_expo/rsc?props=${encodeURIComponent(key)}&route=${encodeURIComponent(\n//         props.$$route\n//         // TODO: Mock react-native when bundling for ios/android\n//       )}&platform=${'web'}`\n//       //   )}&platform=${Platform.OS}`\n//     )\n//   );\n//   return use(response);\n// }\n\nexport function ServerComponentHost(props) {\n  return useServerComponent(props).readRoot();\n}\n"]}