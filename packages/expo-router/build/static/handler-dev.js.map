{"version":3,"file":"handler-dev.js","sourceRoot":"","sources":["../../src/static/handler-dev.ts"],"names":[],"mappings":"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","sourcesContent":["import { Readable, Writable } from 'node:stream';\n// import { createServer as createViteServer } from 'vite';\n// import viteReact from '@vitejs/plugin-react';\n\n// import type { Config } from '../../config.js';\n// import { resolveConfig } from '../config.js';\nimport { renderHtml } from './html-renderer';\nimport { decodeInput, hasStatusCode } from './utils';\nimport { joinPath, fileURLToFilePath, decodeFilePathFromAbsolute } from '../rsc/path.js';\nimport { endStream } from '../rsc/stream';\n// import {\n//   initializeWorker,\n//   registerReloadCallback,\n//   registerImportCallback,\n//   registerModuleCallback,\n//   renderRscWithWorker,\n//   getSsrConfigWithWorker,\n// } from './dev-worker-api.js';\n// import { patchReactRefresh } from '../plugins/patch-react-refresh.js';\n// import { rscIndexPlugin } from '../plugins/vite-plugin-rsc-index.js';\n// import {\n//   rscHmrPlugin,\n//   hotImport,\n//   moduleImport,\n// } from '../plugins/vite-plugin-rsc-hmr.js';\n// import { rscEnvPlugin } from '../plugins/vite-plugin-rsc-env.js';\n// import type { BaseReq, BaseRes, Handler } from './types.js';\n// import { mergeUserViteConfig } from '../utils/merge-vite-config.js';\n\nexport const CLIENT_MODULE_MAP = {\n  react: require('react'),\n  'rd-server': require('react-dom/server.edge'),\n  'rsdw-client': require('react-server-dom-webpack/client.edge'),\n  'waku-client': require('expo-router/build/rsc/client.js'),\n};\nexport type CLIENT_MODULE_KEY = keyof typeof CLIENT_MODULE_MAP;\n\ntype Config = {\n  basePath: string;\n  rscPath: string;\n  htmlHead: string;\n  srcDir: string;\n  mainJs: string;\n  publicDir: string;\n};\n\nexport function createHandler<Context, Req extends Request, Res extends Response>(options: {\n  projectRoot: string;\n  config: Config;\n  ssr?: boolean;\n  env?: Record<string, string>;\n  //   unstable_prehook?: (req: Req, res: Res) => Context;\n  //   unstable_posthook?: (req: Req, res: Res, ctx: Context) => void;\n  ssrLoadModule: (fileURL: string) => Promise<unknown>;\n  transformIndexHtml: (pathname: string, data: string) => Promise<string>;\n  renderRscWithWorker: <Context>(props: {\n    input: string;\n    searchParamsString: string;\n    method: 'GET' | 'POST';\n    contentType: string | undefined;\n    config: Config;\n    context: unknown;\n    stream?: ReadableStream | undefined;\n    moduleIdCallback?: (id: string) => void;\n  }) => Promise<readonly [ReadableStream, Context]>;\n}) {\n  const {\n    ssr,\n    // unstable_prehook, unstable_posthook\n  } = options;\n  //   if (!unstable_prehook && unstable_posthook) {\n  //     throw new Error('prehook is required if posthook is provided');\n  //   }\n  (globalThis as any).__WAKU_PRIVATE_ENV__ = options.env || {};\n\n  const loadServerFile = async (fileURL: string) => {\n    return options.ssrLoadModule(fileURLToFilePath(fileURL));\n  };\n\n  const transformIndexHtml = async (pathname: string) => {\n    // const vite = await vitePromise;\n    const encoder = new TextEncoder();\n    const decoder = new TextDecoder();\n    let headSent = false;\n    return new TransformStream({\n      transform(chunk, controller) {\n        if (!(chunk instanceof Uint8Array)) {\n          throw new Error('Unknown chunk type');\n        }\n        if (!headSent) {\n          headSent = true;\n          let data = decoder.decode(chunk);\n          // FIXME without removing async, Vite will move it\n          // to the proxy cache, which breaks __WAKU_PUSH__.\n          data = data.replace(/<script type=\"module\" async>/, '<script>');\n          return new Promise<void>((resolve) => {\n            options.transformIndexHtml(pathname, data).then((result) => {\n              controller.enqueue(encoder.encode(result));\n              resolve();\n            });\n          });\n        }\n        controller.enqueue(chunk);\n      },\n      flush() {\n        if (!headSent) {\n          throw new Error('head not yet sent');\n        }\n      },\n    });\n  };\n\n  return async (req, res, next) => {\n    const basePrefix = options.config.basePath + options.config.rscPath + '/';\n    const handleError = (err: unknown) => {\n      if (hasStatusCode(err)) {\n        res.setStatus(err.statusCode);\n      } else {\n        console.info('Cannot render RSC', err);\n        res.setStatus(500);\n      }\n      endStream(res.stream, String(err));\n    };\n    let context: Context | undefined;\n    try {\n      //   context = unstable_prehook?.(req, res);\n    } catch (e) {\n      handleError(e);\n      return;\n    }\n    const { config } = options;\n    if (ssr) {\n      try {\n        const readable = await renderHtml({\n          config: config!,\n          pathname: req.url.pathname,\n          searchParams: req.url.searchParams,\n          htmlHead: `${options.config.htmlHead}\n<script src=\"${options.config.basePath}${options.config.srcDir}/${options.config.mainJs}\" async type=\"module\"></script>`,\n          renderRscForHtml: async (input, searchParams) => {\n            const [readable, nextCtx] = await options.renderRscWithWorker({\n              input,\n              searchParamsString: searchParams.toString(),\n              method: 'GET',\n              contentType: undefined,\n              config: options.config,\n              context,\n            });\n            context = nextCtx as Context;\n            return readable;\n          },\n          getSsrConfigForHtml: (pathname, options) =>\n            getSsrConfigWithWorker(config, pathname, options),\n          loadClientModule: (key) => CLIENT_MODULE_MAP[key],\n          isDev: true,\n          rootDir: options.projectRoot,\n          loadServerFile,\n        });\n        if (readable) {\n          //   unstable_posthook?.(req, res, context as Context);\n          res.setHeader('content-type', 'text/html; charset=utf-8');\n          readable.pipeThrough(await transformIndexHtml(req.url.pathname)).pipeTo(res.stream);\n          return;\n        }\n      } catch (e) {\n        handleError(e);\n        return;\n      }\n    }\n    if (req.url.pathname.startsWith(basePrefix)) {\n      const { method, contentType } = req;\n      if (method !== 'GET' && method !== 'POST') {\n        throw new Error(`Unsupported method '${method}'`);\n      }\n      try {\n        const input = decodeInput(req.url.pathname.slice(basePrefix.length));\n        const [readable, nextCtx] = await options.renderRscWithWorker({\n          input,\n          searchParamsString: req.url.searchParams.toString(),\n          method,\n          contentType,\n          config: options.config,\n          context,\n          stream: req.stream,\n        });\n        // unstable_posthook?.(req, res, nextCtx as Context);\n        readable.pipeTo(res.stream);\n      } catch (e) {\n        handleError(e);\n      }\n      return;\n    }\n    // HACK re-export \"?v=...\" URL to avoid dual module hazard.\n    const viteUrl = req.url.toString().slice(req.url.origin.length);\n    // const fname = viteUrl.startsWith(options.config.basePath + '@fs/')\n    //   ? decodeFilePathFromAbsolute(\n    //       viteUrl.slice(options.config.basePath.length + '@fs'.length),\n    //     )\n    //   : joinPath(options.projectRoot, viteUrl);\n    // for (const item of vite.moduleGraph.idToModuleMap.values()) {\n    //   if (\n    //     item.file === fname &&\n    //     item.url !== viteUrl &&\n    //     !item.url.includes('?html-proxy')\n    //   ) {\n    //     const { code } = (await vite.transformRequest(item.url))!;\n    //     res.setHeader('Content-Type', 'application/javascript');\n    //     res.setStatus(200);\n    //     let exports = `export * from \"${item.url}\";`;\n    //     // `export *` does not re-export `default`\n    //     if (code.includes('export default')) {\n    //       exports += `export { default } from \"${item.url}\";`;\n    //     }\n    //     endStream(res.stream, exports);\n    //     return;\n    //   }\n    // }\n    const viteReq: any = Readable.fromWeb(req.stream as any);\n    viteReq.method = req.method;\n    viteReq.url = viteUrl;\n    viteReq.headers = { 'content-type': req.contentType };\n    const viteRes: any = Writable.fromWeb(res.stream as any);\n    Object.defineProperty(viteRes, 'statusCode', {\n      set(code) {\n        res.setStatus(code);\n      },\n    });\n    const headers = new Map<string, string>();\n    viteRes.setHeader = (name: string, value: string) => {\n      headers.set(name, value);\n      res.setHeader(name, value);\n    };\n    viteRes.getHeader = (name: string) => headers.get(name);\n    viteRes.writeHead = (code: number, headers?: Record<string, string>) => {\n      res.setStatus(code);\n      for (const [name, value] of Object.entries(headers || {})) {\n        viteRes.setHeader(name, value);\n      }\n    };\n    // vite.middlewares(viteReq, viteRes, next);\n\n    // TODO: End request\n  };\n}\n"]}