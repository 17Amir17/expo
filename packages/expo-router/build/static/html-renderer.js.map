{"version":3,"file":"html-renderer.js","sourceRoot":"","sources":["../../src/static/html-renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  createElement as createElementType,\n  ReactNode,\n  FunctionComponent,\n  ComponentProps,\n} from 'react';\nimport { createElement } from 'react';\nimport { renderToReadableStream } from 'react-dom/server.edge';\nimport { createFromReadableStream } from 'react-server-dom-webpack/client.edge';\n\nimport { encodeInput, hasStatusCode } from './utils';\nimport { ServerRoot } from '../rsc/client';\nimport { joinPath, filePathToFileURL, fileURLToFilePath } from '../rsc/path';\nimport { concatUint8Arrays } from '../rsc/stream';\n\n// TODO(bacon): Add this somehow\n// const importMetaUrl = import.meta.url;\n\ntype ResolvedConfig = {\n  publicDir: string;\n  basePath: string;\n  rscPath: string;\n};\n\n// HACK for react-server-dom-webpack without webpack\n(globalThis as any).__webpack_module_loading__ ||= new Map();\n(globalThis as any).__webpack_module_cache__ ||= new Map();\n(globalThis as any).__webpack_chunk_load__ ||= async (id: string) =>\n  (globalThis as any).__webpack_module_loading__.get(id);\n(globalThis as any).__webpack_require__ ||= (id: string) =>\n  (globalThis as any).__webpack_module_cache__.get(id);\nconst moduleLoading = (globalThis as any).__webpack_module_loading__;\nconst moduleCache = (globalThis as any).__webpack_module_cache__;\n\nconst fakeFetchCode = `\n  Promise.resolve(new Response(new ReadableStream({\n    start(c) {\n      const f = (s) => new TextEncoder().encode(decodeURI(s));\n      globalThis.__WAKU_PUSH__ = (s) => s ? c.enqueue(f(s)) : c.close();\n    }\n  })))\n  `\n  .split('\\n')\n  .map((line) => line.trim())\n  .join('');\n\nconst injectRscPayload = (readable: ReadableStream, urlForFakeFetch: string) => {\n  const chunks: Uint8Array[] = [];\n  const copied = readable.pipeThrough(\n    new TransformStream({\n      transform(chunk, controller) {\n        if (!(chunk instanceof Uint8Array)) {\n          throw new Error('Unknown chunk type');\n        }\n        chunks.push(chunk);\n        controller.enqueue(chunk);\n      },\n    })\n  );\n  const modifyHead = (data: string) => {\n    const matchPrefetched = data.match(\n      // HACK This is very brittle\n      /(.*<script[^>]*>\\nglobalThis\\.__WAKU_PREFETCHED__ = {\\n)(.*?)(\\n};.*)/s\n    );\n    if (matchPrefetched) {\n      data = matchPrefetched[1] + `  '${urlForFakeFetch}': ${fakeFetchCode},` + matchPrefetched[3];\n    }\n    const closingHeadIndex = data.indexOf('</head>');\n    if (closingHeadIndex === -1) {\n      throw new Error('closing head not found');\n    }\n    let code = '';\n    if (!matchPrefetched) {\n      code += `\n  globalThis.__WAKU_PREFETCHED__ = {\n    '${urlForFakeFetch}': ${fakeFetchCode},\n  };\n  `;\n    }\n    if (code) {\n      data =\n        data.slice(0, closingHeadIndex) +\n        `<script type=\"module\" async>${code}</script>` +\n        data.slice(closingHeadIndex);\n    }\n    return data;\n  };\n  const interleave = () => {\n    const encoder = new TextEncoder();\n    const decoder = new TextDecoder();\n    let headSent = false;\n    let data = '';\n    let scriptsClosed = false;\n    const sendScripts = (controller: TransformStreamDefaultController, close?: boolean) => {\n      if (scriptsClosed) {\n        return;\n      }\n      const scripts = chunks.splice(0).map(\n        (chunk) =>\n          `\n  <script type=\"module\" async>globalThis.__WAKU_PUSH__(\"${encodeURI(\n    decoder.decode(chunk)\n  )}\")</script>`\n      );\n      if (close) {\n        scriptsClosed = true;\n        scripts.push(\n          `\n  <script type=\"module\" async>globalThis.__WAKU_PUSH__()</script>`\n        );\n      }\n      if (scripts.length) {\n        controller.enqueue(encoder.encode(scripts.join('')));\n      }\n    };\n    return new TransformStream({\n      transform(chunk, controller) {\n        if (!(chunk instanceof Uint8Array)) {\n          throw new Error('Unknown chunk type');\n        }\n        data += decoder.decode(chunk);\n        if (!headSent) {\n          if (!data.includes('</head>')) {\n            return;\n          }\n          headSent = true;\n          data = modifyHead(data);\n        }\n        const closingBodyIndex = data.lastIndexOf('</body>');\n        if (closingBodyIndex === -1) {\n          controller.enqueue(encoder.encode(data));\n          data = '';\n          sendScripts(controller);\n        } else {\n          controller.enqueue(encoder.encode(data.slice(0, closingBodyIndex)));\n          sendScripts(controller, true);\n          controller.enqueue(encoder.encode(data.slice(closingBodyIndex)));\n          data = '';\n        }\n      },\n    });\n  };\n  return [copied, interleave] as const;\n};\n\n// NOTE: MUST MATCH THE IMPL IN ExpoMetroConfig.ts\nfunction stringToHash(str: string): number {\n  let hash = 0;\n  if (str.length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash |= 0; // Convert to 32bit integer\n  }\n  return Math.abs(hash);\n}\n\n// HACK for now, do we want to use HTML parser?\nconst rectifyHtml = () => {\n  const pending: Uint8Array[] = [];\n  const decoder = new TextDecoder();\n  let timer: ReturnType<typeof setTimeout> | undefined;\n  return new TransformStream({\n    transform(chunk, controller) {\n      if (!(chunk instanceof Uint8Array)) {\n        throw new Error('Unknown chunk type');\n      }\n      pending.push(chunk);\n      if (/<\\/\\w+>$/.test(decoder.decode(chunk))) {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          controller.enqueue(concatUint8Arrays(pending.splice(0)));\n        });\n      }\n    },\n    flush(controller) {\n      clearTimeout(timer);\n      if (pending.length) {\n        controller.enqueue(concatUint8Arrays(pending.splice(0)));\n      }\n    },\n  });\n};\n\nconst buildHtml = (createElement: typeof createElementType, head: string, body: ReactNode) =>\n  createElement(\n    'html',\n    null,\n    createElement('head', { dangerouslySetInnerHTML: { __html: head } }),\n    createElement('body', null, body)\n  );\n\nexport const renderHtml = async (\n  opts: {\n    serverRoot: string;\n    config: ResolvedConfig;\n    pathname: string;\n    searchParams: URLSearchParams;\n    htmlHead: string;\n    renderRscForHtml: (input: string, searchParams: URLSearchParams) => Promise<ReadableStream>;\n    getSsrConfigForHtml: (\n      pathname: string,\n      searchParams: URLSearchParams\n    ) => Promise<{\n      input: string;\n      searchParams?: URLSearchParams;\n      body: ReadableStream;\n    } | null>;\n  } & (\n    | { isDev: false; loadModule: (id: string) => Promise<unknown>; isBuild: boolean }\n    | {\n        isDev: true;\n        rootDir: string;\n        loadServerFile: (fileURL: string) => Promise<unknown>;\n      }\n  )\n): Promise<ReadableStream | null> => {\n  const { config, pathname, searchParams, htmlHead, renderRscForHtml, getSsrConfigForHtml, isDev } =\n    opts;\n\n  const ssrConfig = await getSsrConfigForHtml?.(pathname, searchParams);\n  if (!ssrConfig) {\n    return null;\n  }\n  let stream: ReadableStream;\n  try {\n    stream = await renderRscForHtml(ssrConfig.input, ssrConfig.searchParams || searchParams);\n  } catch (e) {\n    if (hasStatusCode(e) && e.statusCode === 404) {\n      return null;\n    }\n    throw e;\n  }\n\n  const resolveClientEntry = (\n    file: string // filePath or fileURL\n  ) => {\n    // if (!isExporting) {\n    const filePath = file.startsWith('file://') ? fileURLToFilePath(file) : file;\n    const metroOpaqueId = stringToHash(filePath);\n    const relativeFilePath = path.relative(opts.serverRoot, filePath);\n    // TODO: May need to remove the original extension.\n    url.pathname = relativeFilePath + '.bundle';\n    // Pass the Metro runtime ID back in the hash so we can emulate Webpack requiring.\n    url.hash = String(metroOpaqueId);\n\n    // Return relative URLs to help Android fetch from wherever it was loaded from since it doesn't support localhost.\n    const id = url.pathname + url.search + url.hash;\n    return { id, url: id };\n    // } else {\n    //   // if (!file.startsWith('@id/')) {\n    //   //   throw new Error('Unexpected client entry in PRD: ' + file);\n    //   // }\n    //   // url.pathname = file.slice('@id/'.length);\n\n    //   // TODO: This should be different for prod\n    //   const filePath = file.startsWith('file://') ? fileURLToFilePath(file) : file;\n    //   const metroOpaqueId = stringToHash(filePath);\n    //   const relativeFilePath = path.relative(serverRoot, filePath);\n    //   // TODO: May need to remove the original extension.\n    //   url.pathname = relativeFilePath;\n    //   // Pass the Metro runtime ID back in the hash so we can emulate Webpack requiring.\n    //   url.hash = String(metroOpaqueId);\n\n    //   // Return relative URLs to help Android fetch from wherever it was loaded from since it doesn't support localhost.\n    //   const id = '/' + url.hash;\n    //   return { id, url: url.pathname + url.search + url.hash };\n    // }\n  };\n\n  const moduleMap = new Proxy(\n    {} as Record<\n      string,\n      Record<\n        string,\n        {\n          id: string;\n          chunks: string[];\n          name: string;\n        }\n      >\n    >,\n    {\n      get(_target, filePath: string) {\n        return new Proxy(\n          {},\n          {\n            get(_target, encodedId: string) {\n              // const file = filePath.slice(config.basePath.length);\n              console.log('TODO: GET MODULE:>', encodedId);\n              // TODO too long, we need to refactor this logic\n              // if (isDev) {\n              //   const filePath = file.startsWith('@fs/')\n              //     ? file.slice('@fs'.length)\n              //     : joinPath(opts.rootDir, file);\n              //   const wakuDist = joinPath(fileURLToFilePath(importMetaUrl), '../../..');\n              //   if (filePath.startsWith(wakuDist)) {\n              //     const id = 'waku' + filePath.slice(wakuDist.length).replace(/\\.\\w+$/, '');\n              //     if (!moduleLoading.has(id)) {\n              //       moduleLoading.set(\n              //         id,\n              //         import(id).then((m) => {\n              //           moduleCache.set(id, m);\n              //         })\n              //       );\n              //     }\n              //     return { id, chunks: [id], name };\n              //   }\n              //   const id = filePathToFileURL(filePath);\n              //   if (!moduleLoading.has(id)) {\n              //     moduleLoading.set(\n              //       id,\n              //       opts.loadServerFile(id).then((m) => {\n              //         moduleCache.set(id, m);\n              //       })\n              //     );\n              //   }\n              //   return { id, chunks: [id], name };\n              // }\n              // // !isDev\n              // const id = file;\n              // if (!moduleLoading.has(id)) {\n              //   moduleLoading.set(\n              //     id,\n              //     opts.loadModule(joinPath(config.publicDir, id)).then((m: any) => {\n              //       moduleCache.set(id, m);\n              //     })\n              //   );\n              // }\n\n              // debug('Get manifest entry:', encodedId);\n              // const [file, name] = encodedId.split('#') as [string, string];\n              // return moduleMap[encodedId];\n\n              const [\n                // File is the on-disk location of the module, this is injected during the \"use client\" transformation (babel).\n                file,\n                // The name of the import (e.g. \"default\" or \"\")\n                name,\n              ] = encodedId.split('#') as [string, string];\n\n              // We'll augment the file path with the incoming RSC request which will forward the metro props required to make a cache hit, e.g. platform=web&...\n              // This is similar to how we handle lazy bundling.\n              const entry = resolveClientEntry(file);\n              console.log('Returning server module:', entry, 'for', encodedId);\n              // moduleIdCallback?.({ id: entry.url, chunks: [entry.url], name, async: true });\n\n              return { id: entry.id, chunks: [entry.id], name, async: true };\n\n              // return { id, chunks: [id], name };\n            },\n          }\n        );\n      },\n    }\n  );\n  const [copied, interleave] = injectRscPayload(\n    stream,\n    config.basePath + config.rscPath + '/' + encodeInput(ssrConfig.input)\n  );\n  const elements: Promise<Record<string, ReactNode>> = createFromReadableStream(copied, {\n    ssrManifest: { moduleMap, moduleLoading: null },\n  });\n  // const body: Promise<ReactNode> = createFromReadableStream(ssrConfig.body, {\n  //   ssrManifest: { moduleMap, moduleLoading: null },\n  // });\n  const readable = (\n    await renderToReadableStream(\n      buildHtml(\n        createElement,\n        htmlHead,\n        createElement(\n          ServerRoot as FunctionComponent<Omit<ComponentProps<typeof ServerRoot>, 'children'>>,\n          { elements }\n          // body as any\n        )\n      ),\n      {\n        onError(err: unknown) {\n          console.error(err);\n        },\n      }\n    )\n  )\n    .pipeThrough(rectifyHtml())\n    .pipeThrough(interleave());\n  return readable;\n};\n"]}