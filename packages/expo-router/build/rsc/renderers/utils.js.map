{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/rsc/renderers/utils.ts"],"names":[],"mappings":";AAAA,mDAAmD;;;AAE5C,MAAM,WAAW,GAAG,CAAC,KAAa,EAAE,EAAE;IAC3C,IAAI,KAAK,KAAK,EAAE,EAAE;QAChB,OAAO,WAAW,CAAC;KACpB;IACD,IAAI,KAAK,KAAK,OAAO,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;KAChD;IACD,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QACzB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;KACpD;IACD,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACvB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;KAClD;IACD,OAAO,KAAK,GAAG,MAAM,CAAC;AACxB,CAAC,CAAC;AAdW,QAAA,WAAW,eActB;AAEK,MAAM,WAAW,GAAG,CAAC,YAAoB,EAAE,EAAE;IAClD,IAAI,YAAY,KAAK,WAAW,EAAE;QAChC,OAAO,EAAE,CAAC;KACX;IACD,IAAI,YAAY,EAAE,QAAQ,CAAC,MAAM,CAAC,EAAE;QAClC,OAAO,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KAC9C;IACD,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC9C,GAAW,CAAC,UAAU,GAAG,GAAG,CAAC;IAC9B,MAAM,GAAG,CAAC;AACZ,CAAC,CAAC;AAVW,QAAA,WAAW,eAUtB;AAEK,MAAM,aAAa,GAAG,CAAC,CAAU,EAA+B,EAAE,CACvE,OAAQ,CAAS,EAAE,UAAU,KAAK,QAAQ,CAAC;AADhC,QAAA,aAAa,iBACmB;AAEhC,QAAA,YAAY,GAAG;;;qFAGyD,CAAC;AAE/E,MAAM,oBAAoB,GAAG,CAClC,UAAkB,EAClB,MAAwB,EACxB,SAA2B,EAC3B,EAAE;IACF,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACvC,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,IAAI,WAAW,CAAC,MAAM,EAAE;QACtB,IAAI,IAAI;;IAER,WAAW;aACV,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,MAAM,GAAG,GAAG,UAAU,GAAG,IAAA,mBAAW,EAAC,KAAK,CAAC,CAAC;YAC5C,OAAO,MAAM,GAAG,aAAa,GAAG,KAAK,CAAC;QACxC,CAAC,CAAC;aACD,IAAI,CAAC,IAAI,CAAC;KACV,CAAC;KACH;IACD,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,IAAI,IAAI;YACA,QAAQ,KAAK,CAAC;KACvB;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAvBW,QAAA,oBAAoB,wBAuB/B;AAEK,MAAM,UAAU,GAAG,CAAC,CAAU,EAAQ,EAAE;IAC7C,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,IAAI,EAAE;QACvC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACjB,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YACpC,IAAA,kBAAU,EAAC,KAAK,CAAC,CAAC;SACnB;KACF;AACH,CAAC,CAAC;AAPW,QAAA,UAAU,cAOrB","sourcesContent":["// This file should not include Node specific code.\n\nexport const encodeInput = (input: string) => {\n  if (input === '') {\n    return 'index.txt';\n  }\n  if (input === 'index') {\n    throw new Error('Input should not be `index`');\n  }\n  if (input.startsWith('/')) {\n    throw new Error('Input should not start with `/`');\n  }\n  if (input.endsWith('/')) {\n    throw new Error('Input should not end with `/`');\n  }\n  return input + '.txt';\n};\n\nexport const decodeInput = (encodedInput: string) => {\n  if (encodedInput === 'index.txt') {\n    return '';\n  }\n  if (encodedInput?.endsWith('.txt')) {\n    return encodedInput.slice(0, -'.txt'.length);\n  }\n  const err = new Error('Invalid encoded input');\n  (err as any).statusCode = 400;\n  throw err;\n};\n\nexport const hasStatusCode = (x: unknown): x is { statusCode: number } =>\n  typeof (x as any)?.statusCode === 'number';\n\nexport const codeToInject = `\n  globalThis.__waku_module_cache__ = new Map();\n  globalThis.__webpack_chunk_load__ = (id) => import(id).then((m) => globalThis.__waku_module_cache__.set(id, m));\n  globalThis.__webpack_require__ = (id) => globalThis.__waku_module_cache__.get(id);`;\n\nexport const generatePrefetchCode = (\n  basePrefix: string,\n  inputs: Iterable<string>,\n  moduleIds: Iterable<string>\n) => {\n  const inputsArray = Array.from(inputs);\n  let code = '';\n  if (inputsArray.length) {\n    code += `\n  globalThis.__WAKU_PREFETCHED__ = {\n  ${inputsArray\n    .map((input) => {\n      const url = basePrefix + encodeInput(input);\n      return `  '${url}': fetch('${url}'),`;\n    })\n    .join('\\n')}\n  };`;\n  }\n  for (const moduleId of moduleIds) {\n    code += `\n  import('${moduleId}');`;\n  }\n  return code;\n};\n\nexport const deepFreeze = (x: unknown): void => {\n  if (typeof x === 'object' && x !== null) {\n    Object.freeze(x);\n    for (const value of Object.values(x)) {\n      deepFreeze(value);\n    }\n  }\n};\n"]}