{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/rsc/client.ts"],"names":[],"mappings":"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","sourcesContent":["// From Waku -- https://github.com/dai-shi/waku/blob/main/packages/waku/src/client.ts\n\n/// <reference types=\"react/canary\" />\n'use client';\n\nimport {\n  cache,\n  createContext,\n  createElement,\n  memo,\n  use,\n  useCallback,\n  useState,\n  startTransition,\n} from 'react';\nimport type { ReactNode } from 'react';\nimport RSDWClient from 'react-server-dom-webpack/client';\n\nimport { encodeInput } from './renderers/utils';\n\nconst { createFromFetch, encodeReply } = RSDWClient;\n\ndeclare global {\n  interface ImportMeta {\n    readonly env: Record<string, string>;\n  }\n}\n\n// TODO: Add this env var\nconst RSC_PATH = process.env.EXPO_RSC_PATH || '/rsc';\n\nconst BASE_PATH = `${process.env.EXPO_BASE_URL}${RSC_PATH}/`;\n\nconst checkStatus = async (responsePromise: Promise<Response>): Promise<Response> => {\n  const response = await responsePromise;\n  if (!response.ok) {\n    const err = new Error(response.statusText);\n    (err as any).statusCode = response.status;\n    throw err;\n  }\n  return response;\n};\n\ntype Elements = Promise<Record<string, ReactNode>>;\n\nconst mergeElements = cache(async (a: Elements, b: Elements | Awaited<Elements>): Elements => {\n  const nextElements = { ...(await a), ...(await b) };\n  delete nextElements._value;\n  return nextElements;\n});\n\nexport const fetchRSC = cache(\n  (\n    input: string,\n    searchParamsString: string,\n    rerender: (fn: (prev: Elements) => Elements) => void\n  ): Elements => {\n    const options = {\n      async callServer(actionId: string, args: unknown[]) {\n        const response = fetch(BASE_PATH + encodeInput(encodeURIComponent(actionId)), {\n          method: 'POST',\n          body: await encodeReply(args),\n        });\n        const data = createFromFetch<Awaited<Elements>>(checkStatus(response), options);\n        startTransition(() => {\n          console.log('update renderer:', data)\n          // FIXME this causes rerenders even if data is empty\n          rerender((prev) => mergeElements(prev, data));\n        });\n        return (await data)._value;\n      },\n    };\n    const prefetched = ((globalThis as any).__WAKU_PREFETCHED__ ||= {});\n    const url =\n      BASE_PATH + encodeInput(input) + (searchParamsString ? '?' + searchParamsString : '');\n    const response = prefetched[url] || fetch(url);\n    delete prefetched[url];\n    const data = createFromFetch<Awaited<Elements>>(checkStatus(response), options);\n    return data;\n  }\n);\n\nexport const prefetchRSC = cache((input: string, searchParamsString: string): void => {\n  const prefetched = ((globalThis as any).__WAKU_PREFETCHED__ ||= {});\n  const url = BASE_PATH + encodeInput(input) + (searchParamsString ? '?' + searchParamsString : '');\n  if (!(url in prefetched)) {\n    prefetched[url] = fetch(url);\n  }\n});\n\nconst RefetchContext = createContext<(input: string, searchParams?: URLSearchParams) => void>(\n  () => {\n    throw new Error('Missing Root component');\n  }\n);\nconst ElementsContext = createContext<Elements | null>(null);\n\n// HACK there should be a better way...\nconst createRerender = cache(() => {\n  let rerender: ((fn: (prev: Elements) => Elements) => void) | undefined;\n  const stableRerender = (fn: Parameters<NonNullable<typeof rerender>>[0]) => {\n    rerender?.(fn);\n  };\n  const getRerender = () => stableRerender;\n  const setRerender = (newRerender: NonNullable<typeof rerender>) => {\n    rerender = newRerender;\n  };\n  return [getRerender, setRerender] as const;\n});\n\nexport const Root = ({\n  initialInput,\n  initialSearchParamsString,\n  children,\n}: {\n  initialInput?: string;\n  initialSearchParamsString?: string;\n  children: ReactNode;\n}) => {\n  const [getRerender, setRerender] = createRerender();\n  const [elements, setElements] = useState(() =>\n    fetchRSC(initialInput || '', initialSearchParamsString || '', getRerender())\n  );\n  setRerender(setElements);\n  const refetch = useCallback(\n    (input: string, searchParams?: URLSearchParams) => {\n      const data = fetchRSC(input, searchParams?.toString() || '', getRerender());\n      setElements((prev) => mergeElements(prev, data));\n    },\n    [getRerender]\n  );\n  console.log('Render with elements,', elements)\n  return createElement(\n    RefetchContext.Provider,\n    { value: refetch },\n    createElement(ElementsContext.Provider, { value: elements }, children)\n  );\n};\n\nexport const useRefetch = () => use(RefetchContext);\n\nconst ChildrenContext = createContext<ReactNode>(undefined);\nconst ChildrenContextProvider = memo(ChildrenContext.Provider);\n\nexport const Slot = ({\n  id,\n  children,\n  fallback,\n}: {\n  id: string;\n  children?: ReactNode;\n  fallback?: ReactNode;\n}) => {\n  const elementsPromise = use(ElementsContext);\n  if (!elementsPromise) {\n    throw new Error('Missing Root component');\n  }\n  const elements = use(elementsPromise);\n  if (!(id in elements)) {\n    if (fallback) {\n      return fallback;\n    }\n    console.log('Expected one of:', elements)\n    // throw new Error('Not found: ' + id);\n\n  }\n  // TODO: Fix this to support multiple children\n  return createElement(ChildrenContextProvider, { value: children }, elements);\n  // return createElement(ChildrenContextProvider, { value: children }, elements[id]);\n};\n\nexport const Children = () => use(ChildrenContext);\n\nexport const ServerRoot = ({ elements, children }: { elements: Elements; children: ReactNode }) =>\n  createElement(ElementsContext.Provider, { value: elements }, children);\n"]}