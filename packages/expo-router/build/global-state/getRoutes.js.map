{"version":3,"file":"getRoutes.js","sourceRoot":"","sources":["../../src/global-state/getRoutes.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\n\nimport { DynamicConvention, RouteNode } from '../Route';\nimport {\n  matchDeepDynamicRouteName,\n  matchDynamicName,\n  matchGroupName,\n  removeSupportedExtensions,\n} from '../matchers';\nimport { RequireContext } from '../types';\n\ntype Options = {\n  ignore?: RegExp[];\n  preserveApiRoutes?: boolean;\n  ignoreRequireErrors?: boolean;\n  ignoreEntryPoints?: boolean;\n  platformExtensions?: boolean;\n};\n\ntype DirectoryNode = {\n  layout?: RouteNode;\n  views: Map<string, RouteNode[]>;\n  subdirectories: Map<string, DirectoryNode>;\n};\n\nconst validPlatforms = new Set(['android', 'ios', 'windows', 'osx', 'native', 'web']);\n\n/** Given a Metro context module, return an array of nested routes. */\nexport function getRoutes(contextModule: RequireContext, options: Options = {}): RouteNode | null {\n  const directoryTree = getDirectoryTree(contextModule, options);\n\n  // If there is no route, return an empty route.\n  if (directoryTree.views.size === 0 && directoryTree.subdirectories.size === 0) {\n    return null;\n  }\n\n  // There will always be a root layout\n  const routeNode = directoryTree.layout!;\n\n  hoistDirectoryTree(directoryTree, routeNode, options);\n\n  return routeNode;\n}\n\nfunction getDirectoryTree(contextModule: RequireContext, options: Options) {\n  const ignoreList = getIgnoreList(options);\n\n  const directory: DirectoryNode = {\n    views: new Map(),\n    subdirectories: new Map(),\n  };\n\n  for (const filePath of contextModule.keys()) {\n    if (ignoreList.some((regex) => regex.test(filePath))) {\n      continue;\n    }\n\n    const meta = getFileMeta(filePath, options);\n\n    const leaves: DirectoryNode[] = [];\n    for (const key of extrapolateGroups(filePath)) {\n      let node = directory;\n\n      for (const part of key.split('/').slice(0, -1)) {\n        let child = node.subdirectories.get(part);\n        if (!child) {\n          child = {\n            views: new Map(),\n            subdirectories: new Map(),\n          };\n          node.subdirectories.set(part, child);\n        }\n        node = child;\n      }\n      leaves.push(node);\n    }\n\n    const node: RouteNode = {\n      loadRoute() {\n        if (options.ignoreRequireErrors) {\n          try {\n            return contextModule(filePath);\n          } catch {\n            return {};\n          }\n        } else {\n          return contextModule(filePath);\n        }\n      },\n      contextKey: filePath,\n      route: meta.filename,\n      generated: true,\n      dynamic: meta.dynamic,\n      children: [],\n    };\n\n    if (meta.isLayout) {\n      for (const leaf of leaves) {\n        if (leaf.layout && leaf.layout !== node) {\n          throw new Error(\n            `The layouts \"${filePath}\" and ${leaf.layout.contextKey} conflict in \"${meta.dirname}. Please remove one of these files.`\n          );\n        } else {\n          leaf.layout = node;\n        }\n      }\n    } else if (meta.isApi) {\n      for (const leaf of leaves) {\n        const existing = leaf.views.get(meta.filepathWithoutExtensions);\n        if (existing) {\n          throw new Error(\n            `The API routes \"${filePath}\" and ${existing[0].contextKey} conflict in \"${meta.dirname}. Please remove one of these files.`\n          );\n        } else {\n          leaf.layout = node;\n        }\n\n        leaf.views.set(meta.filepathWithoutExtensions, [node]);\n      }\n    } else {\n      for (const leaf of leaves) {\n        let nodes = leaf.views.get(meta.filename);\n\n        if (!nodes) {\n          nodes = [];\n          leaf.views.set(meta.filepathWithoutExtensions, nodes);\n        }\n\n        const existing = nodes[meta.specificity];\n        if (existing) {\n          throw new Error(\n            `The routes \"${filePath}\" and ${existing.contextKey} conflict in \"${meta.dirname}. Please remove one of these files.`\n          );\n        } else {\n          nodes[meta.specificity] = node;\n        }\n      }\n    }\n  }\n\n  return directory;\n}\n\nfunction hoistDirectoryTree(\n  directory: DirectoryNode,\n  parent: RouteNode,\n  options: Options,\n  entryPoints: string[] = []\n) {\n  if (directory.layout) {\n    parent = {\n      ...directory.layout,\n      children: [],\n    };\n    entryPoints.push(directory.layout.contextKey);\n  }\n\n  for (const routes of directory.views.values()) {\n    const route = getMostSpecificRoute(routes);\n\n    parent.children.push({\n      ...route,\n      entryPoints: [...entryPoints, route.contextKey],\n    });\n  }\n\n  for (const child of directory.subdirectories.values()) {\n    hoistDirectoryTree(child, parent, options, entryPoints);\n  }\n}\n\nfunction getMostSpecificRoute(routes: RouteNode[]) {\n  const route = routes[routes.length - 1];\n\n  if (!routes[0]) {\n    throw new Error(`${route.contextKey} does not contain a fallback platform route`);\n  }\n\n  return routes[routes.length - 1];\n}\n\nfunction getFileMeta(key: string, options: Options) {\n  const parts = key.split('/');\n  const dirnameParts = parts.slice(0, -1);\n  const dirname = dirnameParts.join('/');\n  const filename = parts[parts.length - 1];\n  const filenameParts = filename.split('.');\n\n  let platform;\n  if (options.platformExtensions) {\n    if (filenameParts.length > 2) {\n      const possiblePlatform = filenameParts[filenameParts.length - 2];\n      if (validPlatforms.has(possiblePlatform)) {\n        platform = possiblePlatform;\n      }\n    }\n  } else {\n    if (filenameParts.length > 2) {\n      const possiblePlatform = filenameParts[filenameParts.length - 2];\n      if (validPlatforms.has(possiblePlatform)) {\n        throw new Error('invalid route with platform extension');\n      }\n    }\n  }\n\n  const filepathWithoutExtensions = removeSupportedExtensions(key);\n\n  let dynamic: RouteNode['dynamic'] = parts\n    .map((part) => {\n      if (part === '+not-found') {\n        return {\n          name: '+not-found',\n          deep: true,\n          notFound: true,\n        };\n      }\n\n      const deepDynamicName = matchDeepDynamicRouteName(part);\n      const dynamicName = deepDynamicName ?? matchDynamicName(part);\n      if (!dynamicName) return null;\n      return { name: dynamicName, deep: !!deepDynamicName };\n    })\n    .filter((part): part is DynamicConvention => !!part);\n\n  if (dynamic.length === 0) dynamic = null;\n\n  const isLayout = filepathWithoutExtensions.endsWith('_layout.tsx');\n  const isApi = key.match(/\\+api\\.[jt]sx?$/);\n\n  let specificity = 0;\n\n  if (platform) {\n    if (platform === Platform.OS) {\n      specificity = 2;\n    } else if (platform === 'native' && Platform.OS !== 'web') {\n      specificity = 1;\n    }\n  }\n\n  return {\n    key,\n    specificity,\n    parts,\n    dirnameParts,\n    dirname,\n    filename,\n    dynamic,\n    isLayout,\n    isApi,\n    filepathWithoutExtensions,\n  };\n}\n\nfunction getIgnoreList(options?: Options) {\n  const ignore: RegExp[] = [/^\\.\\/\\+html\\.[tj]sx?$/, ...(options?.ignore ?? [])];\n  if (options?.preserveApiRoutes !== true) {\n    ignore.push(/\\+api\\.[tj]sx?$/);\n  }\n  return ignore;\n}\n\nfunction extrapolateGroups(key: string, keys: Set<string> = new Set()): Set<string> {\n  const match = matchGroupName(key);\n\n  if (!match) {\n    keys.add(key);\n    return keys;\n  }\n\n  const groups = match?.split(',');\n  const groupsSet = new Set(groups);\n\n  if (groupsSet.size !== groups.length) {\n    throw new Error(`Array syntax cannot contain duplicate group name \"${groups}\" in \"${key}\".`);\n  }\n\n  if (groups.length === 1) {\n    keys.add(key);\n    return keys;\n  }\n\n  for (const group of groups) {\n    extrapolateGroups(key.replace(match, group.trim()), keys);\n  }\n\n  return keys;\n}\n"]}