{"version":3,"file":"qualified-entry.js","sourceRoot":"","sources":["../src/qualified-entry.tsx"],"names":[],"mappings":";AAAA,wFAAwF;AACxF,yFAAyF;AACzF,6FAA6F;AAC7F,2FAA2F;;;;;;AAE3F,iFAAiF;AACjF,yEAAyE;AACzE,0FAAkE;AAClE,2CAAuC;AACvC,kDAA0B;AAE1B,yCAAyC;AACzC,iCAA8B;AAC9B,yCAA0C;AAG1C,gHAAgH;AAChH,qCAAkC;AAClC,uCAA0C;AAC1C,gDAA6C;AAC7C,mFAAkE;AAElE,yCAAsC;AAEtC,MAAM,QAAQ,GAAG,IAAA,sBAAY,GAAE,CAAC,aAAa,CAAC;AAC9C,qFAAqF;AACrF,MAAM,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;AAE/E,6CAA6C;AAC7C,4DAA4D;AAC5D,SAAgB,GAAG;IACjB,kCAAkC;IAClC,qCAAqC;IAErC,WAAW;IACX,+BAA+B;IAC/B,uBAAuB;IACvB,YAAY;IACZ,KAAK;IACL,uBAAuB;IACvB,WAAW;IACX,oCAAoC;IACpC,IAAI;IAEJ,OAAO,CACL,CAAC,eAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAC7B;MAAA,CAAC,WAAI,CAAC,QAAQ,CACZ;QAAA,CAAC,iDAAgB,CACf;UAAA,CAAC,SAAG,CAAC,KAAK,CAAC,CAAC,uBAAa,CAAC,CACxB;YAAA,CAAC,aAAI,CAAC,yBAAyB,CAAC,CAAC,YAAY,CAAC,CAC5C;cAAA,CAAC,aAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,EACnB;YAAA,EAAE,aAAI,CACR;UAAA,EAAE,SAAG,CACP;QAAA,EAAE,iDAAgB,CACpB;MAAA,EAAE,WAAI,CAAC,QAAQ,CACjB;IAAA,EAAE,eAAK,CAAC,QAAQ,CAAC,CAClB,CAAC;IACF,WAAW;IACX,qCAAqC;IACrC,sBAAsB;IACtB,2BAA2B;IAC3B,6BAA6B;IAC7B,wCAAwC;IACxC,yBAAyB;IACzB,sEAAsE;IACtE,0CAA0C;IAC1C,8BAA8B;IAC9B,mBAAmB;IACnB,8BAA8B;IAC9B,4BAA4B;IAC5B,uBAAuB;IACvB,sBAAsB;IACtB,KAAK;IACL,OAAO,CACL,CAAC,eAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAC7B;MAAA,CAAC,WAAI,CAAC,QAAQ,CACZ;QAAA,CAAC,SAAG,CAAC,KAAK,CAAC,CAAC,uBAAa,CAAC,CACxB;UAAA,CAAC,eAAM,CACL;YAAA,CAAC,mBAAQ,CAAC,OAAO,CAAC,CAAC,UAAG,CAAC,EACzB;UAAA,EAAE,eAAM,CACV;QAAA,EAAE,SAAG,CACP;MAAA,EAAE,WAAI,CAAC,QAAQ,CACjB;IAAA,EAAE,eAAK,CAAC,QAAQ,CAAC,CAClB,CAAC;AACJ,CAAC;AAtDD,kBAsDC","sourcesContent":["// The entry component (one that uses context modules) cannot be in the same file as the\n// entry side-effects, otherwise they'll be updated when files are added/removed from the\n// app directory. This will cause a lot of unfortunate errors regarding HMR and Fast Refresh.\n// This is because Fast Refresh is sending the entire file containing an updated component.\n\n// This has to be the string \"expo-router/_ctx\" as we resolve the exact string to\n// a different file in a custom resolver for bundle splitting in Node.js.\nimport getDevServer from '@expo/metro-runtime/build/getDevServer';\nimport { ctx } from 'expo-router/_ctx';\nimport React from 'react';\n\n// import { ExpoRoot } from './ExpoRoot';\nimport { Head } from './head';\nimport { Slot, Root } from './rsc/client';\nimport { Text } from 'react-native';\n\n// MUST be the one from metro-runtime as it contains the URL query parameters for the bundle to configure Metro.\nimport { Try } from './views/Try';\nimport { ErrorBoundary } from './exports';\nimport { Router } from './rsc/router/client';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport ContextNavigator from './rsc-navigator';\nimport { ExpoRoot } from './ExpoRoot';\n\nconst introUrl = getDevServer().fullBundleUrl;\n// TODO: This is buggy and doesn't work well, maybe inject the query params in babel.\nconst searchParams = introUrl ? new URL(introUrl).searchParams.toString() : '';\n\n// console.log('searchParams', searchParams);\n// Must be exported or Fast Refresh won't update the context\nexport function App() {\n  // console.log('ctx', ctx.keys());\n  // {/* <ExpoRoot context={ctx} /> */}\n\n  // return (\n  //   <View style={{ flex: 1 }}>\n  //     <Text>Hey</Text>\n  //   </View>\n  // );\n  // console.log('Mount')\n  // return (\n  //   <Text>HeyHeyHeyHeyHeyHey</Text>\n  // )\n\n  return (\n    <React.Suspense fallback={null}>\n      <Head.Provider>\n        <SafeAreaProvider>\n          <Try catch={ErrorBoundary}>\n            <Root initialSearchParamsString={searchParams}>\n              <Slot id={'page'} />\n            </Root>\n          </Try>\n        </SafeAreaProvider>\n      </Head.Provider>\n    </React.Suspense>\n  );\n  // return (\n  //   <React.Suspense fallback={null}>\n  //     <Head.Provider>\n  //       <SafeAreaProvider>\n  //         <ContextNavigator>\n  //           <Try catch={ErrorBoundary}>\n  //             <Router />\n  //             {/* <Root initialSearchParamsString={searchParams}> */}\n  //             {/* <Slot id={input} /> */}\n  //             {/* </Root> */}\n  //           </Try>\n  //         </ContextNavigator>\n  //       </SafeAreaProvider>\n  //     </Head.Provider>\n  //   </React.Suspense>\n  // );\n  return (\n    <React.Suspense fallback={null}>\n      <Head.Provider>\n        <Try catch={ErrorBoundary}>\n          <Router>\n            <ExpoRoot context={ctx} />\n          </Router>\n        </Try>\n      </Head.Provider>\n    </React.Suspense>\n  );\n}\n"]}