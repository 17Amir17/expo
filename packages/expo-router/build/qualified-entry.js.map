{"version":3,"file":"qualified-entry.js","sourceRoot":"","sources":["../src/qualified-entry.tsx"],"names":[],"mappings":";AAAA,wFAAwF;AACxF,yFAAyF;AACzF,6FAA6F;AAC7F,2FAA2F;;;;;;AAK3F,kDAA0B;AAE1B,yCAAyC;AACzC,iCAA8B;AAC9B,yCAA0C;AAE1C,gHAAgH;AAChH,0FAAkE;AAElE,MAAM,QAAQ,GAAG,IAAA,sBAAY,GAAE,CAAC,aAAa,CAAC;AAC9C,qFAAqF;AACrF,MAAM,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;AAE/E,6CAA6C;AAC7C,4DAA4D;AAC5D,SAAgB,GAAG;IACjB,kCAAkC;IAClC,qCAAqC;IAErC,OAAO,CACL,CAAC,WAAI,CAAC,QAAQ,CACZ;MAAA,CAAC,aAAI,CAAC,yBAAyB,CAAC,CAAC,YAAY,CAAC,CAC5C;QAAA,CAAC;;;gBAGO,CACR;QAAA,CAAC,aAAI,CAAC,EAAE,CAAC,OAAO,EAClB;MAAA,EAAE,aAAI,CACR;IAAA,EAAE,WAAI,CAAC,QAAQ,CAAC,CACjB,CAAC;AACJ,CAAC;AAfD,kBAeC","sourcesContent":["// The entry component (one that uses context modules) cannot be in the same file as the\n// entry side-effects, otherwise they'll be updated when files are added/removed from the\n// app directory. This will cause a lot of unfortunate errors regarding HMR and Fast Refresh.\n// This is because Fast Refresh is sending the entire file containing an updated component.\n\n// This has to be the string \"expo-router/_ctx\" as we resolve the exact string to\n// a different file in a custom resolver for bundle splitting in Node.js.\nimport { ctx } from 'expo-router/_ctx';\nimport React from 'react';\n\n// import { ExpoRoot } from './ExpoRoot';\nimport { Head } from './head';\nimport { Slot, Root } from './rsc/client';\n\n// MUST be the one from metro-runtime as it contains the URL query parameters for the bundle to configure Metro.\nimport getDevServer from '@expo/metro-runtime/build/getDevServer';\n\nconst introUrl = getDevServer().fullBundleUrl;\n// TODO: This is buggy and doesn't work well, maybe inject the query params in babel.\nconst searchParams = introUrl ? new URL(introUrl).searchParams.toString() : '';\n\n// console.log('searchParams', searchParams);\n// Must be exported or Fast Refresh won't update the context\nexport function App() {\n  // console.log('ctx', ctx.keys());\n  // {/* <ExpoRoot context={ctx} /> */}\n\n  return (\n    <Head.Provider>\n      <Root initialSearchParamsString={searchParams}>\n        {/* initialSearchParamsString={`platform=${'web'}&manifest=${encodeURIComponent(\n          // Injected by the serializer in development\n          JSON.stringify(global.$$expo_rsc_manifest)\n        )}`}> */}\n        <Slot id=\"index\" />\n      </Root>\n    </Head.Provider>\n  );\n}\n"]}