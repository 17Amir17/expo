{"version":3,"file":"svg-modules.js","names":["_metroTransformWorker","data","_interopRequireDefault","require","obj","__esModule","default","convertSvgModule","projectRoot","src","options","resolveConfig","transform","isNotNative","platform","defaultSVGRConfig","native","plugins","svgoConfig","name","params","overrides","inlineStyles","onlyMatchedOnce","removeViewBox","removeUnknownsAndDefaults","convertColors","svgUserConfig","svgrConfig","transformSvg","config","filename","worker","Buffer","from","toString","matchSvgModule","filePath","test"],"sources":["../../src/transform-worker/svg-modules.ts"],"sourcesContent":["/**\n * Copyright 2023-present 650 Industries (Expo). All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport worker, {\n  JsTransformerConfig,\n  JsTransformOptions,\n  TransformResponse,\n} from 'metro-transform-worker';\n\nexport async function convertSvgModule(\n  projectRoot: string,\n  src: string,\n  options: Pick<JsTransformOptions, 'platform'>\n): Promise<string> {\n  const { resolveConfig, transform } = require('@svgr/core') as typeof import('@svgr/core');\n  const isNotNative = !options.platform || options.platform === 'web';\n\n  const defaultSVGRConfig = {\n    native: !isNotNative,\n    plugins: ['@svgr/plugin-svgo', '@svgr/plugin-jsx'],\n    svgoConfig: {\n      // TODO: Maybe there's a better config for web?\n      plugins: [\n        {\n          name: 'preset-default',\n          params: {\n            overrides: {\n              inlineStyles: {\n                onlyMatchedOnce: false,\n              },\n              removeViewBox: false,\n              removeUnknownsAndDefaults: false,\n              convertColors: false,\n            },\n          },\n        },\n      ],\n    },\n  };\n\n  const svgUserConfig = await resolveConfig(projectRoot);\n  const svgrConfig = svgUserConfig ? { ...defaultSVGRConfig, ...svgUserConfig } : defaultSVGRConfig;\n\n  return await transform(\n    src,\n    // @ts-expect-error\n    svgrConfig\n  );\n}\n\nexport async function transformSvg(\n  config: JsTransformerConfig,\n  projectRoot: string,\n  filename: string,\n  data: Buffer,\n  options: JsTransformOptions\n): Promise<TransformResponse> {\n  return worker.transform(\n    config,\n    projectRoot,\n    filename,\n    Buffer.from(await convertSvgModule(projectRoot, data.toString(), options)),\n    options\n  );\n}\n\nexport function matchSvgModule(filePath: string): boolean {\n  return !!/\\.module(\\.(native|ios|android|web))?\\.svg$/.test(filePath);\n}\n"],"mappings":";;;;;;;;AAMA,SAAAA,sBAAA;EAAA,MAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,qBAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAIgC,SAAAC,uBAAAE,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAVhC;AACA;AACA;AACA;AACA;AACA;;AAOO,eAAeG,gBAAgBA,CACpCC,WAAmB,EACnBC,GAAW,EACXC,OAA6C,EAC5B;EACjB,MAAM;IAAEC,aAAa;IAAEC;EAAU,CAAC,GAAGT,OAAO,CAAC,YAAY,CAAgC;EACzF,MAAMU,WAAW,GAAG,CAACH,OAAO,CAACI,QAAQ,IAAIJ,OAAO,CAACI,QAAQ,KAAK,KAAK;EAEnE,MAAMC,iBAAiB,GAAG;IACxBC,MAAM,EAAE,CAACH,WAAW;IACpBI,OAAO,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,CAAC;IAClDC,UAAU,EAAE;MACV;MACAD,OAAO,EAAE,CACP;QACEE,IAAI,EAAE,gBAAgB;QACtBC,MAAM,EAAE;UACNC,SAAS,EAAE;YACTC,YAAY,EAAE;cACZC,eAAe,EAAE;YACnB,CAAC;YACDC,aAAa,EAAE,KAAK;YACpBC,yBAAyB,EAAE,KAAK;YAChCC,aAAa,EAAE;UACjB;QACF;MACF,CAAC;IAEL;EACF,CAAC;EAED,MAAMC,aAAa,GAAG,MAAMhB,aAAa,CAACH,WAAW,CAAC;EACtD,MAAMoB,UAAU,GAAGD,aAAa,GAAG;IAAE,GAAGZ,iBAAiB;IAAE,GAAGY;EAAc,CAAC,GAAGZ,iBAAiB;EAEjG,OAAO,MAAMH,SAAS,CACpBH,GAAG;EACH;EACAmB,UAAU,CACX;AACH;AAEO,eAAeC,YAAYA,CAChCC,MAA2B,EAC3BtB,WAAmB,EACnBuB,QAAgB,EAChB9B,IAAY,EACZS,OAA2B,EACC;EAC5B,OAAOsB,+BAAM,CAACpB,SAAS,CACrBkB,MAAM,EACNtB,WAAW,EACXuB,QAAQ,EACRE,MAAM,CAACC,IAAI,CAAC,MAAM3B,gBAAgB,CAACC,WAAW,EAAEP,IAAI,CAACkC,QAAQ,EAAE,EAAEzB,OAAO,CAAC,CAAC,EAC1EA,OAAO,CACR;AACH;AAEO,SAAS0B,cAAcA,CAACC,QAAgB,EAAW;EACxD,OAAO,CAAC,CAAC,6CAA6C,CAACC,IAAI,CAACD,QAAQ,CAAC;AACvE"}