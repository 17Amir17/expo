{"version":3,"file":"fetchThenEvalJs.js","sourceRoot":"","sources":["../../src/async-require/fetchThenEvalJs.ts"],"names":[],"mappings":";;;AAAA;;;;;GAKG;AACH,6CAA0C;AAM1C;;;;GAIG;AACH,SAAgB,kBAAkB,CAAC,GAAW;IAC5C,OAAO,IAAA,uBAAU,EAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE;QACxD,IACE,OAAO,EAAE,GAAG,EAAE,CAAC,cAAc,CAAC,IAAI,IAAI;YACtC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAE,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EACzD;YACA,+BAA+B;YAC/B,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,IAAI,2BAA2B,GAAG,GAAG,CAAC,CAAC;SAChF;QAED,0DAA0D;QAC1D,qjPAAqjP;QAErjP,IAAI,MAAM,KAAK,GAAG,EAAE;YAClB,oEAAoE;YACpE,qEAAqE;YACrE,IAAI,MAAM,CAAC,uBAAuB,EAAE;gBAClC,OAAO,MAAM,CAAC,uBAAuB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;aAClD;iBAAM;gBACL,mCAAmC;gBACnC,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;aACnB;SACF;aAAM;YACL,mCAAmC;YACnC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;gBAC1C,MAAM,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBACtC,IAAI,KAAK,EAAE;oBACT,+GAA+G;oBAC/G,wIAAwI;oBACxI,IAAI,SAAS,IAAI,KAAK,EAAE;wBACtB,MAAM,IAAI,KAAK,CAAC,4DAA4D,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;qBAC/F;iBACF;aACF;YAED,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,KAAK,IAAI,EAAE,CAAC,CAAC;SAC9D;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAtCD,gDAsCC;AAED,SAAS,iBAAiB,CAAC,IAAY;IACrC,IAAI;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KACzB;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,IAAI,CAAC;KACb;AACH,CAAC","sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { fetchAsync } from './fetchAsync';\n\ndeclare let global: {\n  globalEvalWithSourceUrl?: any;\n};\n\n/**\n * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n *\n * @param bundlePath Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon`.\n */\nexport function fetchThenEvalAsync(url: string): Promise<void> {\n  return fetchAsync(url).then(({ body, status, headers }) => {\n    if (\n      headers?.has?.('Content-Type') != null &&\n      headers.get('Content-Type')!.includes('application/json')\n    ) {\n      // Errors are returned as JSON.\n      throw new Error(JSON.parse(body).message || `Unknown error fetching '${url}'`);\n    }\n\n    // body can be an error from Metro if a module is missing.\n    // {\"originModulePath\":\"/Users/evanbacon/Documents/GitHub/expo/.\",\"targetModuleName\":\"./http://localhost:8081/node_modules/react-native/index.js\",\"message\":\"Unable to resolve module ./http://localhost:8081/node_modules/react-native/index.js from /Users/evanbacon/Documents/GitHub/expo/.: \\n\\nNone of these files exist:\\n  * ../../http:/localhost:8081/node_modules/react-native/index.js(.ios.ts|.native.ts|.ts|.ios.tsx|.native.tsx|.tsx|.ios.mjs|.native.mjs|.mjs|.ios.js|.native.js|.js|.ios.jsx|.native.jsx|.jsx|.ios.json|.native.json|.json|.ios.cjs|.native.cjs|.cjs|.ios.scss|.native.scss|.scss|.ios.sass|.native.sass|.sass|.ios.css|.native.css|.css)\\n  * ../../http:/localhost:8081/node_modules/react-native/index.js/index(.ios.ts|.native.ts|.ts|.ios.tsx|.native.tsx|.tsx|.ios.mjs|.native.mjs|.mjs|.ios.js|.native.js|.js|.ios.jsx|.native.jsx|.jsx|.ios.json|.native.json|.json|.ios.cjs|.native.cjs|.cjs|.ios.scss|.native.scss|.scss|.ios.sass|.native.sass|.sass|.ios.css|.native.css|.css)\",\"cause\":{\"candidates\":{\"file\":{\"type\":\"sourceFile\",\"filePathPrefix\":\"../../http:/localhost:8081/node_modules/react-native/index.js\",\"candidateExts\":[\"\",\".ios.ts\",\".native.ts\",\".ts\",\".ios.tsx\",\".native.tsx\",\".tsx\",\".ios.mjs\",\".native.mjs\",\".mjs\",\".ios.js\",\".native.js\",\".js\",\".ios.jsx\",\".native.jsx\",\".jsx\",\".ios.json\",\".native.json\",\".json\",\".ios.cjs\",\".native.cjs\",\".cjs\",\".ios.scss\",\".native.scss\",\".scss\",\".ios.sass\",\".native.sass\",\".sass\",\".ios.css\",\".native.css\",\".css\"]},\"dir\":{\"type\":\"sourceFile\",\"filePathPrefix\":\"../../http:/localhost:8081/node_modules/react-native/index.js/index\",\"candidateExts\":[\"\",\".ios.ts\",\".native.ts\",\".ts\",\".ios.tsx\",\".native.tsx\",\".tsx\",\".ios.mjs\",\".native.mjs\",\".mjs\",\".ios.js\",\".native.js\",\".js\",\".ios.jsx\",\".native.jsx\",\".jsx\",\".ios.json\",\".native.json\",\".json\",\".ios.cjs\",\".native.cjs\",\".cjs\",\".ios.scss\",\".native.scss\",\".scss\",\".ios.sass\",\".native.sass\",\".sass\",\".ios.css\",\".native.css\",\".css\"]}},\"name\":\"Error\",\"message\":\"The module could not be resolved because none of these files exist:\\n\\n  * /Users/evanbacon/Documents/GitHub/expo/http:/localhost:8081/node_modules/react-native/index.js(.ios.ts|.native.ts|.ts|.ios.tsx|.native.tsx|.tsx|.ios.mjs|.native.mjs|.mjs|.ios.js|.native.js|.js|.ios.jsx|.native.jsx|.jsx|.ios.json|.native.json|.json|.ios.cjs|.native.cjs|.cjs|.ios.scss|.native.scss|.scss|.ios.sass|.native.sass|.sass|.ios.css|.native.css|.css)\\n  * /Users/evanbacon/Documents/GitHub/expo/http:/localhost:8081/node_modules/react-native/index.js/index(.ios.ts|.native.ts|.ts|.ios.tsx|.native.tsx|.tsx|.ios.mjs|.native.mjs|.mjs|.ios.js|.native.js|.js|.ios.jsx|.native.jsx|.jsx|.ios.json|.native.json|.json|.ios.cjs|.native.cjs|.cjs|.ios.scss|.native.scss|.scss|.ios.sass|.native.sass|.sass|.ios.css|.native.css|.css)\",\"stack\":\"Error: The module could not be resolved because none of these files exist:\\n\\n  * /Users/evanbacon/Documents/GitHub/expo/http:/localhost:8081/node_modules/react-native/index.js(.ios.ts|.native.ts|.ts|.ios.tsx|.native.tsx|.tsx|.ios.mjs|.native.mjs|.mjs|.ios.js|.native.js|.js|.ios.jsx|.native.jsx|.jsx|.ios.json|.native.json|.json|.ios.cjs|.native.cjs|.cjs|.ios.scss|.native.scss|.scss|.ios.sass|.native.sass|.sass|.ios.css|.native.css|.css)\\n  * /Users/evanbacon/Documents/GitHub/expo/http:/localhost:8081/node_modules/react-native/index.js/index(.ios.ts|.native.ts|.ts|.ios.tsx|.native.tsx|.tsx|.ios.mjs|.native.mjs|.mjs|.ios.js|.native.js|.js|.ios.jsx|.native.jsx|.jsx|.ios.json|.native.json|.json|.ios.cjs|.native.cjs|.cjs|.ios.scss|.native.scss|.scss|.ios.sass|.native.sass|.sass|.ios.css|.native.css|.css)\\n    at upstreamResolveRequest (/Users/evanbacon/Documents/GitHub/expo/node_modules/metro-resolver/src/resolve.js:59:13)\\n    at resolveRequest (/Users/evanbacon/Documents/GitHub/expo/packages/@expo/cli/src/start/server/metro/withMetroResolvers.ts:94:20)\\n    at upstreamResolveRequest (/Users/evanbacon/Documents/GitHub/expo/node_modules/metro-resolver/src/resolve.js:47:12)\\n    at firstResolver (/Users/evanbacon/Documents/GitHub/expo/packages/@expo/cli/src/start/server/metro/withMetroResolvers.ts:94:20)\\n    at firstResolver (/Users/evanbacon/Documents/GitHub/expo/packages/@expo/cli/src/start/server/metro/withMetroResolvers.ts:108:16)\\n    at resolveRequest (/Users/evanbacon/Documents/GitHub/expo/packages/@expo/cli/src/start/server/metro/withMetroResolvers.ts:137:16)\\n    at Object.resolve (/Users/evanbacon/Documents/GitHub/expo/node_modules/metro-resolver/src/resolve.js:47:12)\\n    at ModuleResolver.resolveDependency (/Users/evanbacon/Documents/GitHub/expo/node_modules/metro/src/node-haste/DependencyGraph/ModuleResolution.js:88:31)\\n    at DependencyGraph.resolveDependency (/Users/evanbacon/Documents/GitHub/expo/node_modules/metro/src/node-haste/DependencyGraph.js:279:43)\\n    at /Users/evanbacon/Documents/GitHub/expo/node_modules/metro/src/lib/transformHelpers.js:176:21\\n    at Server._resolveRelativePath (/Users/evanbacon/Documents/GitHub/expo/node_modules/metro/src/Server.js:1093:12)\\n    at Server.requestProcessor [as _processBundleRequest] (/Users/evanbacon/Documents/GitHub/expo/node_modules/metro/src/Server.js:456:33)\\n    at Server._processRequest (/Users/evanbacon/Documents/GitHub/expo/node_modules/metro/src/Server.js:387:7)\"},\"errors\":[{\"description\":\"Unable to resolve module ./http://localhost:8081/node_modules/react-native/index.js from /Users/evanbacon/Documents/GitHub/expo/.: \\n\\nNone of these files exist:\\n  * ../../http:/localhost:8081/node_modules/react-native/index.js(.ios.ts|.native.ts|.ts|.ios.tsx|.native.tsx|.tsx|.ios.mjs|.native.mjs|.mjs|.ios.js|.native.js|.js|.ios.jsx|.native.jsx|.jsx|.ios.json|.native.json|.json|.ios.cjs|.native.cjs|.cjs|.ios.scss|.native.scss|.scss|.ios.sass|.native.sass|.sass|.ios.css|.native.css|.css)\\n  * ../../http:/localhost:8081/node_modules/react-native/index.js/index(.ios.ts|.native.ts|.ts|.ios.tsx|.native.tsx|.tsx|.ios.mjs|.native.mjs|.mjs|.ios.js|.native.js|.js|.ios.jsx|.native.jsx|.jsx|.ios.json|.native.json|.json|.ios.cjs|.native.cjs|.cjs|.ios.scss|.native.scss|.scss|.ios.sass|.native.sass|.sass|.ios.css|.native.css|.css)\"}],\"name\":\"Error\",\"stack\":\"Error: Unable to resolve module ./http://localhost:8081/node_modules/react-native/index.js from /Users/evanbacon/Documents/GitHub/expo/.: \\n\\nNone of these files exist:\\n  * ../../http:/localhost:8081/node_modules/react-native/index.js(.ios.ts|.native.ts|.ts|.ios.tsx|.native.tsx|.tsx|.ios.mjs|.native.mjs|.mjs|.ios.js|.native.js|.js|.ios.jsx|.native.jsx|.jsx|.ios.json|.native.json|.json|.ios.cjs|.native.cjs|.cjs|.ios.scss|.native.scss|.scss|.ios.sass|.native.sass|.sass|.ios.css|.native.css|.css)\\n  * ../../http:/localhost:8081/node_modules/react-native/index.js/index(.ios.ts|.native.ts|.ts|.ios.tsx|.native.tsx|.tsx|.ios.mjs|.native.mjs|.mjs|.ios.js|.native.js|.js|.ios.jsx|.native.jsx|.jsx|.ios.json|.native.json|.json|.ios.cjs|.native.cjs|.cjs|.ios.scss|.native.scss|.scss|.ios.sass|.native.sass|.sass|.ios.css|.native.css|.css)\\n    at ModuleResolver.resolveDependency (/Users/evanbacon/Documents/GitHub/expo/node_modules/metro/src/node-haste/DependencyGraph/ModuleResolution.js:127:15)\\n    at DependencyGraph.resolveDependency (/Users/evanbacon/Documents/GitHub/expo/node_modules/metro/src/node-haste/DependencyGraph.js:279:43)\\n    at /Users/evanbacon/Documents/GitHub/expo/node_modules/metro/src/lib/transformHelpers.js:176:21\\n    at Server._resolveRelativePath (/Users/evanbacon/Documents/GitHub/expo/node_modules/metro/src/Server.js:1093:12)\\n    at Server.requestProcessor [as _processBundleRequest] (/Users/evanbacon/Documents/GitHub/expo/node_modules/metro/src/Server.js:456:33)\\n    at Server._processRequest (/Users/evanbacon/Documents/GitHub/expo/node_modules/metro/src/Server.js:387:7)\"}\n\n    if (status === 200) {\n      // Some engines do not support `sourceURL` as a comment. We expose a\n      // `globalEvalWithSourceUrl` function to handle updates in that case.\n      if (global.globalEvalWithSourceUrl) {\n        return global.globalEvalWithSourceUrl(body, url);\n      } else {\n        // eslint-disable-next-line no-eval\n        return eval(body);\n      }\n    } else {\n      // Format Metro errors if possible.\n      if (process.env.NODE_ENV === 'development') {\n        const error = jsonParseOptional(body);\n        if (error) {\n          // TODO: This is essentially like the Metro native red box errors. We should do a better job formatting them so\n          // the user experience doesn't feel bad. This can be tested by loading a split bundle that results in a missing module error from Metro.\n          if ('message' in error) {\n            throw new Error('Error fetching split bundle from Metro (check terminal):\\n' + error.message);\n          }\n        }\n      }\n\n      throw new Error(`Failed to load bundle for ${url}: ${body}`);\n    }\n  });\n}\n\nfunction jsonParseOptional(json: string): any {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n}"]}