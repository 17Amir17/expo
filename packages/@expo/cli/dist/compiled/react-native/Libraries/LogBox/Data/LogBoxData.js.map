{"version":3,"names":["_parseErrorStack","_interopRequireDefault","require","_NativeLogBox","_LogBoxLog","_parseLogBoxLog","React","_interopRequireWildcard","_jsxRuntime","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","observers","Set","ignorePatterns","appInfo","logs","updateTimeout","_isDisabled","_selectedIndex","warningFilter","format","finalFormat","forceDialogImmediately","suppressDialog_LEGACY","suppressCompletely","monitorEvent","monitorListVersion","monitorSampleRate","LOGBOX_ERROR_MESSAGE","getNextState","isDisabled","selectedLogIndex","reportLogBoxError","error","componentStack","ExceptionsManager","message","handleException","isLogBoxErrorMessage","includes","isMessageIgnored","pattern","RegExp","test","handleUpdate","setImmediate","nextState","forEach","_ref","observer","appendNewLog","newLog","content","lastLog","Array","from","pop","category","incrementCount","level","OPTIMISTIC_WAIT_TIME","addPendingLog","add","setSelectedLog","size","optimisticTimeout","setTimeout","symbolicate","status","clearTimeout","addLog","log","errorForStackTrace","Error","stack","parseErrorStack","LogBoxLog","isComponentError","addException","parseLogBoxException","loggingError","symbolicateLogNow","retrySymbolicateLogNow","retrySymbolicate","symbolicateLogLazy","clear","proposedNewIndex","oldIndex","newIndex","logArray","index","length","NativeLogBox","show","hide","clearWarnings","newLogs","filter","clearErrors","dismiss","delete","setWarningFilter","setAppInfo","info","getAppInfo","checkWarningFilter","getIgnorePatterns","addIgnorePatterns","patterns","existingSize","existingPattern","toString","setDisabled","value","observe","subscription","unsubscribe","withSubscription","WrappedComponent","LogBoxStateSubscription","_React$Component","_inherits2","_super","_this","_classCallCheck2","_len","args","_key","concat","state","hasError","_handleDismiss","_this$state","stateLogs","logsArray","_handleMinimize","_handleSetSelectedLog","_createClass2","componentDidCatch","err","errorInfo","render","jsx","componentDidMount","_this2","_subscription","data","setState","componentWillUnmount","getDerivedStateFromError","Component"],"sources":["LogBoxData.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n('use strict');\n\nimport type {ExtendedError} from '../../Core/ExtendedError';\nimport type {LogLevel} from './LogBoxLog';\nimport type {\n  Category,\n  ComponentStack,\n  ExtendedExceptionData,\n  Message,\n} from './parseLogBoxLog';\n\nimport parseErrorStack from '../../Core/Devtools/parseErrorStack';\nimport NativeLogBox from '../../NativeModules/specs/NativeLogBox';\nimport LogBoxLog from './LogBoxLog';\nimport {parseLogBoxException} from './parseLogBoxLog';\nimport * as React from 'react';\nexport type LogBoxLogs = Set<LogBoxLog>;\nexport type LogData = $ReadOnly<{|\n  level: LogLevel,\n  message: Message,\n  category: Category,\n  componentStack: ComponentStack,\n|}>;\n\nexport type Observer = (\n  $ReadOnly<{|\n    logs: LogBoxLogs,\n    isDisabled: boolean,\n    selectedLogIndex: number,\n  |}>,\n) => void;\n\nexport type IgnorePattern = string | RegExp;\n\nexport type Subscription = $ReadOnly<{|\n  unsubscribe: () => void,\n|}>;\n\nexport type WarningInfo = {|\n  finalFormat: string,\n  forceDialogImmediately: boolean,\n  suppressDialog_LEGACY: boolean,\n  suppressCompletely: boolean,\n  monitorEvent: string | null,\n  monitorListVersion: number,\n  monitorSampleRate: number,\n|};\n\nexport type WarningFilter = (format: string) => WarningInfo;\n\ntype AppInfo = $ReadOnly<{|\n  appVersion: string,\n  engine: string,\n  onPress?: ?() => void,\n|}>;\n\nconst observers: Set<{observer: Observer, ...}> = new Set();\nconst ignorePatterns: Set<IgnorePattern> = new Set();\nlet appInfo: ?() => AppInfo = null;\nlet logs: LogBoxLogs = new Set();\nlet updateTimeout: $FlowFixMe | null = null;\nlet _isDisabled = false;\nlet _selectedIndex = -1;\n\nlet warningFilter: WarningFilter = function (format) {\n  return {\n    finalFormat: format,\n    forceDialogImmediately: false,\n    suppressDialog_LEGACY: true,\n    suppressCompletely: false,\n    monitorEvent: 'unknown',\n    monitorListVersion: 0,\n    monitorSampleRate: 1,\n  };\n};\n\nconst LOGBOX_ERROR_MESSAGE =\n  'An error was thrown when attempting to render log messages via LogBox.';\n\nfunction getNextState() {\n  return {\n    logs,\n    isDisabled: _isDisabled,\n    selectedLogIndex: _selectedIndex,\n  };\n}\n\nexport function reportLogBoxError(\n  error: ExtendedError,\n  componentStack?: string,\n): void {\n  const ExceptionsManager = require('../../Core/ExceptionsManager');\n\n  error.message = `${LOGBOX_ERROR_MESSAGE}\\n\\n${error.message}`;\n  if (componentStack != null) {\n    error.componentStack = componentStack;\n  }\n  ExceptionsManager.handleException(error, /* isFatal */ true);\n}\n\nexport function isLogBoxErrorMessage(message: string): boolean {\n  return typeof message === 'string' && message.includes(LOGBOX_ERROR_MESSAGE);\n}\n\nexport function isMessageIgnored(message: string): boolean {\n  for (const pattern of ignorePatterns) {\n    if (\n      (pattern instanceof RegExp && pattern.test(message)) ||\n      (typeof pattern === 'string' && message.includes(pattern))\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction handleUpdate(): void {\n  if (updateTimeout == null) {\n    updateTimeout = setImmediate(() => {\n      updateTimeout = null;\n      const nextState = getNextState();\n      observers.forEach(({observer}) => observer(nextState));\n    });\n  }\n}\n\nfunction appendNewLog(newLog: LogBoxLog) {\n  // Don't want store these logs because they trigger a\n  // state update when we add them to the store.\n  if (isMessageIgnored(newLog.message.content)) {\n    return;\n  }\n\n  // If the next log has the same category as the previous one\n  // then roll it up into the last log in the list by incrementing\n  // the count (similar to how Chrome does it).\n  const lastLog = Array.from(logs).pop();\n  if (lastLog && lastLog.category === newLog.category) {\n    lastLog.incrementCount();\n    handleUpdate();\n    return;\n  }\n\n  if (newLog.level === 'fatal') {\n    // If possible, to avoid jank, we don't want to open the error before\n    // it's symbolicated. To do that, we optimistically wait for\n    // symbolication for up to a second before adding the log.\n    const OPTIMISTIC_WAIT_TIME = 1000;\n\n    let addPendingLog: ?() => void = () => {\n      logs.add(newLog);\n      if (_selectedIndex < 0) {\n        setSelectedLog(logs.size - 1);\n      } else {\n        handleUpdate();\n      }\n      addPendingLog = null;\n    };\n\n    const optimisticTimeout = setTimeout(() => {\n      if (addPendingLog) {\n        addPendingLog();\n      }\n    }, OPTIMISTIC_WAIT_TIME);\n\n    newLog.symbolicate(status => {\n      if (addPendingLog && status !== 'PENDING') {\n        addPendingLog();\n        clearTimeout(optimisticTimeout);\n      } else if (status !== 'PENDING') {\n        // The log has already been added but we need to trigger a render.\n        handleUpdate();\n      }\n    });\n  } else if (newLog.level === 'syntax') {\n    logs.add(newLog);\n    setSelectedLog(logs.size - 1);\n  } else {\n    logs.add(newLog);\n    handleUpdate();\n  }\n}\n\nexport function addLog(log: LogData): void {\n  const errorForStackTrace = new Error();\n\n  // Parsing logs are expensive so we schedule this\n  // otherwise spammy logs would pause rendering.\n  setImmediate(() => {\n    try {\n      const stack = parseErrorStack(errorForStackTrace?.stack);\n\n      appendNewLog(\n        new LogBoxLog({\n          level: log.level,\n          message: log.message,\n          isComponentError: false,\n          stack,\n          category: log.category,\n          componentStack: log.componentStack,\n        }),\n      );\n    } catch (error) {\n      reportLogBoxError(error);\n    }\n  });\n}\n\nexport function addException(error: ExtendedExceptionData): void {\n  // Parsing logs are expensive so we schedule this\n  // otherwise spammy logs would pause rendering.\n  setImmediate(() => {\n    try {\n      appendNewLog(new LogBoxLog(parseLogBoxException(error)));\n    } catch (loggingError) {\n      reportLogBoxError(loggingError);\n    }\n  });\n}\n\nexport function symbolicateLogNow(log: LogBoxLog) {\n  log.symbolicate(() => {\n    handleUpdate();\n  });\n}\n\nexport function retrySymbolicateLogNow(log: LogBoxLog) {\n  log.retrySymbolicate(() => {\n    handleUpdate();\n  });\n}\n\nexport function symbolicateLogLazy(log: LogBoxLog) {\n  log.symbolicate();\n}\n\nexport function clear(): void {\n  if (logs.size > 0) {\n    logs = new Set();\n    setSelectedLog(-1);\n  }\n}\n\nexport function setSelectedLog(proposedNewIndex: number): void {\n  const oldIndex = _selectedIndex;\n  let newIndex = proposedNewIndex;\n\n  const logArray = Array.from(logs);\n  let index = logArray.length - 1;\n  while (index >= 0) {\n    // The latest syntax error is selected and displayed before all other logs.\n    if (logArray[index].level === 'syntax') {\n      newIndex = index;\n      break;\n    }\n    index -= 1;\n  }\n  _selectedIndex = newIndex;\n  handleUpdate();\n  if (NativeLogBox) {\n    setTimeout(() => {\n      if (oldIndex < 0 && newIndex >= 0) {\n        NativeLogBox.show();\n      } else if (oldIndex >= 0 && newIndex < 0) {\n        NativeLogBox.hide();\n      }\n    }, 0);\n  }\n}\n\nexport function clearWarnings(): void {\n  const newLogs = Array.from(logs).filter(log => log.level !== 'warn');\n  if (newLogs.length !== logs.size) {\n    logs = new Set(newLogs);\n    setSelectedLog(-1);\n    handleUpdate();\n  }\n}\n\nexport function clearErrors(): void {\n  const newLogs = Array.from(logs).filter(\n    log => log.level !== 'error' && log.level !== 'fatal',\n  );\n  if (newLogs.length !== logs.size) {\n    logs = new Set(newLogs);\n    setSelectedLog(-1);\n  }\n}\n\nexport function dismiss(log: LogBoxLog): void {\n  if (logs.has(log)) {\n    logs.delete(log);\n    handleUpdate();\n  }\n}\n\nexport function setWarningFilter(filter: WarningFilter): void {\n  warningFilter = filter;\n}\n\nexport function setAppInfo(info: () => AppInfo): void {\n  appInfo = info;\n}\n\nexport function getAppInfo(): ?AppInfo {\n  return appInfo != null ? appInfo() : null;\n}\n\nexport function checkWarningFilter(format: string): WarningInfo {\n  return warningFilter(format);\n}\n\nexport function getIgnorePatterns(): $ReadOnlyArray<IgnorePattern> {\n  return Array.from(ignorePatterns);\n}\n\nexport function addIgnorePatterns(\n  patterns: $ReadOnlyArray<IgnorePattern>,\n): void {\n  const existingSize = ignorePatterns.size;\n  // The same pattern may be added multiple times, but adding a new pattern\n  // can be expensive so let's find only the ones that are new.\n  patterns.forEach((pattern: IgnorePattern) => {\n    if (pattern instanceof RegExp) {\n      for (const existingPattern of ignorePatterns) {\n        if (\n          existingPattern instanceof RegExp &&\n          existingPattern.toString() === pattern.toString()\n        ) {\n          return;\n        }\n      }\n      ignorePatterns.add(pattern);\n    }\n    ignorePatterns.add(pattern);\n  });\n  if (ignorePatterns.size === existingSize) {\n    return;\n  }\n  // We need to recheck all of the existing logs.\n  // This allows adding an ignore pattern anywhere in the codebase.\n  // Without this, if you ignore a pattern after the a log is created,\n  // then we would keep showing the log.\n  logs = new Set(\n    Array.from(logs).filter(log => !isMessageIgnored(log.message.content)),\n  );\n  handleUpdate();\n}\n\nexport function setDisabled(value: boolean): void {\n  if (value === _isDisabled) {\n    return;\n  }\n  _isDisabled = value;\n  handleUpdate();\n}\n\nexport function isDisabled(): boolean {\n  return _isDisabled;\n}\n\nexport function observe(observer: Observer): Subscription {\n  const subscription = {observer};\n  observers.add(subscription);\n\n  observer(getNextState());\n\n  return {\n    unsubscribe(): void {\n      observers.delete(subscription);\n    },\n  };\n}\n\ntype Props = $ReadOnly<{||}>;\ntype State = $ReadOnly<{|\n  logs: LogBoxLogs,\n  isDisabled: boolean,\n  hasError: boolean,\n  selectedLogIndex: number,\n|}>;\n\ntype SubscribedComponent = React.AbstractComponent<\n  $ReadOnly<{|\n    logs: $ReadOnlyArray<LogBoxLog>,\n    isDisabled: boolean,\n    selectedLogIndex: number,\n  |}>,\n>;\n\nexport function withSubscription(\n  WrappedComponent: SubscribedComponent,\n): React.AbstractComponent<{||}> {\n  class LogBoxStateSubscription extends React.Component<Props, State> {\n    static getDerivedStateFromError(): {hasError: boolean} {\n      return {hasError: true};\n    }\n\n    componentDidCatch(err: Error, errorInfo: {componentStack: string, ...}) {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      reportLogBoxError(err, errorInfo.componentStack);\n    }\n\n    _subscription: ?Subscription;\n\n    state: State = {\n      logs: new Set(),\n      isDisabled: false,\n      hasError: false,\n      selectedLogIndex: -1,\n    };\n\n    render(): React.Node {\n      if (this.state.hasError) {\n        // This happens when the component failed to render, in which case we delegate to the native redbox.\n        // We can't show anyback fallback UI here, because the error may be with <View> or <Text>.\n        return null;\n      }\n\n      return (\n        <WrappedComponent\n          logs={Array.from(this.state.logs)}\n          isDisabled={this.state.isDisabled}\n          selectedLogIndex={this.state.selectedLogIndex}\n        />\n      );\n    }\n\n    componentDidMount(): void {\n      this._subscription = observe(data => {\n        this.setState(data);\n      });\n    }\n\n    componentWillUnmount(): void {\n      if (this._subscription != null) {\n        this._subscription.unsubscribe();\n      }\n    }\n\n    _handleDismiss = (): void => {\n      // Here we handle the cases when the log is dismissed and it\n      // was either the last log, or when the current index\n      // is now outside the bounds of the log array.\n      const {selectedLogIndex, logs: stateLogs} = this.state;\n      const logsArray = Array.from(stateLogs);\n      if (selectedLogIndex != null) {\n        if (logsArray.length - 1 <= 0) {\n          setSelectedLog(-1);\n        } else if (selectedLogIndex >= logsArray.length - 1) {\n          setSelectedLog(selectedLogIndex - 1);\n        }\n\n        dismiss(logsArray[selectedLogIndex]);\n      }\n    };\n\n    _handleMinimize = (): void => {\n      setSelectedLog(-1);\n    };\n\n    _handleSetSelectedLog = (index: number): void => {\n      setSelectedLog(index);\n    };\n  }\n\n  return LogBoxStateSubscription;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAAA,gBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,aAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,UAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,eAAA,GAAAH,OAAA;AACA,IAAAI,KAAA,GAAAC,uBAAA,CAAAL,OAAA;AAA+B,IAAAM,WAAA,GAAAN,OAAA;AAAA,SAAAO,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAH,wBAAAO,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA,4BAAAE,OAAA,EAAAF,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,CAAAJ,OAAA,GAAAF,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA;AAAA,SAAAW,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,OAAAC,gBAAA,CAAArB,OAAA,EAAAgB,OAAA,GAAAM,MAAA,MAAAL,yBAAA,QAAAM,SAAA,OAAAF,gBAAA,CAAArB,OAAA,QAAAwB,WAAA,EAAAF,MAAA,GAAAG,OAAA,CAAAC,SAAA,CAAAN,KAAA,EAAAO,SAAA,EAAAJ,SAAA,YAAAD,MAAA,GAAAF,KAAA,CAAAQ,KAAA,OAAAD,SAAA,gBAAAE,2BAAA,CAAA7B,OAAA,QAAAsB,MAAA;AAAA,SAAAJ,0BAAA,eAAAO,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAI,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAtB,SAAA,CAAAuB,OAAA,CAAArB,IAAA,CAAAa,OAAA,CAAAC,SAAA,CAAAM,OAAA,8CAAAE,CAAA;AAf9B,YAAY;AAwDb,IAAMC,SAAyC,GAAG,IAAIC,GAAG,EAAE;AAC3D,IAAMC,cAAkC,GAAG,IAAID,GAAG,EAAE;AACpD,IAAIE,OAAuB,GAAG,IAAI;AAClC,IAAIC,IAAgB,GAAG,IAAIH,GAAG,EAAE;AAChC,IAAII,aAAgC,GAAG,IAAI;AAC3C,IAAIC,WAAW,GAAG,KAAK;AACvB,IAAIC,cAAc,GAAG,CAAC,CAAC;AAEvB,IAAIC,aAA4B,GAAG,SAAAA,cAAUC,MAAM,EAAE;EACnD,OAAO;IACLC,WAAW,EAAED,MAAM;IACnBE,sBAAsB,EAAE,KAAK;IAC7BC,qBAAqB,EAAE,IAAI;IAC3BC,kBAAkB,EAAE,KAAK;IACzBC,YAAY,EAAE,SAAS;IACvBC,kBAAkB,EAAE,CAAC;IACrBC,iBAAiB,EAAE;EACrB,CAAC;AACH,CAAC;AAED,IAAMC,oBAAoB,GACxB,wEAAwE;AAE1E,SAASC,YAAYA,CAAA,EAAG;EACtB,OAAO;IACLd,IAAI,EAAJA,IAAI;IACJe,UAAU,EAAEb,WAAW;IACvBc,gBAAgB,EAAEb;EACpB,CAAC;AACH;AAEO,SAASc,iBAAiBA,CAC/BC,KAAoB,EACpBC,cAAuB,EACjB;EACN,IAAMC,iBAAiB,GAAGzE,OAAO,gCAAgC;EAEjEuE,KAAK,CAACG,OAAO,GAAI,GAAER,oBAAqB,OAAMK,KAAK,CAACG,OAAQ,EAAC;EAC7D,IAAIF,cAAc,IAAI,IAAI,EAAE;IAC1BD,KAAK,CAACC,cAAc,GAAGA,cAAc;EACvC;EACAC,iBAAiB,CAACE,eAAe,CAACJ,KAAK,EAAgB,IAAI,CAAC;AAC9D;AAEO,SAASK,oBAAoBA,CAACF,OAAe,EAAW;EAC7D,OAAO,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,CAACG,QAAQ,CAACX,oBAAoB,CAAC;AAC9E;AAEO,SAASY,gBAAgBA,CAACJ,OAAe,EAAW;EACzD,KAAK,IAAMK,OAAO,IAAI5B,cAAc,EAAE;IACpC,IACG4B,OAAO,YAAYC,MAAM,IAAID,OAAO,CAACE,IAAI,CAACP,OAAO,CAAC,IAClD,OAAOK,OAAO,KAAK,QAAQ,IAAIL,OAAO,CAACG,QAAQ,CAACE,OAAO,CAAE,EAC1D;MACA,OAAO,IAAI;IACb;EACF;EACA,OAAO,KAAK;AACd;AAEA,SAASG,YAAYA,CAAA,EAAS;EAC5B,IAAI5B,aAAa,IAAI,IAAI,EAAE;IACzBA,aAAa,GAAG6B,YAAY,CAAC,YAAM;MACjC7B,aAAa,GAAG,IAAI;MACpB,IAAM8B,SAAS,GAAGjB,YAAY,EAAE;MAChClB,SAAS,CAACoC,OAAO,CAAC,UAAAC,IAAA;QAAA,IAAEC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;QAAA,OAAMA,QAAQ,CAACH,SAAS,CAAC;MAAA,EAAC;IACxD,CAAC,CAAC;EACJ;AACF;AAEA,SAASI,YAAYA,CAACC,MAAiB,EAAE;EAGvC,IAAIX,gBAAgB,CAACW,MAAM,CAACf,OAAO,CAACgB,OAAO,CAAC,EAAE;IAC5C;EACF;EAKA,IAAMC,OAAO,GAAGC,KAAK,CAACC,IAAI,CAACxC,IAAI,CAAC,CAACyC,GAAG,EAAE;EACtC,IAAIH,OAAO,IAAIA,OAAO,CAACI,QAAQ,KAAKN,MAAM,CAACM,QAAQ,EAAE;IACnDJ,OAAO,CAACK,cAAc,EAAE;IACxBd,YAAY,EAAE;IACd;EACF;EAEA,IAAIO,MAAM,CAACQ,KAAK,KAAK,OAAO,EAAE;IAI5B,IAAMC,oBAAoB,GAAG,IAAI;IAEjC,IAAIC,cAA0B,GAAG,SAAAA,cAAA,EAAM;MACrC9C,IAAI,CAAC+C,GAAG,CAACX,MAAM,CAAC;MAChB,IAAIjC,cAAc,GAAG,CAAC,EAAE;QACtB6C,cAAc,CAAChD,IAAI,CAACiD,IAAI,GAAG,CAAC,CAAC;MAC/B,CAAC,MAAM;QACLpB,YAAY,EAAE;MAChB;MACAiB,cAAa,GAAG,IAAI;IACtB,CAAC;IAED,IAAMI,iBAAiB,GAAGC,UAAU,CAAC,YAAM;MACzC,IAAIL,cAAa,EAAE;QACjBA,cAAa,EAAE;MACjB;IACF,CAAC,EAAED,oBAAoB,CAAC;IAExBT,MAAM,CAACgB,WAAW,CAAC,UAAAC,MAAM,EAAI;MAC3B,IAAIP,cAAa,IAAIO,MAAM,KAAK,SAAS,EAAE;QACzCP,cAAa,EAAE;QACfQ,YAAY,CAACJ,iBAAiB,CAAC;MACjC,CAAC,MAAM,IAAIG,MAAM,KAAK,SAAS,EAAE;QAE/BxB,YAAY,EAAE;MAChB;IACF,CAAC,CAAC;EACJ,CAAC,MAAM,IAAIO,MAAM,CAACQ,KAAK,KAAK,QAAQ,EAAE;IACpC5C,IAAI,CAAC+C,GAAG,CAACX,MAAM,CAAC;IAChBY,cAAc,CAAChD,IAAI,CAACiD,IAAI,GAAG,CAAC,CAAC;EAC/B,CAAC,MAAM;IACLjD,IAAI,CAAC+C,GAAG,CAACX,MAAM,CAAC;IAChBP,YAAY,EAAE;EAChB;AACF;AAEO,SAAS0B,MAAMA,CAACC,GAAY,EAAQ;EACzC,IAAMC,kBAAkB,GAAG,IAAIC,KAAK,EAAE;EAItC5B,YAAY,CAAC,YAAM;IACjB,IAAI;MACF,IAAM6B,KAAK,GAAG,IAAAC,wBAAe,EAACH,kBAAkB,oBAAlBA,kBAAkB,CAAEE,KAAK,CAAC;MAExDxB,YAAY,CACV,IAAI0B,kBAAS,CAAC;QACZjB,KAAK,EAAEY,GAAG,CAACZ,KAAK;QAChBvB,OAAO,EAAEmC,GAAG,CAACnC,OAAO;QACpByC,gBAAgB,EAAE,KAAK;QACvBH,KAAK,EAALA,KAAK;QACLjB,QAAQ,EAAEc,GAAG,CAACd,QAAQ;QACtBvB,cAAc,EAAEqC,GAAG,CAACrC;MACtB,CAAC,CAAC,CACH;IACH,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,iBAAiB,CAACC,KAAK,CAAC;IAC1B;EACF,CAAC,CAAC;AACJ;AAEO,SAAS6C,YAAYA,CAAC7C,KAA4B,EAAQ;EAG/DY,YAAY,CAAC,YAAM;IACjB,IAAI;MACFK,YAAY,CAAC,IAAI0B,kBAAS,CAAC,IAAAG,oCAAoB,EAAC9C,KAAK,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,OAAO+C,YAAY,EAAE;MACrBhD,iBAAiB,CAACgD,YAAY,CAAC;IACjC;EACF,CAAC,CAAC;AACJ;AAEO,SAASC,iBAAiBA,CAACV,GAAc,EAAE;EAChDA,GAAG,CAACJ,WAAW,CAAC,YAAM;IACpBvB,YAAY,EAAE;EAChB,CAAC,CAAC;AACJ;AAEO,SAASsC,sBAAsBA,CAACX,GAAc,EAAE;EACrDA,GAAG,CAACY,gBAAgB,CAAC,YAAM;IACzBvC,YAAY,EAAE;EAChB,CAAC,CAAC;AACJ;AAEO,SAASwC,kBAAkBA,CAACb,GAAc,EAAE;EACjDA,GAAG,CAACJ,WAAW,EAAE;AACnB;AAEO,SAASkB,KAAKA,CAAA,EAAS;EAC5B,IAAItE,IAAI,CAACiD,IAAI,GAAG,CAAC,EAAE;IACjBjD,IAAI,GAAG,IAAIH,GAAG,EAAE;IAChBmD,cAAc,CAAC,CAAC,CAAC,CAAC;EACpB;AACF;AAEO,SAASA,cAAcA,CAACuB,gBAAwB,EAAQ;EAC7D,IAAMC,QAAQ,GAAGrE,cAAc;EAC/B,IAAIsE,QAAQ,GAAGF,gBAAgB;EAE/B,IAAMG,QAAQ,GAAGnC,KAAK,CAACC,IAAI,CAACxC,IAAI,CAAC;EACjC,IAAI2E,KAAK,GAAGD,QAAQ,CAACE,MAAM,GAAG,CAAC;EAC/B,OAAOD,KAAK,IAAI,CAAC,EAAE;IAEjB,IAAID,QAAQ,CAACC,KAAK,CAAC,CAAC/B,KAAK,KAAK,QAAQ,EAAE;MACtC6B,QAAQ,GAAGE,KAAK;MAChB;IACF;IACAA,KAAK,IAAI,CAAC;EACZ;EACAxE,cAAc,GAAGsE,QAAQ;EACzB5C,YAAY,EAAE;EACd,IAAIgD,qBAAY,EAAE;IAChB1B,UAAU,CAAC,YAAM;MACf,IAAIqB,QAAQ,GAAG,CAAC,IAAIC,QAAQ,IAAI,CAAC,EAAE;QACjCI,qBAAY,CAACC,IAAI,EAAE;MACrB,CAAC,MAAM,IAAIN,QAAQ,IAAI,CAAC,IAAIC,QAAQ,GAAG,CAAC,EAAE;QACxCI,qBAAY,CAACE,IAAI,EAAE;MACrB;IACF,CAAC,EAAE,CAAC,CAAC;EACP;AACF;AAEO,SAASC,aAAaA,CAAA,EAAS;EACpC,IAAMC,OAAO,GAAG1C,KAAK,CAACC,IAAI,CAACxC,IAAI,CAAC,CAACkF,MAAM,CAAC,UAAA1B,GAAG;IAAA,OAAIA,GAAG,CAACZ,KAAK,KAAK,MAAM;EAAA,EAAC;EACpE,IAAIqC,OAAO,CAACL,MAAM,KAAK5E,IAAI,CAACiD,IAAI,EAAE;IAChCjD,IAAI,GAAG,IAAIH,GAAG,CAACoF,OAAO,CAAC;IACvBjC,cAAc,CAAC,CAAC,CAAC,CAAC;IAClBnB,YAAY,EAAE;EAChB;AACF;AAEO,SAASsD,WAAWA,CAAA,EAAS;EAClC,IAAMF,OAAO,GAAG1C,KAAK,CAACC,IAAI,CAACxC,IAAI,CAAC,CAACkF,MAAM,CACrC,UAAA1B,GAAG;IAAA,OAAIA,GAAG,CAACZ,KAAK,KAAK,OAAO,IAAIY,GAAG,CAACZ,KAAK,KAAK,OAAO;EAAA,EACtD;EACD,IAAIqC,OAAO,CAACL,MAAM,KAAK5E,IAAI,CAACiD,IAAI,EAAE;IAChCjD,IAAI,GAAG,IAAIH,GAAG,CAACoF,OAAO,CAAC;IACvBjC,cAAc,CAAC,CAAC,CAAC,CAAC;EACpB;AACF;AAEO,SAASoC,OAAOA,CAAC5B,GAAc,EAAQ;EAC5C,IAAIxD,IAAI,CAACrC,GAAG,CAAC6F,GAAG,CAAC,EAAE;IACjBxD,IAAI,CAACqF,MAAM,CAAC7B,GAAG,CAAC;IAChB3B,YAAY,EAAE;EAChB;AACF;AAEO,SAASyD,gBAAgBA,CAACJ,MAAqB,EAAQ;EAC5D9E,aAAa,GAAG8E,MAAM;AACxB;AAEO,SAASK,UAAUA,CAACC,IAAmB,EAAQ;EACpDzF,OAAO,GAAGyF,IAAI;AAChB;AAEO,SAASC,UAAUA,CAAA,EAAa;EACrC,OAAO1F,OAAO,IAAI,IAAI,GAAGA,OAAO,EAAE,GAAG,IAAI;AAC3C;AAEO,SAAS2F,kBAAkBA,CAACrF,MAAc,EAAe;EAC9D,OAAOD,aAAa,CAACC,MAAM,CAAC;AAC9B;AAEO,SAASsF,iBAAiBA,CAAA,EAAkC;EACjE,OAAOpD,KAAK,CAACC,IAAI,CAAC1C,cAAc,CAAC;AACnC;AAEO,SAAS8F,iBAAiBA,CAC/BC,QAAuC,EACjC;EACN,IAAMC,YAAY,GAAGhG,cAAc,CAACmD,IAAI;EAGxC4C,QAAQ,CAAC7D,OAAO,CAAC,UAACN,OAAsB,EAAK;IAC3C,IAAIA,OAAO,YAAYC,MAAM,EAAE;MAC7B,KAAK,IAAMoE,eAAe,IAAIjG,cAAc,EAAE;QAC5C,IACEiG,eAAe,YAAYpE,MAAM,IACjCoE,eAAe,CAACC,QAAQ,EAAE,KAAKtE,OAAO,CAACsE,QAAQ,EAAE,EACjD;UACA;QACF;MACF;MACAlG,cAAc,CAACiD,GAAG,CAACrB,OAAO,CAAC;IAC7B;IACA5B,cAAc,CAACiD,GAAG,CAACrB,OAAO,CAAC;EAC7B,CAAC,CAAC;EACF,IAAI5B,cAAc,CAACmD,IAAI,KAAK6C,YAAY,EAAE;IACxC;EACF;EAKA9F,IAAI,GAAG,IAAIH,GAAG,CACZ0C,KAAK,CAACC,IAAI,CAACxC,IAAI,CAAC,CAACkF,MAAM,CAAC,UAAA1B,GAAG;IAAA,OAAI,CAAC/B,gBAAgB,CAAC+B,GAAG,CAACnC,OAAO,CAACgB,OAAO,CAAC;EAAA,EAAC,CACvE;EACDR,YAAY,EAAE;AAChB;AAEO,SAASoE,WAAWA,CAACC,KAAc,EAAQ;EAChD,IAAIA,KAAK,KAAKhG,WAAW,EAAE;IACzB;EACF;EACAA,WAAW,GAAGgG,KAAK;EACnBrE,YAAY,EAAE;AAChB;AAEO,SAASd,UAAUA,CAAA,EAAY;EACpC,OAAOb,WAAW;AACpB;AAEO,SAASiG,OAAOA,CAACjE,QAAkB,EAAgB;EACxD,IAAMkE,YAAY,GAAG;IAAClE,QAAQ,EAARA;EAAQ,CAAC;EAC/BtC,SAAS,CAACmD,GAAG,CAACqD,YAAY,CAAC;EAE3BlE,QAAQ,CAACpB,YAAY,EAAE,CAAC;EAExB,OAAO;IACLuF,WAAW,WAAAA,YAAA,EAAS;MAClBzG,SAAS,CAACyF,MAAM,CAACe,YAAY,CAAC;IAChC;EACF,CAAC;AACH;AAkBO,SAASE,gBAAgBA,CAC9BC,gBAAqC,EACN;EAAA,IACzBC,uBAAuB,aAAAC,gBAAA;IAAA,IAAAC,UAAA,CAAAjJ,OAAA,EAAA+I,uBAAA,EAAAC,gBAAA;IAAA,IAAAE,MAAA,GAAAnI,YAAA,CAAAgI,uBAAA;IAAA,SAAAA,wBAAA;MAAA,IAAAI,KAAA;MAAA,IAAAC,gBAAA,CAAApJ,OAAA,QAAA+I,uBAAA;MAAA,SAAAM,IAAA,GAAA1H,SAAA,CAAAwF,MAAA,EAAAmC,IAAA,OAAAxE,KAAA,CAAAuE,IAAA,GAAAE,IAAA,MAAAA,IAAA,GAAAF,IAAA,EAAAE,IAAA;QAAAD,IAAA,CAAAC,IAAA,IAAA5H,SAAA,CAAA4H,IAAA;MAAA;MAAAJ,KAAA,GAAAD,MAAA,CAAAtI,IAAA,CAAAgB,KAAA,CAAAsH,MAAA,SAAAM,MAAA,CAAAF,IAAA;MAAAH,KAAA,CAa3BM,KAAK,GAAU;QACblH,IAAI,EAAE,IAAIH,GAAG,EAAE;QACfkB,UAAU,EAAE,KAAK;QACjBoG,QAAQ,EAAE,KAAK;QACfnG,gBAAgB,EAAE,CAAC;MACrB,CAAC;MAAA4F,KAAA,CA8BDQ,cAAc,GAAG,YAAY;QAI3B,IAAAC,WAAA,GAA4CT,KAAA,CAAKM,KAAK;UAA/ClG,gBAAgB,GAAAqG,WAAA,CAAhBrG,gBAAgB;UAAQsG,SAAS,GAAAD,WAAA,CAAfrH,IAAI;QAC7B,IAAMuH,SAAS,GAAGhF,KAAK,CAACC,IAAI,CAAC8E,SAAS,CAAC;QACvC,IAAItG,gBAAgB,IAAI,IAAI,EAAE;UAC5B,IAAIuG,SAAS,CAAC3C,MAAM,GAAG,CAAC,IAAI,CAAC,EAAE;YAC7B5B,cAAc,CAAC,CAAC,CAAC,CAAC;UACpB,CAAC,MAAM,IAAIhC,gBAAgB,IAAIuG,SAAS,CAAC3C,MAAM,GAAG,CAAC,EAAE;YACnD5B,cAAc,CAAChC,gBAAgB,GAAG,CAAC,CAAC;UACtC;UAEAoE,OAAO,CAACmC,SAAS,CAACvG,gBAAgB,CAAC,CAAC;QACtC;MACF,CAAC;MAAA4F,KAAA,CAEDY,eAAe,GAAG,YAAY;QAC5BxE,cAAc,CAAC,CAAC,CAAC,CAAC;MACpB,CAAC;MAAA4D,KAAA,CAEDa,qBAAqB,GAAG,UAAC9C,KAAa,EAAW;QAC/C3B,cAAc,CAAC2B,KAAK,CAAC;MACvB,CAAC;MAAA,OAAAiC,KAAA;IAAA;IAAA,IAAAc,aAAA,CAAAjK,OAAA,EAAA+I,uBAAA;MAAAtI,GAAA;MAAAgI,KAAA,EAlED,SAAAyB,kBAAkBC,GAAU,EAAEC,SAAwC,EAAE;QAGtE5G,iBAAiB,CAAC2G,GAAG,EAAEC,SAAS,CAAC1G,cAAc,CAAC;MAClD;IAAC;MAAAjD,GAAA;MAAAgI,KAAA,EAWD,SAAA4B,OAAA,EAAqB;QACnB,IAAI,IAAI,CAACZ,KAAK,CAACC,QAAQ,EAAE;UAGvB,OAAO,IAAI;QACb;QAEA,OACE,IAAAlK,WAAA,CAAA8K,GAAA,EAACxB,gBAAgB;UACfvG,IAAI,EAAEuC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC0E,KAAK,CAAClH,IAAI,CAAE;UAClCe,UAAU,EAAE,IAAI,CAACmG,KAAK,CAACnG,UAAW;UAClCC,gBAAgB,EAAE,IAAI,CAACkG,KAAK,CAAClG;QAAiB,EAC9C;MAEN;IAAC;MAAA9C,GAAA;MAAAgI,KAAA,EAED,SAAA8B,kBAAA,EAA0B;QAAA,IAAAC,MAAA;QACxB,IAAI,CAACC,aAAa,GAAG/B,OAAO,CAAC,UAAAgC,IAAI,EAAI;UACnCF,MAAI,CAACG,QAAQ,CAACD,IAAI,CAAC;QACrB,CAAC,CAAC;MACJ;IAAC;MAAAjK,GAAA;MAAAgI,KAAA,EAED,SAAAmC,qBAAA,EAA6B;QAC3B,IAAI,IAAI,CAACH,aAAa,IAAI,IAAI,EAAE;UAC9B,IAAI,CAACA,aAAa,CAAC7B,WAAW,EAAE;QAClC;MACF;IAAC;MAAAnI,GAAA;MAAAgI,KAAA,EA7CD,SAAAoC,yBAAA,EAAuD;QACrD,OAAO;UAACnB,QAAQ,EAAE;QAAI,CAAC;MACzB;IAAC;IAAA,OAAAX,uBAAA;EAAA,EAHmCzJ,KAAK,CAACwL,SAAS;EA0ErD,OAAO/B,uBAAuB;AAChC"}