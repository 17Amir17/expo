{"version":3,"names":[],"sources":["TextProps.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  Role,\n} from '../Components/View/ViewAccessibility';\nimport type {TextStyleProp} from '../StyleSheet/StyleSheet';\nimport type {\n  LayoutEvent,\n  PointerEvent,\n  PressEvent,\n  TextLayoutEvent,\n} from '../Types/CoreEventTypes';\nimport type {Node} from 'react';\n\nexport type PressRetentionOffset = $ReadOnly<{|\n  top: number,\n  left: number,\n  bottom: number,\n  right: number,\n|}>;\n\ntype PointerEventProps = $ReadOnly<{|\n  onPointerEnter?: (event: PointerEvent) => void,\n  onPointerLeave?: (event: PointerEvent) => void,\n  onPointerMove?: (event: PointerEvent) => void,\n|}>;\n\n/**\n * @see https://reactnative.dev/docs/text#reference\n */\nexport type TextProps = $ReadOnly<{|\n  ...PointerEventProps,\n\n  /**\n   * Indicates whether the view is an accessibility element.\n   *\n   * See https://reactnative.dev/docs/text#accessible\n   */\n  accessible?: ?boolean,\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n  accessibilityHint?: ?Stringish,\n  accessibilityLanguage?: ?Stringish,\n  accessibilityLabel?: ?Stringish,\n  accessibilityRole?: ?AccessibilityRole,\n  accessibilityState?: ?AccessibilityState,\n  'aria-label'?: ?string,\n\n  /**\n   * Whether font should be scaled down automatically.\n   *\n   * See https://reactnative.dev/docs/text#adjustsfontsizetofit\n   */\n  adjustsFontSizeToFit?: ?boolean,\n\n  /**\n   * Whether fonts should scale to respect Text Size accessibility settings.\n   *\n   * See https://reactnative.dev/docs/text#allowfontscaling\n   */\n  allowFontScaling?: ?boolean,\n\n  /**\n   * Set hyphenation strategy on Android.\n   *\n   */\n  android_hyphenationFrequency?: ?('normal' | 'none' | 'full'),\n\n  /**\n   * alias for accessibilityState\n   *\n   * see https://reactnative.dev/docs/accessibility#accessibilitystate\n   */\n  'aria-busy'?: ?boolean,\n  'aria-checked'?: ?boolean | 'mixed',\n  'aria-disabled'?: ?boolean,\n  'aria-expanded'?: ?boolean,\n  'aria-selected'?: ?boolean,\n\n  /**\n   * Represents the nativeID of the associated label text. When the assistive technology focuses on the component with this props, the text is read aloud.\n   * This prop is listed for cross-platform reasons and has no real effect on Android or iOS.\n   */\n  'aria-labelledby'?: ?string,\n\n  children?: ?Node,\n\n  /**\n   * When `numberOfLines` is set, this prop defines how text will be\n   * truncated.\n   *\n   * See https://reactnative.dev/docs/text#ellipsizemode\n   */\n  ellipsizeMode?: ?('clip' | 'head' | 'middle' | 'tail'),\n\n  /**\n   * Used to locate this view from native code.\n   *\n   * See https://reactnative.dev/docs/text#nativeid\n   */\n  id?: string,\n\n  /**\n   * Specifies largest possible scale a font can reach when `allowFontScaling` is enabled.\n   * Possible values:\n   * `null/undefined` (default): inherit from the parent node or the global default (0)\n   * `0`: no max, ignore parent/global default\n   * `>= 1`: sets the maxFontSizeMultiplier of this node to this value\n   */\n  maxFontSizeMultiplier?: ?number,\n\n  /**\n   * Used to locate this view from native code.\n   *\n   * See https://reactnative.dev/docs/text#nativeid\n   */\n  nativeID?: ?string,\n\n  /**\n   * Used to truncate the text with an ellipsis.\n   *\n   * See https://reactnative.dev/docs/text#numberoflines\n   */\n  numberOfLines?: ?number,\n\n  /**\n   * Invoked on mount and layout changes.\n   *\n   * See https://reactnative.dev/docs/text#onlayout\n   */\n  onLayout?: ?(event: LayoutEvent) => mixed,\n\n  /**\n   * This function is called on long press.\n   *\n   * See https://reactnative.dev/docs/text#onlongpress\n   */\n  onLongPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * This function is called on press.\n   *\n   * See https://reactnative.dev/docs/text#onpress\n   */\n  onPress?: ?(event: PressEvent) => mixed,\n  onPressIn?: ?(event: PressEvent) => mixed,\n  onPressOut?: ?(event: PressEvent) => mixed,\n  onResponderGrant?: ?(event: PressEvent) => void,\n  onResponderMove?: ?(event: PressEvent) => void,\n  onResponderRelease?: ?(event: PressEvent) => void,\n  onResponderTerminate?: ?(event: PressEvent) => void,\n  onResponderTerminationRequest?: ?() => boolean,\n  onStartShouldSetResponder?: ?() => boolean,\n  onMoveShouldSetResponder?: ?() => boolean,\n  onTextLayout?: ?(event: TextLayoutEvent) => mixed,\n\n  /**\n   * Defines how far your touch may move off of the button, before\n   * deactivating the button.\n   *\n   * See https://reactnative.dev/docs/text#pressretentionoffset\n   */\n  pressRetentionOffset?: ?PressRetentionOffset,\n\n  /**\n   * Indicates to accessibility services to treat UI component like a specific role.\n   */\n  role?: ?Role,\n\n  /**\n   * Lets the user select text.\n   *\n   * See https://reactnative.dev/docs/text#selectable\n   */\n  selectable?: ?boolean,\n  style?: ?TextStyleProp,\n\n  /**\n   * Used to locate this view in end-to-end tests.\n   *\n   * See https://reactnative.dev/docs/text#testid\n   */\n  testID?: ?string,\n\n  /**\n   * Android Only\n   */\n\n  /**\n   * Specifies the disabled state of the text view for testing purposes.\n   *\n   * See https://reactnative.dev/docs/text#disabled\n   */\n  disabled?: ?boolean,\n\n  /**\n   * The highlight color of the text.\n   *\n   * See https://reactnative.dev/docs/text#selectioncolor\n   */\n  selectionColor?: ?string,\n\n  dataDetectorType?: ?('phoneNumber' | 'link' | 'email' | 'none' | 'all'),\n\n  /**\n   * Set text break strategy on Android.\n   *\n   * See https://reactnative.dev/docs/text#textbreakstrategy\n   */\n  textBreakStrategy?: ?('balanced' | 'highQuality' | 'simple'),\n\n  /**\n   * iOS Only\n   */\n  adjustsFontSizeToFit?: ?boolean,\n\n  /**\n   * The Dynamic Type scale ramp to apply to this element on iOS.\n   */\n  dynamicTypeRamp?: ?(\n    | 'caption2'\n    | 'caption1'\n    | 'footnote'\n    | 'subheadline'\n    | 'callout'\n    | 'body'\n    | 'headline'\n    | 'title3'\n    | 'title2'\n    | 'title1'\n    | 'largeTitle'\n  ),\n\n  /**\n   * Smallest possible scale a font can reach.\n   *\n   * See https://reactnative.dev/docs/text#minimumfontscale\n   */\n  minimumFontScale?: ?number,\n\n  /**\n   * When `true`, no visual change is made when text is pressed down.\n   *\n   * See https://reactnative.dev/docs/text#supperhighlighting\n   */\n  suppressHighlighting?: ?boolean,\n\n  /**\n   * Set line break strategy on iOS.\n   *\n   * See https://reactnative.dev/docs/text.html#linebreakstrategyios\n   */\n  lineBreakStrategyIOS?: ?('none' | 'standard' | 'hangul-word' | 'push-out'),\n|}>;\n"],"mappings":"AAUA,YAAY"}