{"version":3,"names":["_NativePerformanceObserver","_interopRequireDefault","require","_PerformanceObserver","cachedEventCounts","getCachedEventCounts","_cachedEventCounts","NativePerformanceObserver","warnNoNativePerformanceObserver","Map","getEventCounts","global","queueMicrotask","EventCounts","_classCallCheck2","default","_createClass2","key","get","size","value","entries","forEach","callback","has","keys","values","exports"],"sources":["EventCounts.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport NativePerformanceObserver from './NativePerformanceObserver';\nimport {warnNoNativePerformanceObserver} from './PerformanceObserver';\n\ntype EventCountsForEachCallbackType =\n  | (() => void)\n  | ((value: number) => void)\n  | ((value: number, key: string) => void)\n  | ((value: number, key: string, map: Map<string, number>) => void);\n\nlet cachedEventCounts: ?Map<string, number>;\n\nfunction getCachedEventCounts(): Map<string, number> {\n  if (cachedEventCounts) {\n    return cachedEventCounts;\n  }\n  if (!NativePerformanceObserver) {\n    warnNoNativePerformanceObserver();\n    return new Map();\n  }\n\n  cachedEventCounts = new Map<string, number>(\n    NativePerformanceObserver.getEventCounts(),\n  );\n  // $FlowFixMe[incompatible-call]\n  global.queueMicrotask(() => {\n    // To be consistent with the calls to the API from the same task,\n    // but also not to refetch the data from native too often,\n    // schedule to invalidate the cache later,\n    // after the current task is guaranteed to have finished.\n    cachedEventCounts = null;\n  });\n  return cachedEventCounts ?? new Map();\n}\n/**\n * Implementation of the EventCounts Web Performance API\n * corresponding to the standard in\n * https://www.w3.org/TR/event-timing/#eventcounts\n */\nexport default class EventCounts {\n  // flowlint unsafe-getters-setters:off\n  get size(): number {\n    return getCachedEventCounts().size;\n  }\n\n  entries(): Iterator<[string, number]> {\n    return getCachedEventCounts().entries();\n  }\n\n  forEach(callback: EventCountsForEachCallbackType): void {\n    return getCachedEventCounts().forEach(callback);\n  }\n\n  get(key: string): ?number {\n    return getCachedEventCounts().get(key);\n  }\n\n  has(key: string): boolean {\n    return getCachedEventCounts().has(key);\n  }\n\n  keys(): Iterator<string> {\n    return getCachedEventCounts().keys();\n  }\n\n  values(): Iterator<number> {\n    return getCachedEventCounts().values();\n  }\n}\n"],"mappings":";;;;;;;AAUA,IAAAA,0BAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,oBAAA,GAAAD,OAAA;AAQA,IAAIE,iBAAuC;AAE3C,SAASC,oBAAoBA,CAAA,EAAwB;EAAA,IAAAC,kBAAA;EACnD,IAAIF,iBAAiB,EAAE;IACrB,OAAOA,iBAAiB;EAC1B;EACA,IAAI,CAACG,kCAAyB,EAAE;IAC9B,IAAAC,oDAA+B,GAAE;IACjC,OAAO,IAAIC,GAAG,EAAE;EAClB;EAEAL,iBAAiB,GAAG,IAAIK,GAAG,CACzBF,kCAAyB,CAACG,cAAc,EAAE,CAC3C;EAEDC,MAAM,CAACC,cAAc,CAAC,YAAM;IAK1BR,iBAAiB,GAAG,IAAI;EAC1B,CAAC,CAAC;EACF,QAAAE,kBAAA,GAAOF,iBAAiB,YAAAE,kBAAA,GAAI,IAAIG,GAAG,EAAE;AACvC;AAAC,IAMoBI,WAAW;EAAA,SAAAA,YAAA;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAF,WAAA;EAAA;EAAA,IAAAG,aAAA,CAAAD,OAAA,EAAAF,WAAA;IAAAI,GAAA;IAAAC,GAAA,EAE9B,SAAAA,IAAA,EAAmB;MACjB,OAAOb,oBAAoB,EAAE,CAACc,IAAI;IACpC;EAAC;IAAAF,GAAA;IAAAG,KAAA,EAED,SAAAC,QAAA,EAAsC;MACpC,OAAOhB,oBAAoB,EAAE,CAACgB,OAAO,EAAE;IACzC;EAAC;IAAAJ,GAAA;IAAAG,KAAA,EAED,SAAAE,QAAQC,QAAwC,EAAQ;MACtD,OAAOlB,oBAAoB,EAAE,CAACiB,OAAO,CAACC,QAAQ,CAAC;IACjD;EAAC;IAAAN,GAAA;IAAAG,KAAA,EAED,SAAAF,IAAID,GAAW,EAAW;MACxB,OAAOZ,oBAAoB,EAAE,CAACa,GAAG,CAACD,GAAG,CAAC;IACxC;EAAC;IAAAA,GAAA;IAAAG,KAAA,EAED,SAAAI,IAAIP,GAAW,EAAW;MACxB,OAAOZ,oBAAoB,EAAE,CAACmB,GAAG,CAACP,GAAG,CAAC;IACxC;EAAC;IAAAA,GAAA;IAAAG,KAAA,EAED,SAAAK,KAAA,EAAyB;MACvB,OAAOpB,oBAAoB,EAAE,CAACoB,IAAI,EAAE;IACtC;EAAC;IAAAR,GAAA;IAAAG,KAAA,EAED,SAAAM,OAAA,EAA2B;MACzB,OAAOrB,oBAAoB,EAAE,CAACqB,MAAM,EAAE;IACxC;EAAC;EAAA,OAAAb,WAAA;AAAA;AAAAc,OAAA,CAAAZ,OAAA,GAAAF,WAAA"}