{"version":3,"names":["flags","isEnabled","shouldEnableAll","__DEV__","global","RN$DiagnosticFlags","split","forEach","flag","push","Error","length","includes","ReactNativeRuntimeDiagnostics","simulateEarlyJavaScriptErrors","module","exports"],"sources":["ReactNativeRuntimeDiagnostics.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\n/**\n * Perform a set of runtime diagnostics, usually useful for test purpose.\n * This is only meaningful for __DEV__ mode.\n */\nexport type RuntimeDiagnostics = {|\n  /**\n   * Check if the runtime diagnostics is enabled at all.\n   */\n  isEnabled: () => boolean,\n\n  /**\n   * If enabled, simulate early JavaScript errors during initialization.\n   */\n  simulateEarlyJavaScriptErrors: () => void,\n|};\n\nexport type RuntimeDiagnosticFlag = 'early_js_errors' | 'all';\n\nconst flags: Array<RuntimeDiagnosticFlag> = [];\nlet isEnabled = false;\nlet shouldEnableAll = false;\n\nif (__DEV__) {\n  if (typeof global.RN$DiagnosticFlags === 'string') {\n    global.RN$DiagnosticFlags.split(',').forEach(flag => {\n      switch (flag) {\n        case 'early_js_errors':\n        case 'all':\n          flags.push(flag);\n          break;\n        default:\n          throw Error(\n            `RuntimeDiagnosticsFlags: unknown flag was supplied: '${flag}'`,\n          );\n      }\n    });\n    isEnabled = flags.length > 0;\n    shouldEnableAll = flags.includes('all');\n  }\n}\n\nconst ReactNativeRuntimeDiagnostics: RuntimeDiagnostics = {\n  isEnabled: () => isEnabled,\n  simulateEarlyJavaScriptErrors: () => {\n    if (__DEV__) {\n      if (!isEnabled) {\n        return;\n      }\n      if (shouldEnableAll || flags.includes('early_js_errors')) {\n        throw Error('[Runtime Diagnostics] Throwing a JavaScript error.');\n      }\n    }\n  },\n};\n\nmodule.exports = ReactNativeRuntimeDiagnostics;\n"],"mappings":"AAUA,YAAY;AAoBZ,IAAMA,KAAmC,GAAG,EAAE;AAC9C,IAAIC,UAAS,GAAG,KAAK;AACrB,IAAIC,eAAe,GAAG,KAAK;AAE3B,IAAIC,OAAO,EAAE;EACX,IAAI,OAAOC,MAAM,CAACC,kBAAkB,KAAK,QAAQ,EAAE;IACjDD,MAAM,CAACC,kBAAkB,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,UAAAC,IAAI,EAAI;MACnD,QAAQA,IAAI;QACV,KAAK,iBAAiB;QACtB,KAAK,KAAK;UACRR,KAAK,CAACS,IAAI,CAACD,IAAI,CAAC;UAChB;QACF;UACE,MAAME,KAAK,CACR,wDAAuDF,IAAK,GAAE,CAChE;MAAC;IAER,CAAC,CAAC;IACFP,UAAS,GAAGD,KAAK,CAACW,MAAM,GAAG,CAAC;IAC5BT,eAAe,GAAGF,KAAK,CAACY,QAAQ,CAAC,KAAK,CAAC;EACzC;AACF;AAEA,IAAMC,6BAAiD,GAAG;EACxDZ,SAAS,EAAE,SAAAA,UAAA;IAAA,OAAMA,UAAS;EAAA;EAC1Ba,6BAA6B,EAAE,SAAAA,8BAAA,EAAM;IACnC,IAAIX,OAAO,EAAE;MACX,IAAI,CAACF,UAAS,EAAE;QACd;MACF;MACA,IAAIC,eAAe,IAAIF,KAAK,CAACY,QAAQ,CAAC,iBAAiB,CAAC,EAAE;QACxD,MAAMF,KAAK,CAAC,oDAAoD,CAAC;MACnE;IACF;EACF;AACF,CAAC;AAEDK,MAAM,CAACC,OAAO,GAAGH,6BAA6B"}