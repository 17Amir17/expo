{"version":3,"names":["_RCTDeviceEventEmitter","_interopRequireDefault","require","_RendererProxy","_Platform","_legacySendAccessibilityEvent","_NativeAccessibilityInfo","_NativeAccessibilityManager","EventNames","Platform","OS","Map","AccessibilityInfo","isBoldTextEnabled","Promise","resolve","reject","NativeAccessibilityManagerIOS","getCurrentBoldTextState","isGrayscaleEnabled","getCurrentGrayscaleState","isInvertColorsEnabled","getCurrentInvertColorsState","isReduceMotionEnabled","NativeAccessibilityInfoAndroid","getCurrentReduceMotionState","prefersCrossFadeTransitions","getCurrentPrefersCrossFadeTransitionsState","isReduceTransparencyEnabled","getCurrentReduceTransparencyState","isScreenReaderEnabled","isTouchExplorationEnabled","getCurrentVoiceOverState","isAccessibilityServiceEnabled","addEventListener","eventName","handler","deviceEventName","get","remove","RCTDeviceEventEmitter","addListener","setAccessibilityFocus","reactTag","legacySendAccessibilityEvent","sendAccessibilityEvent","handle","eventType","announceForAccessibility","announcement","announceForAccessibilityWithOptions","options","getRecommendedTimeoutMillis","originalTimeout","_default","exports","default"],"sources":["AccessibilityInfo.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\nimport type {EventSubscription} from '../../vendor/emitter/EventEmitter';\nimport type {ElementRef} from 'react';\n\nimport RCTDeviceEventEmitter from '../../EventEmitter/RCTDeviceEventEmitter';\nimport {sendAccessibilityEvent} from '../../ReactNative/RendererProxy';\nimport Platform from '../../Utilities/Platform';\nimport legacySendAccessibilityEvent from './legacySendAccessibilityEvent';\nimport NativeAccessibilityInfoAndroid from './NativeAccessibilityInfo';\nimport NativeAccessibilityManagerIOS from './NativeAccessibilityManager';\n\n// Events that are only supported on Android.\ntype AccessibilityEventDefinitionsAndroid = {\n  accessibilityServiceChanged: [boolean],\n};\n\n// Events that are only supported on iOS.\ntype AccessibilityEventDefinitionsIOS = {\n  announcementFinished: [{announcement: string, success: boolean}],\n  boldTextChanged: [boolean],\n  grayscaleChanged: [boolean],\n  invertColorsChanged: [boolean],\n  reduceTransparencyChanged: [boolean],\n};\n\ntype AccessibilityEventDefinitions = {\n  ...AccessibilityEventDefinitionsAndroid,\n  ...AccessibilityEventDefinitionsIOS,\n  change: [boolean], // screenReaderChanged\n  reduceMotionChanged: [boolean],\n  screenReaderChanged: [boolean],\n};\n\ntype AccessibilityEventTypes = 'click' | 'focus' | 'viewHoverEnter';\n\n// Mapping of public event names to platform-specific event names.\nconst EventNames: Map<\n  $Keys<AccessibilityEventDefinitions>,\n  string,\n> = Platform.OS === 'android'\n  ? new Map([\n      ['change', 'touchExplorationDidChange'],\n      ['reduceMotionChanged', 'reduceMotionDidChange'],\n      ['screenReaderChanged', 'touchExplorationDidChange'],\n      ['accessibilityServiceChanged', 'accessibilityServiceDidChange'],\n    ])\n  : new Map([\n      ['announcementFinished', 'announcementFinished'],\n      ['boldTextChanged', 'boldTextChanged'],\n      ['change', 'screenReaderChanged'],\n      ['grayscaleChanged', 'grayscaleChanged'],\n      ['invertColorsChanged', 'invertColorsChanged'],\n      ['reduceMotionChanged', 'reduceMotionChanged'],\n      ['reduceTransparencyChanged', 'reduceTransparencyChanged'],\n      ['screenReaderChanged', 'screenReaderChanged'],\n    ]);\n\n/**\n * Sometimes it's useful to know whether or not the device has a screen reader\n * that is currently active. The `AccessibilityInfo` API is designed for this\n * purpose. You can use it to query the current state of the screen reader as\n * well as to register to be notified when the state of the screen reader\n * changes.\n *\n * See https://reactnative.dev/docs/accessibilityinfo\n */\nconst AccessibilityInfo = {\n  /**\n   * Query whether bold text is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when bold text is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#isBoldTextEnabled\n   */\n  isBoldTextEnabled(): Promise<boolean> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentBoldTextState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n\n  /**\n   * Query whether grayscale is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when grayscale is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#isGrayscaleEnabled\n   */\n  isGrayscaleEnabled(): Promise<boolean> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentGrayscaleState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n\n  /**\n   * Query whether inverted colors are currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when invert color is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#isInvertColorsEnabled\n   */\n  isInvertColorsEnabled(): Promise<boolean> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentInvertColorsState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n\n  /**\n   * Query whether reduced motion is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a reduce motion is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#isReduceMotionEnabled\n   */\n  isReduceMotionEnabled(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (Platform.OS === 'android') {\n        if (NativeAccessibilityInfoAndroid != null) {\n          NativeAccessibilityInfoAndroid.isReduceMotionEnabled(resolve);\n        } else {\n          reject(null);\n        }\n      } else {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentReduceMotionState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      }\n    });\n  },\n\n  /**\n   * Query whether reduce motion and prefer cross-fade transitions settings are currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when  prefer cross-fade transitions is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#prefersCrossFadeTransitions\n   */\n  prefersCrossFadeTransitions(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (Platform.OS === 'android') {\n        return Promise.resolve(false);\n      } else {\n        if (\n          NativeAccessibilityManagerIOS?.getCurrentPrefersCrossFadeTransitionsState !=\n          null\n        ) {\n          NativeAccessibilityManagerIOS.getCurrentPrefersCrossFadeTransitionsState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      }\n    });\n  },\n\n  /**\n   * Query whether reduced transparency is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a reduce transparency is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#isReduceTransparencyEnabled\n   */\n  isReduceTransparencyEnabled(): Promise<boolean> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentReduceTransparencyState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#isScreenReaderEnabled\n   */\n  isScreenReaderEnabled(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (Platform.OS === 'android') {\n        if (NativeAccessibilityInfoAndroid != null) {\n          NativeAccessibilityInfoAndroid.isTouchExplorationEnabled(resolve);\n        } else {\n          reject(null);\n        }\n      } else {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentVoiceOverState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      }\n    });\n  },\n\n  /**\n   * Query whether Accessibility Service is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when any service is enabled and `false` otherwise.\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo/#isaccessibilityserviceenabled-android\n   */\n  isAccessibilityServiceEnabled(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (Platform.OS === 'android') {\n        if (\n          NativeAccessibilityInfoAndroid != null &&\n          NativeAccessibilityInfoAndroid.isAccessibilityServiceEnabled != null\n        ) {\n          NativeAccessibilityInfoAndroid.isAccessibilityServiceEnabled(resolve);\n        } else {\n          reject(null);\n        }\n      } else {\n        reject(null);\n      }\n    });\n  },\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `reduceMotionChanged`: Fires when the state of the reduce motion toggle changes.\n   *   The argument to the event handler is a boolean. The boolean is `true` when a reduce\n   *   motion is enabled (or when \"Transition Animation Scale\" in \"Developer options\" is\n   *   \"Animation off\") and `false` otherwise.\n   * - `screenReaderChanged`: Fires when the state of the screen reader changes. The argument\n   *   to the event handler is a boolean. The boolean is `true` when a screen\n   *   reader is enabled and `false` otherwise.\n   *\n   * These events are only supported on iOS:\n   *\n   * - `boldTextChanged`: iOS-only event. Fires when the state of the bold text toggle changes.\n   *   The argument to the event handler is a boolean. The boolean is `true` when a bold text\n   *   is enabled and `false` otherwise.\n   * - `grayscaleChanged`: iOS-only event. Fires when the state of the gray scale toggle changes.\n   *   The argument to the event handler is a boolean. The boolean is `true` when a gray scale\n   *   is enabled and `false` otherwise.\n   * - `invertColorsChanged`: iOS-only event. Fires when the state of the invert colors toggle\n   *   changes. The argument to the event handler is a boolean. The boolean is `true` when a invert\n   *   colors is enabled and `false` otherwise.\n   * - `reduceTransparencyChanged`: iOS-only event. Fires when the state of the reduce transparency\n   *   toggle changes.  The argument to the event handler is a boolean. The boolean is `true`\n   *   when a reduce transparency is enabled and `false` otherwise.\n   * - `announcementFinished`: iOS-only event. Fires when the screen reader has\n   *   finished making an announcement. The argument to the event handler is a\n   *   dictionary with these keys:\n   *     - `announcement`: The string announced by the screen reader.\n   *     - `success`: A boolean indicating whether the announcement was\n   *       successfully made.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#addeventlistener\n   */\n  addEventListener<K: $Keys<AccessibilityEventDefinitions>>(\n    eventName: K,\n    // $FlowIssue[incompatible-type] - Flow bug with unions and generics (T128099423)\n    handler: (...$ElementType<AccessibilityEventDefinitions, K>) => void,\n  ): EventSubscription {\n    const deviceEventName = EventNames.get(eventName);\n    return deviceEventName == null\n      ? {remove(): void {}}\n      : // $FlowFixMe[incompatible-call]\n        RCTDeviceEventEmitter.addListener(deviceEventName, handler);\n  },\n\n  /**\n   * Set accessibility focus to a React component.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#setaccessibilityfocus\n   */\n  setAccessibilityFocus(reactTag: number): void {\n    legacySendAccessibilityEvent(reactTag, 'focus');\n  },\n\n  /**\n   * Send a named accessibility event to a HostComponent.\n   */\n  sendAccessibilityEvent(\n    handle: ElementRef<HostComponent<mixed>>,\n    eventType: AccessibilityEventTypes,\n  ) {\n    // iOS only supports 'focus' event types\n    if (Platform.OS === 'ios' && eventType === 'click') {\n      return;\n    }\n    // route through React renderer to distinguish between Fabric and non-Fabric handles\n    sendAccessibilityEvent(handle, eventType);\n  },\n\n  /**\n   * Post a string to be announced by the screen reader.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#announceforaccessibility\n   */\n  announceForAccessibility(announcement: string): void {\n    if (Platform.OS === 'android') {\n      NativeAccessibilityInfoAndroid?.announceForAccessibility(announcement);\n    } else {\n      NativeAccessibilityManagerIOS?.announceForAccessibility(announcement);\n    }\n  },\n\n  /**\n   * Post a string to be announced by the screen reader.\n   * - `announcement`: The string announced by the screen reader.\n   * - `options`: An object that configures the reading options.\n   *   - `queue`: The announcement will be queued behind existing announcements. iOS only.\n   */\n  announceForAccessibilityWithOptions(\n    announcement: string,\n    options: {queue?: boolean},\n  ): void {\n    if (Platform.OS === 'android') {\n      NativeAccessibilityInfoAndroid?.announceForAccessibility(announcement);\n    } else {\n      if (NativeAccessibilityManagerIOS?.announceForAccessibilityWithOptions) {\n        NativeAccessibilityManagerIOS?.announceForAccessibilityWithOptions(\n          announcement,\n          options,\n        );\n      } else {\n        NativeAccessibilityManagerIOS?.announceForAccessibility(announcement);\n      }\n    }\n  },\n\n  /**\n   * Get the recommended timeout for changes to the UI needed by this user.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#getrecommendedtimeoutmillis\n   */\n  getRecommendedTimeoutMillis(originalTimeout: number): Promise<number> {\n    if (Platform.OS === 'android') {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityInfoAndroid?.getRecommendedTimeoutMillis) {\n          NativeAccessibilityInfoAndroid.getRecommendedTimeoutMillis(\n            originalTimeout,\n            resolve,\n          );\n        } else {\n          resolve(originalTimeout);\n        }\n      });\n    } else {\n      return Promise.resolve(originalTimeout);\n    }\n  },\n};\n\nexport default AccessibilityInfo;\n"],"mappings":"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"}