{"version":3,"names":["_StyleSheet","_interopRequireDefault","require","_dismissKeyboard","_Platform","_StatusBar","_View","_AndroidDrawerLayoutNativeComponent","_interopRequireWildcard","_nullthrows","React","_jsxRuntime","_excluded","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","DRAWER_STATES","DrawerLayoutAndroid","_React$Component","_inherits2","_super","_this","_classCallCheck2","_len","length","args","Array","_key","concat","_nativeRef","createRef","state","statusBarBackgroundColor","_onDrawerSlide","event","props","onDrawerSlide","keyboardDismissMode","dismissKeyboard","_onDrawerOpen","onDrawerOpen","_onDrawerClose","onDrawerClose","_onDrawerStateChanged","onDrawerStateChanged","nativeEvent","drawerState","_createClass2","value","render","_this$props","_this$props$drawerBac","drawerBackgroundColor","renderNavigationView","_objectWithoutProperties2","drawStatusBar","Platform","Version","drawerViewWrapper","jsxs","style","styles","drawerSubview","width","drawerWidth","backgroundColor","collapsable","children","jsx","drawerStatusBar","childrenWrapper","mainSubview","translucent","statusBar","assign","ref","drawerPosition","drawerLockMode","base","openDrawer","Commands","nullthrows","current","closeDrawer","blur","focus","measure","callback","measureInWindow","measureLayout","relativeToNativeNode","onSuccess","onFail","setNativeProps","nativeProps","console","warn","Left","Right","Component","StyleSheet","create","flex","elevation","position","top","left","right","bottom","height","StatusBar","currentHeight","module","exports"],"sources":["DrawerLayoutAndroid.android.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {AccessibilityRole} from '../../Components/View/ViewAccessibility';\nimport type {\n  MeasureInWindowOnSuccessCallback,\n  MeasureLayoutOnSuccessCallback,\n  MeasureOnSuccessCallback,\n} from '../../Renderer/shims/ReactNativeTypes';\nimport type {ColorValue, ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {DirectEventHandler} from '../../Types/CodegenTypes';\n\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport dismissKeyboard from '../../Utilities/dismissKeyboard';\nimport Platform from '../../Utilities/Platform';\nimport StatusBar from '../StatusBar/StatusBar';\nimport View from '../View/View';\nimport AndroidDrawerLayoutNativeComponent, {\n  Commands,\n} from './AndroidDrawerLayoutNativeComponent';\nimport nullthrows from 'nullthrows';\nimport * as React from 'react';\n\nconst DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];\n\ntype DrawerStates = 'Idle' | 'Dragging' | 'Settling';\n\ntype DrawerSlideEvent = $ReadOnly<{|\n  offset: number,\n|}>;\n\ntype Props = $ReadOnly<{|\n  accessibilityRole?: ?AccessibilityRole,\n\n  /**\n   * Determines whether the keyboard gets dismissed in response to a drag.\n   *   - 'none' (the default), drags do not dismiss the keyboard.\n   *   - 'on-drag', the keyboard is dismissed when a drag begins.\n   */\n  keyboardDismissMode?: ?('none' | 'on-drag'),\n\n  /**\n   * Specifies the background color of the drawer. The default value is white.\n   * If you want to set the opacity of the drawer, use rgba. Example:\n   *\n   * ```\n   * return (\n   *   <DrawerLayoutAndroid drawerBackgroundColor=\"rgba(0,0,0,0.5)\">\n   *   </DrawerLayoutAndroid>\n   * );\n   * ```\n   */\n  drawerBackgroundColor?: ?ColorValue,\n\n  /**\n   * Specifies the side of the screen from which the drawer will slide in.\n   */\n  drawerPosition: ?('left' | 'right'),\n\n  /**\n   * Specifies the width of the drawer, more precisely the width of the view that be pulled in\n   * from the edge of the window.\n   */\n  drawerWidth?: ?number,\n\n  /**\n   * Specifies the lock mode of the drawer. The drawer can be locked in 3 states:\n   * - unlocked (default), meaning that the drawer will respond (open/close) to touch gestures.\n   * - locked-closed, meaning that the drawer will stay closed and not respond to gestures.\n   * - locked-open, meaning that the drawer will stay opened and not respond to gestures.\n   * The drawer may still be opened and closed programmatically (`openDrawer`/`closeDrawer`).\n   */\n  drawerLockMode?: ?('unlocked' | 'locked-closed' | 'locked-open'),\n\n  /**\n   * Function called whenever there is an interaction with the navigation view.\n   */\n  onDrawerSlide?: ?DirectEventHandler<DrawerSlideEvent>,\n\n  /**\n   * Function called when the drawer state has changed. The drawer can be in 3 states:\n   * - Idle, meaning there is no interaction with the navigation view happening at the time\n   * - Dragging, meaning there is currently an interaction with the navigation view\n   * - Settling, meaning that there was an interaction with the navigation view, and the\n   * navigation view is now finishing its closing or opening animation\n   */\n  onDrawerStateChanged?: ?(state: DrawerStates) => mixed,\n\n  /**\n   * Function called whenever the navigation view has been opened.\n   */\n  onDrawerOpen?: ?() => mixed,\n\n  /**\n   * Function called whenever the navigation view has been closed.\n   */\n  onDrawerClose?: ?() => mixed,\n\n  /**\n   * The navigation view that will be rendered to the side of the screen and can be pulled in.\n   */\n  renderNavigationView: () => React.Element<any>,\n\n  /**\n   * Make the drawer take the entire screen and draw the background of the\n   * status bar to allow it to open over the status bar. It will only have an\n   * effect on API 21+.\n   */\n  statusBarBackgroundColor?: ?ColorValue,\n\n  children?: React.Node,\n  style?: ?ViewStyleProp,\n|}>;\n\ntype State = {|\n  statusBarBackgroundColor: ColorValue,\n|};\n\n/**\n * React component that wraps the platform `DrawerLayout` (Android only). The\n * Drawer (typically used for navigation) is rendered with `renderNavigationView`\n * and direct children are the main view (where your content goes). The navigation\n * view is initially not visible on the screen, but can be pulled in from the\n * side of the window specified by the `drawerPosition` prop and its width can\n * be set by the `drawerWidth` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   var navigationView = (\n *     <View style={{flex: 1, backgroundColor: '#fff'}}>\n *       <Text style={{margin: 10, fontSize: 15, textAlign: 'left'}}>I'm in the Drawer!</Text>\n *     </View>\n *   );\n *   return (\n *     <DrawerLayoutAndroid\n *       drawerWidth={300}\n *       drawerPosition=\"left\"\n *       renderNavigationView={() => navigationView}>\n *       <View style={{flex: 1, alignItems: 'center'}}>\n *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>Hello</Text>\n *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>World!</Text>\n *       </View>\n *     </DrawerLayoutAndroid>\n *   );\n * },\n * ```\n */\nclass DrawerLayoutAndroid extends React.Component<Props, State> {\n  static get positions(): mixed {\n    console.warn(\n      'Setting DrawerLayoutAndroid drawerPosition using `DrawerLayoutAndroid.positions` is deprecated. Instead pass the string value \"left\" or \"right\"',\n    );\n\n    return {Left: 'left', Right: 'right'};\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _nativeRef =\n    React.createRef<\n      React.ElementRef<typeof AndroidDrawerLayoutNativeComponent>,\n    >();\n\n  state: State = {statusBarBackgroundColor: null};\n\n  render(): React.Node {\n    const {\n      drawerBackgroundColor = 'white',\n      onDrawerStateChanged,\n      renderNavigationView,\n      onDrawerOpen,\n      onDrawerClose,\n      ...props\n    } = this.props;\n    const drawStatusBar =\n      Platform.Version >= 21 && this.props.statusBarBackgroundColor != null;\n    const drawerViewWrapper = (\n      <View\n        style={[\n          styles.drawerSubview,\n          {\n            width: this.props.drawerWidth,\n            backgroundColor: drawerBackgroundColor,\n          },\n        ]}\n        collapsable={false}>\n        {renderNavigationView()}\n        {drawStatusBar && <View style={styles.drawerStatusBar} />}\n      </View>\n    );\n    const childrenWrapper = (\n      <View style={styles.mainSubview} collapsable={false}>\n        {drawStatusBar && (\n          <StatusBar\n            translucent\n            backgroundColor={this.props.statusBarBackgroundColor}\n          />\n        )}\n        {drawStatusBar && (\n          <View\n            style={[\n              styles.statusBar,\n              {backgroundColor: this.props.statusBarBackgroundColor},\n            ]}\n          />\n        )}\n        {this.props.children}\n      </View>\n    );\n    return (\n      <AndroidDrawerLayoutNativeComponent\n        {...props}\n        ref={this._nativeRef}\n        drawerBackgroundColor={drawerBackgroundColor}\n        drawerWidth={this.props.drawerWidth}\n        drawerPosition={this.props.drawerPosition}\n        drawerLockMode={this.props.drawerLockMode}\n        style={[styles.base, this.props.style]}\n        onDrawerSlide={this._onDrawerSlide}\n        onDrawerOpen={this._onDrawerOpen}\n        onDrawerClose={this._onDrawerClose}\n        onDrawerStateChanged={this._onDrawerStateChanged}>\n        {childrenWrapper}\n        {drawerViewWrapper}\n      </AndroidDrawerLayoutNativeComponent>\n    );\n  }\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  _onDrawerSlide = event => {\n    if (this.props.onDrawerSlide) {\n      // $FlowFixMe[unused-promise]\n      this.props.onDrawerSlide(event);\n    }\n    if (this.props.keyboardDismissMode === 'on-drag') {\n      dismissKeyboard();\n    }\n  };\n\n  _onDrawerOpen = () => {\n    if (this.props.onDrawerOpen) {\n      this.props.onDrawerOpen();\n    }\n  };\n\n  _onDrawerClose = () => {\n    if (this.props.onDrawerClose) {\n      this.props.onDrawerClose();\n    }\n  };\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  _onDrawerStateChanged = event => {\n    if (this.props.onDrawerStateChanged) {\n      this.props.onDrawerStateChanged(\n        DRAWER_STATES[event.nativeEvent.drawerState],\n      );\n    }\n  };\n\n  /**\n   * Opens the drawer.\n   */\n  openDrawer() {\n    Commands.openDrawer(nullthrows(this._nativeRef.current));\n  }\n\n  /**\n   * Closes the drawer.\n   */\n  closeDrawer() {\n    Commands.closeDrawer(nullthrows(this._nativeRef.current));\n  }\n\n  /**\n   * Closing and opening example\n   * Note: To access the drawer you have to give it a ref\n   *\n   * Class component:\n   *\n   * render () {\n   *   this.openDrawer = () => {\n   *     this.refs.DRAWER.openDrawer()\n   *   }\n   *   this.closeDrawer = () => {\n   *     this.refs.DRAWER.closeDrawer()\n   *   }\n   *   return (\n   *     <DrawerLayoutAndroid ref={'DRAWER'}>\n   *      {children}\n   *     </DrawerLayoutAndroid>\n   *   )\n   * }\n   *\n   * Function component:\n   *\n   * const drawerRef = useRef()\n   * const openDrawer = () => {\n   *   drawerRef.current.openDrawer()\n   * }\n   * const closeDrawer = () => {\n   *   drawerRef.current.closeDrawer()\n   * }\n   * return (\n   *   <DrawerLayoutAndroid ref={drawerRef}>\n   *     {children}\n   *   </DrawerLayoutAndroid>\n   * )\n   */\n\n  /**\n   * Native methods\n   */\n  blur() {\n    nullthrows(this._nativeRef.current).blur();\n  }\n\n  focus() {\n    nullthrows(this._nativeRef.current).focus();\n  }\n\n  measure(callback: MeasureOnSuccessCallback) {\n    nullthrows(this._nativeRef.current).measure(callback);\n  }\n\n  measureInWindow(callback: MeasureInWindowOnSuccessCallback) {\n    nullthrows(this._nativeRef.current).measureInWindow(callback);\n  }\n\n  measureLayout(\n    relativeToNativeNode: number,\n    onSuccess: MeasureLayoutOnSuccessCallback,\n    onFail?: () => void,\n  ) {\n    nullthrows(this._nativeRef.current).measureLayout(\n      relativeToNativeNode,\n      onSuccess,\n      onFail,\n    );\n  }\n\n  setNativeProps(nativeProps: Object) {\n    nullthrows(this._nativeRef.current).setNativeProps(nativeProps);\n  }\n}\n\nconst styles = StyleSheet.create({\n  base: {\n    flex: 1,\n    elevation: 16,\n  },\n  mainSubview: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  drawerSubview: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n  },\n  statusBar: {\n    height: StatusBar.currentHeight,\n  },\n  drawerStatusBar: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    height: StatusBar.currentHeight,\n    backgroundColor: 'rgba(0, 0, 0, 0.251)',\n  },\n});\n\nmodule.exports = DrawerLayoutAndroid;\n"],"mappings":"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"}