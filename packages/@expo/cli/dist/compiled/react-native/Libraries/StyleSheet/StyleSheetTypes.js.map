{"version":3,"names":[],"sources":["StyleSheetTypes.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type AnimatedNode from '../Animated/nodes/AnimatedNode';\nimport type {NativeColorValue} from './PlatformColorValueTypes';\nimport type {\n  ____DangerouslyImpreciseStyle_InternalOverrides,\n  ____ImageStyle_InternalOverrides,\n  ____ShadowStyle_InternalOverrides,\n  ____TextStyle_InternalOverrides,\n  ____ViewStyle_InternalOverrides,\n} from './private/_StyleSheetTypesOverrides';\nimport type {____TransformStyle_Internal} from './private/_TransformStyle';\n\nexport type ____ColorValue_Internal = null | string | number | NativeColorValue;\nexport type ColorArrayValue = null | $ReadOnlyArray<____ColorValue_Internal>;\nexport type PointValue = {\n  x: number,\n  y: number,\n};\nexport type EdgeInsetsValue = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n};\n\nexport type DimensionValue = number | string | 'auto' | AnimatedNode | null;\nexport type AnimatableNumericValue = number | AnimatedNode;\n\n/**\n * React Native's layout system is based on Flexbox and is powered both\n * on iOS and Android by an open source project called `Yoga`:\n * https://github.com/facebook/yoga\n *\n * The implementation in Yoga is slightly different from what the\n * Flexbox spec defines - for example, we chose more sensible default\n * values. Since our layout docs are generated from the comments in this\n * file, please keep a brief comment describing each prop type.\n *\n * These properties are a subset of our styles that are consumed by the layout\n * algorithm and affect the positioning and sizing of views.\n */\ntype ____LayoutStyle_Internal = $ReadOnly<{\n  /** `display` sets the display type of this component.\n   *\n   *  It works similarly to `display` in CSS, but only support 'flex' and 'none'.\n   *  'flex' is the default.\n   */\n  display?: 'none' | 'flex',\n\n  /** `width` sets the width of this component.\n   *\n   *  It works similarly to `width` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/width for more details.\n   */\n  width?: DimensionValue,\n\n  /** `height` sets the height of this component.\n   *\n   *  It works similarly to `height` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/height for more details.\n   */\n  height?: DimensionValue,\n\n  /** `bottom` is the number of logical pixels to offset the bottom edge of\n   *  this component.\n   *\n   *  It works similarly to `bottom` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/bottom\n   *  for more details of how `bottom` affects layout.\n   */\n  bottom?: DimensionValue,\n\n  /**\n   * When the direction is `ltr`, `end` is equivalent to `right`.\n   * When the direction is `rtl`, `end` is equivalent to `left`.\n   *\n   * This style takes precedence over the `left` and `right` styles.\n   */\n  end?: DimensionValue,\n\n  /** `left` is the number of logical pixels to offset the left edge of\n   *  this component.\n   *\n   *  It works similarly to `left` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/left\n   *  for more details of how `left` affects layout.\n   */\n  left?: DimensionValue,\n\n  /** `right` is the number of logical pixels to offset the right edge of\n   *  this component.\n   *\n   *  It works similarly to `right` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/right\n   *  for more details of how `right` affects layout.\n   */\n  right?: DimensionValue,\n\n  /**\n   * When the direction is `ltr`, `start` is equivalent to `left`.\n   * When the direction is `rtl`, `start` is equivalent to `right`.\n   *\n   * This style takes precedence over the `left`, `right`, and `end` styles.\n   */\n  start?: DimensionValue,\n\n  /** `top` is the number of logical pixels to offset the top edge of\n   *  this component.\n   *\n   *  It works similarly to `top` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/top\n   *  for more details of how `top` affects layout.\n   */\n  top?: DimensionValue,\n\n  /** `minWidth` is the minimum width for this component, in logical pixels.\n   *\n   *  It works similarly to `min-width` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/min-width\n   *  for more details.\n   */\n  minWidth?: DimensionValue,\n\n  /** `maxWidth` is the maximum width for this component, in logical pixels.\n   *\n   *  It works similarly to `max-width` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/max-width\n   *  for more details.\n   */\n  maxWidth?: DimensionValue,\n\n  /** `minHeight` is the minimum height for this component, in logical pixels.\n   *\n   *  It works similarly to `min-height` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/min-height\n   *  for more details.\n   */\n  minHeight?: DimensionValue,\n\n  /** `maxHeight` is the maximum height for this component, in logical pixels.\n   *\n   *  It works similarly to `max-height` in CSS, but in React Native you\n   *  must use points or percentages. Ems and other units are not supported.\n   *\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/max-height\n   *  for more details.\n   */\n  maxHeight?: DimensionValue,\n\n  /** Setting `margin` has the same effect as setting each of\n   *  `marginTop`, `marginLeft`, `marginBottom`, and `marginRight`.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin\n   *  for more details.\n   */\n  margin?: DimensionValue,\n\n  /** Setting `marginBlock` has the same effect as setting both\n   *  `marginTop` and `marginBottom`.\n   */\n  marginBlock?: DimensionValue,\n\n  /** `marginBlockEnd` works like `margin-block-end`in CSS. Because React\n   *  Native doesn not support `writing-mode` this is always mapped to\n   *  `margin-bottom`. See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-end\n   *  for more details.\n   */\n  marginBlockEnd?: DimensionValue,\n\n  /** `marginBlockEnd` works like `margin-block-end`in CSS. Because React\n   *  Native doesn not support `writing-mode` this is always mapped to\n   *  `margin-top`. See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-end\n   *  for more details.\n   */\n  marginBlockStart?: DimensionValue,\n\n  /** `marginBottom` works like `margin-bottom` in CSS.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-start\n   *  for more details.\n   */\n  marginBottom?: DimensionValue,\n\n  /**\n   * When direction is `ltr`, `marginEnd` is equivalent to `marginRight`.\n   * When direction is `rtl`, `marginEnd` is equivalent to `marginLeft`.\n   */\n  marginEnd?: DimensionValue,\n\n  /** Setting `marginHorizontal` has the same effect as setting\n   *  both `marginLeft` and `marginRight`.\n   */\n  marginHorizontal?: DimensionValue,\n\n  /** Setting `marginInline` has the same effect as setting\n   *  both `marginLeft` and `marginRight`.\n   */\n  marginInline?: DimensionValue,\n\n  /**\n   * When direction is `ltr`, `marginInlineEnd` is equivalent to `marginRight`.\n   * When direction is `rtl`, `marginInlineEnd` is equivalent to `marginLeft`.\n   */\n  marginInlineEnd?: DimensionValue,\n\n  /**\n   * When direction is `ltr`, `marginInlineStart` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `marginInlineStart` is equivalent to `marginRight`.\n   */\n  marginInlineStart?: DimensionValue,\n\n  /** `marginLeft` works like `margin-left` in CSS.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left\n   *  for more details.\n   */\n  marginLeft?: DimensionValue,\n\n  /** `marginRight` works like `margin-right` in CSS.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right\n   *  for more details.\n   */\n  marginRight?: DimensionValue,\n\n  /**\n   * When direction is `ltr`, `marginStart` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `marginStart` is equivalent to `marginRight`.\n   */\n  marginStart?: DimensionValue,\n\n  /** `marginTop` works like `margin-top` in CSS.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top\n   *  for more details.\n   */\n  marginTop?: DimensionValue,\n\n  /** Setting `marginVertical` has the same effect as setting both\n   *  `marginTop` and `marginBottom`.\n   */\n  marginVertical?: DimensionValue,\n\n  /** Setting `padding` has the same effect as setting each of\n   *  `paddingTop`, `paddingBottom`, `paddingLeft`, and `paddingRight`.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/padding\n   *  for more details.\n   */\n  padding?: DimensionValue,\n\n  /** Setting `paddingBlock` is like setting both of\n   *  `paddingTop` and `paddingBottom`.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block\n   * for more details.\n   */\n  paddingBlock?: DimensionValue,\n\n  /** `paddingBlockEnd` works like `padding-bottom` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-end\n   * for more details.\n   */\n  paddingBlockEnd?: DimensionValue,\n\n  /** `paddingBlockStart` works like `padding-top` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-start\n   * for more details.\n   */\n  paddingBlockStart?: DimensionValue,\n\n  /** `paddingBottom` works like `padding-bottom` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom\n   * for more details.\n   */\n  paddingBottom?: DimensionValue,\n\n  /**\n   * When direction is `ltr`, `paddingEnd` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `paddingEnd` is equivalent to `paddingLeft`.\n   */\n  paddingEnd?: DimensionValue,\n\n  /** Setting `paddingHorizontal` is like setting both of\n   *  `paddingLeft` and `paddingRight`.\n   */\n  paddingHorizontal?: DimensionValue,\n\n  /** Setting `paddingInline` is like setting both of\n   *  `paddingLeft` and `paddingRight`.\n   */\n  paddingInline?: DimensionValue,\n\n  /**\n   * When direction is `ltr`, `paddingInlineEnd` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `paddingInlineEnd` is equivalent to `paddingLeft`.\n   */\n  paddingInlineEnd?: DimensionValue,\n\n  /**\n   * When direction is `ltr`, `paddingInlineStart` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `paddingInlineStart` is equivalent to `paddingRight`.\n   */\n  paddingInlineStart?: DimensionValue,\n\n  /** `paddingLeft` works like `padding-left` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left\n   * for more details.\n   */\n  paddingLeft?: DimensionValue,\n\n  /** `paddingRight` works like `padding-right` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right\n   * for more details.\n   */\n  paddingRight?: DimensionValue,\n\n  /**\n   * When direction is `ltr`, `paddingStart` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `paddingStart` is equivalent to `paddingRight`.\n   */\n  paddingStart?: DimensionValue,\n\n  /** `paddingTop` works like `padding-top` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top\n   * for more details.\n   */\n  paddingTop?: DimensionValue,\n\n  /** Setting `paddingVertical` is like setting both of\n   *  `paddingTop` and `paddingBottom`.\n   */\n  paddingVertical?: DimensionValue,\n\n  /** `borderWidth` works like `border-width` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/border-width\n   * for more details.\n   */\n  borderWidth?: number,\n\n  /** `borderBottomWidth` works like `border-bottom-width` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width\n   * for more details.\n   */\n  borderBottomWidth?: number,\n\n  /**\n   * When direction is `ltr`, `borderEndWidth` is equivalent to `borderRightWidth`.\n   * When direction is `rtl`, `borderEndWidth` is equivalent to `borderLeftWidth`.\n   */\n  borderEndWidth?: number,\n\n  /** `borderLeftWidth` works like `border-left-width` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width\n   * for more details.\n   */\n  borderLeftWidth?: number,\n\n  /** `borderRightWidth` works like `border-right-width` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width\n   * for more details.\n   */\n  borderRightWidth?: number,\n\n  /**\n   * When direction is `ltr`, `borderStartWidth` is equivalent to `borderLeftWidth`.\n   * When direction is `rtl`, `borderStartWidth` is equivalent to `borderRightWidth`.\n   */\n  borderStartWidth?: number,\n\n  /** `borderTopWidth` works like `border-top-width` in CSS.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width\n   * for more details.\n   */\n  borderTopWidth?: number,\n\n  /** `position` in React Native is similar to regular CSS, but\n   *  everything is set to `relative` by default, so `absolute`\n   *  positioning is always just relative to the parent.\n   *\n   *  If you want to position a child using specific numbers of logical\n   *  pixels relative to its parent, set the child to have `absolute`\n   *  position.\n   *\n   *  If you want to position a child relative to something\n   *  that is not its parent, just don't use styles for that. Use the\n   *  component tree.\n   *\n   *  See https://github.com/facebook/yoga\n   *  for more details on how `position` differs between React Native\n   *  and CSS.\n   */\n  position?: 'absolute' | 'relative',\n\n  /** `flexDirection` controls which directions children of a container go.\n   *  `row` goes left to right, `column` goes top to bottom, and you may\n   *  be able to guess what the other two do. It works like `flex-direction`\n   *  in CSS, except the default is `column`.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction\n   *  for more details.\n   */\n  flexDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse',\n\n  /** `flexWrap` controls whether children can wrap around after they\n   *  hit the end of a flex container.\n   *  It works like `flex-wrap` in CSS (default: nowrap).\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap\n   *  for more details.\n   */\n  flexWrap?: 'wrap' | 'nowrap' | 'wrap-reverse',\n\n  /** `justifyContent` aligns children in the main direction.\n   *  For example, if children are flowing vertically, `justifyContent`\n   *  controls how they align vertically.\n   *  It works like `justify-content` in CSS (default: flex-start).\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content\n   *  for more details.\n   */\n  justifyContent?:\n    | 'flex-start'\n    | 'flex-end'\n    | 'center'\n    | 'space-between'\n    | 'space-around'\n    | 'space-evenly',\n\n  /** `alignItems` aligns children in the cross direction.\n   *  For example, if children are flowing vertically, `alignItems`\n   *  controls how they align horizontally.\n   *  It works like `align-items` in CSS (default: stretch).\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/align-items\n   *  for more details.\n   */\n  alignItems?: 'flex-start' | 'flex-end' | 'center' | 'stretch' | 'baseline',\n\n  /** `alignSelf` controls how a child aligns in the cross direction,\n   *  overriding the `alignItems` of the parent. It works like `align-self`\n   *  in CSS (default: auto).\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/align-self\n   *  for more details.\n   */\n  alignSelf?:\n    | 'auto'\n    | 'flex-start'\n    | 'flex-end'\n    | 'center'\n    | 'stretch'\n    | 'baseline',\n\n  /** `alignContent` controls how rows align in the cross direction,\n   *  overriding the `alignContent` of the parent.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/align-content\n   *  for more details.\n   */\n  alignContent?:\n    | 'flex-start'\n    | 'flex-end'\n    | 'center'\n    | 'stretch'\n    | 'space-between'\n    | 'space-around',\n\n  /** `overflow` controls how children are measured and displayed.\n   *  `overflow: hidden` causes views to be clipped while `overflow: scroll`\n   *  causes views to be measured independently of their parents main axis.\n   *  It works like `overflow` in CSS (default: visible).\n   *  See https://developer.mozilla.org/en/docs/Web/CSS/overflow\n   *  for more details.\n   *  `overflow: visible` only works on iOS. On Android, all views will clip\n   *  their children.\n   */\n  overflow?: 'visible' | 'hidden' | 'scroll',\n\n  /** In React Native `flex` does not work the same way that it does in CSS.\n   *  `flex` is a number rather than a string, and it works\n   *  according to the `Yoga` library\n   *  at https://github.com/facebook/yoga\n   *\n   *  When `flex` is a positive number, it makes the component flexible\n   *  and it will be sized proportional to its flex value. So a\n   *  component with `flex` set to 2 will take twice the space as a\n   *  component with `flex` set to 1.\n   *\n   *  When `flex` is 0, the component is sized according to `width`\n   *  and `height` and it is inflexible.\n   *\n   *  When `flex` is -1, the component is normally sized according\n   *  `width` and `height`. However, if there's not enough space,\n   *  the component will shrink to its `minWidth` and `minHeight`.\n   *\n   * flexGrow, flexShrink, and flexBasis work the same as in CSS.\n   */\n  flex?: number,\n  flexGrow?: number,\n  flexShrink?: number,\n  flexBasis?: number | string,\n\n  /**\n   * Aspect ratio control the size of the undefined dimension of a node.\n   *\n   * - On a node with a set width/height aspect ratio control the size of the unset dimension\n   * - On a node with a set flex basis aspect ratio controls the size of the node in the cross axis\n   *   if unset\n   * - On a node with a measure function aspect ratio works as though the measure function measures\n   *   the flex basis\n   * - On a node with flex grow/shrink aspect ratio controls the size of the node in the cross axis\n   *   if unset\n   * - Aspect ratio takes min/max dimensions into account\n   *\n   * Supports a number or a ratio, e.g.:\n   * - aspectRatio: '1 / 1'\n   * - aspectRatio: '1'\n   * - aspectRatio: '1'\n   */\n  aspectRatio?: number | string,\n\n  /** `zIndex` controls which components display on top of others.\n   *  Normally, you don't use `zIndex`. Components render according to\n   *  their order in the document tree, so later components draw over\n   *  earlier ones. `zIndex` may be useful if you have animations or custom\n   *  modal interfaces where you don't want this behavior.\n   *\n   *  It works like the CSS `z-index` property - components with a larger\n   *  `zIndex` will render on top. Think of the z-direction like it's\n   *  pointing from the phone into your eyeball.\n   *  See https://developer.mozilla.org/en-US/docs/Web/CSS/z-index for\n   *  more details.\n   */\n  zIndex?: number,\n\n  /** `direction` specifies the directional flow of the user interface.\n   *  The default is `inherit`, except for root node which will have\n   *  value based on the current locale.\n   *  See https://yogalayout.com/docs/layout-direction\n   *  for more details.\n   *  @platform ios\n   */\n  direction?: 'inherit' | 'ltr' | 'rtl',\n\n  /**\n   * In React Native, gap works the same way it does in CSS.\n   * If there are two or more children in a container, they will be separated from each other\n   * by the value of the gap - but the children will not be separated from the edges of their parent container.\n   * For horizontal gaps, use columnGap, for vertical gaps, use rowGap, and to apply both at the same time, it's gap.\n   * When align-content or justify-content are set to space-between or space-around, the separation\n   * between children may be larger than the gap value.\n   * See https://developer.mozilla.org/en-US/docs/Web/CSS/gap for more details.\n   */\n  rowGap?: number,\n  columnGap?: number,\n  gap?: number,\n}>;\n\n/**\n * These props can be used to dynamically generate shadows on views, images, text, etc.\n *\n * Because they are dynamically generated, they may cause performance regressions. Static\n * shadow image asset may be a better way to go for optimal performance.\n *\n * Shadow-related properties are not fully supported on Android.\n * To add a drop shadow to a view use the [`elevation` property](docs/viewstyleproptypes.html#elevation) (Android 5.0+).\n * To customize the color use the [`shadowColor` property](docs/shadow-props.html#shadowColor) (Android 9.0+).\n */\nexport type ____ShadowStyle_InternalCore = $ReadOnly<{\n  /**\n   * Sets the drop shadow color\n   * @platform ios\n   */\n  shadowColor?: ____ColorValue_Internal,\n  /**\n   * Sets the drop shadow offset\n   * @platform ios\n   */\n  shadowOffset?: $ReadOnly<{\n    width?: number,\n    height?: number,\n  }>,\n  /**\n   * Sets the drop shadow opacity (multiplied by the color's alpha component)\n   * @platform ios\n   */\n  shadowOpacity?: AnimatableNumericValue,\n  /**\n   * Sets the drop shadow blur radius\n   * @platform ios\n   */\n  shadowRadius?: number,\n}>;\n\nexport type ____ShadowStyle_Internal = $ReadOnly<{\n  ...____ShadowStyle_InternalCore,\n  ...____ShadowStyle_InternalOverrides,\n}>;\n\nexport type ____ViewStyle_InternalCore = $ReadOnly<{\n  ...$Exact<____LayoutStyle_Internal>,\n  ...$Exact<____ShadowStyle_Internal>,\n  ...$Exact<____TransformStyle_Internal>,\n  backfaceVisibility?: 'visible' | 'hidden',\n  backgroundColor?: ____ColorValue_Internal,\n  borderColor?: ____ColorValue_Internal,\n  borderCurve?: 'circular' | 'continuous',\n  borderBottomColor?: ____ColorValue_Internal,\n  borderEndColor?: ____ColorValue_Internal,\n  borderLeftColor?: ____ColorValue_Internal,\n  borderRightColor?: ____ColorValue_Internal,\n  borderStartColor?: ____ColorValue_Internal,\n  borderTopColor?: ____ColorValue_Internal,\n  borderBlockColor?: ____ColorValue_Internal,\n  borderBlockEndColor?: ____ColorValue_Internal,\n  borderBlockStartColor?: ____ColorValue_Internal,\n  borderRadius?: AnimatableNumericValue,\n  borderBottomEndRadius?: AnimatableNumericValue,\n  borderBottomLeftRadius?: AnimatableNumericValue,\n  borderBottomRightRadius?: AnimatableNumericValue,\n  borderBottomStartRadius?: AnimatableNumericValue,\n  borderEndEndRadius?: AnimatableNumericValue,\n  borderEndStartRadius?: AnimatableNumericValue,\n  borderStartEndRadius?: AnimatableNumericValue,\n  borderStartStartRadius?: AnimatableNumericValue,\n  borderTopEndRadius?: AnimatableNumericValue,\n  borderTopLeftRadius?: AnimatableNumericValue,\n  borderTopRightRadius?: AnimatableNumericValue,\n  borderTopStartRadius?: AnimatableNumericValue,\n  borderStyle?: 'solid' | 'dotted' | 'dashed',\n  borderWidth?: AnimatableNumericValue,\n  borderBottomWidth?: AnimatableNumericValue,\n  borderEndWidth?: AnimatableNumericValue,\n  borderLeftWidth?: AnimatableNumericValue,\n  borderRightWidth?: AnimatableNumericValue,\n  borderStartWidth?: AnimatableNumericValue,\n  borderTopWidth?: AnimatableNumericValue,\n  opacity?: AnimatableNumericValue,\n  elevation?: number,\n  pointerEvents?: 'auto' | 'none' | 'box-none' | 'box-only',\n}>;\n\nexport type ____ViewStyle_Internal = $ReadOnly<{\n  ...____ViewStyle_InternalCore,\n  ...____ViewStyle_InternalOverrides,\n}>;\n\nexport type FontStyleType = {\n  fontFamily: string,\n  fontWeight: ____FontWeight_Internal,\n};\n\nexport type FontStyleMap = {\n  ultraLight: FontStyleType,\n  thin: FontStyleType,\n  light: FontStyleType,\n  regular: FontStyleType,\n  medium: FontStyleType,\n  semibold: FontStyleType,\n  bold: FontStyleType,\n  heavy: FontStyleType,\n  black: FontStyleType,\n};\n\nexport type ____FontWeight_Internal =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900'\n  | 100\n  | 200\n  | 300\n  | 400\n  | 500\n  | 600\n  | 700\n  | 800\n  | 900\n  | 'ultralight'\n  | 'thin'\n  | 'light'\n  | 'medium'\n  | 'regular'\n  | 'semibold'\n  | 'condensedBold'\n  | 'condensed'\n  | 'heavy'\n  | 'black';\n\nexport type ____FontVariantArray_Internal = $ReadOnlyArray<\n  | 'small-caps'\n  | 'oldstyle-nums'\n  | 'lining-nums'\n  | 'tabular-nums'\n  | 'proportional-nums'\n  | 'stylistic-one'\n  | 'stylistic-two'\n  | 'stylistic-three'\n  | 'stylistic-four'\n  | 'stylistic-five'\n  | 'stylistic-six'\n  | 'stylistic-seven'\n  | 'stylistic-eight'\n  | 'stylistic-nine'\n  | 'stylistic-ten'\n  | 'stylistic-eleven'\n  | 'stylistic-twelve'\n  | 'stylistic-thirteen'\n  | 'stylistic-fourteen'\n  | 'stylistic-fifteen'\n  | 'stylistic-sixteen'\n  | 'stylistic-seventeen'\n  | 'stylistic-eighteen'\n  | 'stylistic-nineteen'\n  | 'stylistic-twenty',\n>;\n\nexport type ____TextStyle_InternalCore = $ReadOnly<{\n  ...$Exact<____ViewStyle_Internal>,\n  color?: ____ColorValue_Internal,\n  fontFamily?: string,\n  fontSize?: number,\n  fontStyle?: 'normal' | 'italic',\n  fontWeight?: ____FontWeight_Internal,\n  fontVariant?: ____FontVariantArray_Internal | string,\n  textShadowOffset?: $ReadOnly<{\n    width: number,\n    height: number,\n  }>,\n  textShadowRadius?: number,\n  textShadowColor?: ____ColorValue_Internal,\n  letterSpacing?: number,\n  lineHeight?: number,\n  textAlign?: 'auto' | 'left' | 'right' | 'center' | 'justify',\n  textAlignVertical?: 'auto' | 'top' | 'bottom' | 'center',\n  includeFontPadding?: boolean,\n  textDecorationLine?:\n    | 'none'\n    | 'underline'\n    | 'line-through'\n    | 'underline line-through',\n  textDecorationStyle?: 'solid' | 'double' | 'dotted' | 'dashed',\n  textDecorationColor?: ____ColorValue_Internal,\n  textTransform?: 'none' | 'capitalize' | 'uppercase' | 'lowercase',\n  userSelect?: 'auto' | 'text' | 'none' | 'contain' | 'all',\n  verticalAlign?: 'auto' | 'top' | 'bottom' | 'middle',\n  writingDirection?: 'auto' | 'ltr' | 'rtl',\n}>;\n\nexport type ____TextStyle_Internal = $ReadOnly<{\n  ...____TextStyle_InternalCore,\n  ...____TextStyle_InternalOverrides,\n}>;\n\nexport type ____ImageStyle_InternalCore = $ReadOnly<{\n  ...$Exact<____ViewStyle_Internal>,\n  resizeMode?: 'contain' | 'cover' | 'stretch' | 'center' | 'repeat',\n  objectFit?: 'cover' | 'contain' | 'fill' | 'scale-down',\n  tintColor?: ____ColorValue_Internal,\n  overlayColor?: string,\n}>;\n\nexport type ____ImageStyle_Internal = $ReadOnly<{\n  ...____ImageStyle_InternalCore,\n  ...____ImageStyle_InternalOverrides,\n}>;\n\nexport type ____DangerouslyImpreciseStyle_InternalCore = $ReadOnly<{\n  ...$Exact<____TextStyle_Internal>,\n  resizeMode?: 'contain' | 'cover' | 'stretch' | 'center' | 'repeat',\n  objectFit?: 'cover' | 'contain' | 'fill' | 'scale-down',\n  tintColor?: ____ColorValue_Internal,\n  overlayColor?: string,\n}>;\n\nexport type ____DangerouslyImpreciseStyle_Internal = $ReadOnly<{\n  ...____DangerouslyImpreciseStyle_InternalCore,\n  ...____DangerouslyImpreciseStyle_InternalOverrides,\n  ...\n}>;\n\ntype GenericStyleProp<+T> =\n  | null\n  | void\n  | T\n  | false\n  | ''\n  | $ReadOnlyArray<GenericStyleProp<T>>;\n\nexport type ____DangerouslyImpreciseStyleProp_Internal = GenericStyleProp<\n  $Shape<____DangerouslyImpreciseStyle_Internal>,\n>;\nexport type ____ViewStyleProp_Internal = GenericStyleProp<\n  $ReadOnly<$Shape<____ViewStyle_Internal>>,\n>;\nexport type ____TextStyleProp_Internal = GenericStyleProp<\n  $ReadOnly<$Shape<____TextStyle_Internal>>,\n>;\nexport type ____ImageStyleProp_Internal = GenericStyleProp<\n  $ReadOnly<$Shape<____ImageStyle_Internal>>,\n>;\n\nexport type ____Styles_Internal = {\n  +[key: string]: $Shape<____DangerouslyImpreciseStyle_Internal>,\n  ...\n};\n\nexport type ____FlattenStyleProp_Internal<+TStyleProp> = $Call<\n  <T>(GenericStyleProp<T>) => T,\n  TStyleProp,\n>;\n"],"mappings":"AAUA,YAAY"}