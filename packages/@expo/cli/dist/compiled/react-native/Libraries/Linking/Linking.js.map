{"version":3,"names":["_NativeEventEmitter2","_interopRequireDefault","require","_Platform","_NativeIntentAndroid","_NativeLinkingManager","_invariant","_nullthrows","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","Linking","_NativeEventEmitter","_inherits2","_super","_classCallCheck2","Platform","OS","nullthrows","NativeLinkingManager","undefined","_createClass2","key","value","addEventListener","eventType","listener","context","addListener","openURL","url","_validateURL","NativeIntentAndroid","canOpenURL","openSettings","getInitialURL","sendIntent","action","extras","Promise","resolve","reject","Error","invariant","NativeEventEmitter","module","exports"],"sources":["Linking.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {EventSubscription} from '../vendor/emitter/EventEmitter';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport Platform from '../Utilities/Platform';\nimport NativeIntentAndroid from './NativeIntentAndroid';\nimport NativeLinkingManager from './NativeLinkingManager';\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\n\ntype LinkingEventDefinitions = {\n  url: [{url: string}],\n};\n\n/**\n * `Linking` gives you a general interface to interact with both incoming\n * and outgoing app links.\n *\n * See https://reactnative.dev/docs/linking\n */\nclass Linking extends NativeEventEmitter<LinkingEventDefinitions> {\n  constructor() {\n    super(Platform.OS === 'ios' ? nullthrows(NativeLinkingManager) : undefined);\n  }\n\n  /**\n   * Add a handler to Linking changes by listening to the `url` event type\n   * and providing the handler\n   *\n   * See https://reactnative.dev/docs/linking#addeventlistener\n   */\n  addEventListener<K: $Keys<LinkingEventDefinitions>>(\n    eventType: K,\n    listener: (...$ElementType<LinkingEventDefinitions, K>) => mixed,\n    context: $FlowFixMe,\n  ): EventSubscription {\n    return this.addListener(eventType, listener);\n  }\n\n  /**\n   * Try to open the given `url` with any of the installed apps.\n   *\n   * See https://reactnative.dev/docs/linking#openurl\n   */\n  openURL(url: string): Promise<void> {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).openURL(url);\n    }\n  }\n\n  /**\n   * Determine whether or not an installed app can handle a given URL.\n   *\n   * See https://reactnative.dev/docs/linking#canopenurl\n   */\n  canOpenURL(url: string): Promise<boolean> {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).canOpenURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).canOpenURL(url);\n    }\n  }\n\n  /**\n   * Open app settings.\n   *\n   * See https://reactnative.dev/docs/linking#opensettings\n   */\n  openSettings(): Promise<void> {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openSettings();\n    } else {\n      return nullthrows(NativeLinkingManager).openSettings();\n    }\n  }\n\n  /**\n   * If the app launch was triggered by an app link,\n   * it will give the link url, otherwise it will give `null`\n   *\n   * See https://reactnative.dev/docs/linking#getinitialurl\n   */\n  getInitialURL(): Promise<?string> {\n    return Platform.OS === 'android'\n      ? nullthrows(NativeIntentAndroid).getInitialURL()\n      : nullthrows(NativeLinkingManager).getInitialURL();\n  }\n\n  /*\n   * Launch an Android intent with extras (optional)\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/linking#sendintent\n   */\n  sendIntent(\n    action: string,\n    extras?: Array<{\n      key: string,\n      value: string | number | boolean,\n      ...\n    }>,\n  ): Promise<void> {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).sendIntent(action, extras);\n    } else {\n      return new Promise((resolve, reject) => reject(new Error('Unsupported')));\n    }\n  }\n\n  _validateURL(url: string): void {\n    invariant(\n      typeof url === 'string',\n      'Invalid URL: should be a string. Was: ' + url,\n    );\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n}\n\nmodule.exports = (new Linking(): Linking);\n"],"mappings":"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"}