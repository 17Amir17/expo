{"version":3,"names":[],"sources":["ImageProps.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {ViewProps} from '../Components/View/ViewPropTypes';\nimport type {EdgeInsetsProp} from '../StyleSheet/EdgeInsetsPropType';\nimport type {\n  ColorValue,\n  ImageStyleProp,\n  ViewStyleProp,\n} from '../StyleSheet/StyleSheet';\nimport type {LayoutEvent, SyntheticEvent} from '../Types/CoreEventTypes';\nimport typeof Image from './Image';\nimport type {ImageSource} from './ImageSource';\nimport type {Node, Ref} from 'react';\n\nexport type ImageLoadEvent = SyntheticEvent<\n  $ReadOnly<{|\n    source: $ReadOnly<{|\n      width: number,\n      height: number,\n      uri: string,\n    |}>,\n  |}>,\n>;\n\ntype IOSImageProps = $ReadOnly<{|\n  /**\n   * A static image to display while loading the image source.\n   *\n   * See https://reactnative.dev/docs/image#defaultsource\n   */\n  defaultSource?: ?ImageSource,\n  /**\n   * Invoked when a partial load of the image is complete.\n   *\n   * See https://reactnative.dev/docs/image#onpartialload\n   */\n  onPartialLoad?: ?() => void,\n  /**\n   * Invoked on download progress with `{nativeEvent: {loaded, total}}`.\n   *\n   * See https://reactnative.dev/docs/image#onprogress\n   */\n  onProgress?: ?(\n    event: SyntheticEvent<$ReadOnly<{|loaded: number, total: number|}>>,\n  ) => void,\n|}>;\n\ntype AndroidImageProps = $ReadOnly<{|\n  loadingIndicatorSource?: ?(number | $ReadOnly<{|uri: string|}>),\n  progressiveRenderingEnabled?: ?boolean,\n  fadeDuration?: ?number,\n|}>;\n\nexport type ImageProps = {|\n  ...$Diff<ViewProps, $ReadOnly<{|style: ?ViewStyleProp|}>>,\n  ...IOSImageProps,\n  ...AndroidImageProps,\n\n  /**\n   * When true, indicates the image is an accessibility element.\n   *\n   * See https://reactnative.dev/docs/image#accessible\n   */\n  accessible?: ?boolean,\n\n  /**\n   * Internal prop to set an \"Analytics Tag\" that can will be set on the Image\n   */\n  internal_analyticTag?: ?string,\n\n  /**\n   * The text that's read by the screen reader when the user interacts with\n   * the image.\n   *\n   * See https://reactnative.dev/docs/image#accessibilitylabel\n   */\n  accessibilityLabel?: ?Stringish,\n\n  /**\n   * Alias for accessibilityLabel\n   * See https://reactnative.dev/docs/image#accessibilitylabel\n   */\n  'aria-label'?: ?Stringish,\n\n  /**\n   * Represents the nativeID of the associated label. When the assistive technology focuses on the component with this props.\n   *\n   * @platform android\n   */\n  'aria-labelledby'?: ?string,\n  /**\n   * The text that's read by the screen reader when the user interacts with\n   * the image.\n   *\n   * See https://reactnative.dev/docs/image#alt\n   */\n  alt?: ?Stringish,\n\n  /**\n   * blurRadius: the blur radius of the blur filter added to the image\n   *\n   * See https://reactnative.dev/docs/image#blurradius\n   */\n  blurRadius?: ?number,\n\n  /**\n   * See https://reactnative.dev/docs/image#capinsets\n   */\n  capInsets?: ?EdgeInsetsProp,\n\n  /**\n   * Adds the CORS related header to the request.\n   * Similar to crossorigin from HTML.\n   *\n   * See https://reactnative.dev/docs/image#crossorigin\n   */\n  crossOrigin?: ?('anonymous' | 'use-credentials'),\n\n  /**\n   * Height of the image component.\n   *\n   * See https://reactnative.dev/docs/image#height\n   */\n  height?: number,\n\n  /**\n   * Width of the image component.\n   *\n   * See https://reactnative.dev/docs/image#width\n   */\n  width?: number,\n\n  /**\n   * Invoked on load error with `{nativeEvent: {error}}`.\n   *\n   * See https://reactnative.dev/docs/image#onerror\n   */\n  onError?: ?(\n    event: SyntheticEvent<\n      $ReadOnly<{|\n        error: string,\n      |}>,\n    >,\n  ) => void,\n\n  /**\n   * Invoked on mount and layout changes with\n   * `{nativeEvent: {layout: {x, y, width, height}}}`.\n   *\n   * See https://reactnative.dev/docs/image#onlayout\n   */\n\n  onLayout?: ?(event: LayoutEvent) => mixed,\n\n  /**\n   * Invoked when load completes successfully.\n   *\n   * See https://reactnative.dev/docs/image#onload\n   */\n  onLoad?: ?(event: ImageLoadEvent) => void,\n\n  /**\n   * Invoked when load either succeeds or fails.\n   *\n   * See https://reactnative.dev/docs/image#onloadend\n   */\n  onLoadEnd?: ?() => void,\n\n  /**\n   * Invoked on load start.\n   *\n   * See https://reactnative.dev/docs/image#onloadstart\n   */\n  onLoadStart?: ?() => void,\n\n  /**\n   * See https://reactnative.dev/docs/image#resizemethod\n   */\n  resizeMethod?: ?('auto' | 'resize' | 'scale'),\n\n  /**\n   * The image source (either a remote URL or a local file resource).\n   *\n   * See https://reactnative.dev/docs/image#source\n   */\n  source?: ?ImageSource,\n\n  /**\n   * See https://reactnative.dev/docs/image#style\n   */\n  style?: ?ImageStyleProp,\n\n  /**\n   * A string indicating which referrer to use when fetching the resource.\n   * Similar to referrerpolicy from HTML.\n   *\n   * See https://reactnative.dev/docs/image#referrerpolicy\n   */\n  referrerPolicy?: ?(\n    | 'no-referrer'\n    | 'no-referrer-when-downgrade'\n    | 'origin'\n    | 'origin-when-cross-origin'\n    | 'same-origin'\n    | 'strict-origin'\n    | 'strict-origin-when-cross-origin'\n    | 'unsafe-url'\n  ),\n\n  /**\n   * Determines how to resize the image when the frame doesn't match the raw\n   * image dimensions.\n   *\n   * See https://reactnative.dev/docs/image#resizemode\n   */\n  resizeMode?: ?('cover' | 'contain' | 'stretch' | 'repeat' | 'center'),\n\n  /**\n   * A unique identifier for this element to be used in UI Automation\n   * testing scripts.\n   *\n   * See https://reactnative.dev/docs/image#testid\n   */\n  testID?: ?string,\n\n  /**\n   * Changes the color of all the non-transparent pixels to the tintColor.\n   *\n   * See https://reactnative.dev/docs/image#tintcolor\n   */\n  tintColor?: ColorValue,\n\n  /**\n   * A string representing the resource identifier for the image. Similar to\n   * src from HTML.\n   *\n   * See https://reactnative.dev/docs/image#src\n   */\n  src?: ?string,\n\n  /**\n   * Similar to srcset from HTML.\n   *\n   * See https://reactnative.dev/docs/image#srcset\n   */\n  srcSet?: ?string,\n  children?: empty,\n|};\n\nexport type ImageBackgroundProps = $ReadOnly<{|\n  ...ImageProps,\n  children?: Node,\n\n  /**\n   * Style applied to the outer View component\n   *\n   * See https://reactnative.dev/docs/imagebackground#style\n   */\n  style?: ?ViewStyleProp,\n\n  /**\n   * Style applied to the inner Image component\n   *\n   * See https://reactnative.dev/docs/imagebackground#imagestyle\n   */\n  imageStyle?: ?ImageStyleProp,\n\n  /**\n   * Allows to set a reference to the inner Image component\n   *\n   * See https://reactnative.dev/docs/imagebackground#imageref\n   */\n  imageRef?: Ref<Image>,\n|}>;\n"],"mappings":"AAUA,YAAY"}