{"version":3,"names":["Object","defineProperty","exports","value","getImageSourceProperties","imageSource","object","body","bundle","cache","headers","height","method","scale","uri","width"],"sources":["ImageSource.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\n/**\n * This type is intentionally inexact in order to permit call sites that supply\n * extra properties.\n */\nexport interface ImageURISource {\n  /**\n   * `uri` is a string representing the resource identifier for the image, which\n   * could be an http address, a local file path, or the name of a static image\n   * resource (which should be wrapped in the `require('./path/to/image.png')`\n   * function).\n   */\n  +uri?: ?string;\n\n  /**\n   * `bundle` is the iOS asset bundle which the image is included in. This\n   * will default to [NSBundle mainBundle] if not set.\n   * @platform ios\n   */\n  +bundle?: ?string;\n\n  /**\n   * `method` is the HTTP Method to use. Defaults to GET if not specified.\n   */\n  +method?: ?string;\n\n  /**\n   * `headers` is an object representing the HTTP headers to send along with the\n   * request for a remote image.\n   */\n  +headers?: ?{[string]: string};\n\n  /**\n   * `body` is the HTTP body to send with the request. This must be a valid\n   * UTF-8 string, and will be sent exactly as specified, with no\n   * additional encoding (e.g. URL-escaping or base64) applied.\n   */\n  +body?: ?string;\n\n  /**\n   * `cache` determines how the requests handles potentially cached\n   * responses.\n   *\n   * - `default`: Use the native platforms default strategy. `useProtocolCachePolicy` on iOS.\n   *\n   * - `reload`: The data for the URL will be loaded from the originating source.\n   * No existing cache data should be used to satisfy a URL load request.\n   *\n   * - `force-cache`: The existing cached data will be used to satisfy the request,\n   * regardless of its age or expiration date. If there is no existing data in the cache\n   * corresponding the request, the data is loaded from the originating source.\n   *\n   * - `only-if-cached`: The existing cache data will be used to satisfy a request, regardless of\n   * its age or expiration date. If there is no existing data in the cache corresponding\n   * to a URL load request, no attempt is made to load the data from the originating source,\n   * and the load is considered to have failed.\n   *\n   * @platform ios\n   */\n  +cache?: ?('default' | 'reload' | 'force-cache' | 'only-if-cached');\n\n  /**\n   * `width` and `height` can be specified if known at build time, in which case\n   * these will be used to set the default `<Image/>` component dimensions.\n   */\n  +width?: ?number;\n  +height?: ?number;\n\n  /**\n   * `scale` is used to indicate the scale factor of the image. Defaults to 1.0 if\n   * unspecified, meaning that one image pixel equates to one display point / DIP.\n   */\n  +scale?: ?number;\n}\n\nexport type ImageSource =\n  | number\n  | ImageURISource\n  | $ReadOnlyArray<ImageURISource>;\n\ntype ImageSourceProperties = {\n  body?: ?string,\n  bundle?: ?string,\n  cache?: ?('default' | 'reload' | 'force-cache' | 'only-if-cached'),\n  headers?: ?{[string]: string},\n  height?: ?number,\n  method?: ?string,\n  scale?: ?number,\n  uri?: ?string,\n  width?: ?number,\n  ...\n};\n\nexport function getImageSourceProperties(\n  imageSource: ImageURISource,\n): $ReadOnly<ImageSourceProperties> {\n  const object: ImageSourceProperties = {};\n  if (imageSource.body != null) {\n    object.body = imageSource.body;\n  }\n  if (imageSource.bundle != null) {\n    object.bundle = imageSource.bundle;\n  }\n  if (imageSource.cache != null) {\n    object.cache = imageSource.cache;\n  }\n  if (imageSource.headers != null) {\n    object.headers = imageSource.headers;\n  }\n  if (imageSource.height != null) {\n    object.height = imageSource.height;\n  }\n  if (imageSource.method != null) {\n    object.method = imageSource.method;\n  }\n  if (imageSource.scale != null) {\n    object.scale = imageSource.scale;\n  }\n  if (imageSource.uri != null) {\n    object.uri = imageSource.uri;\n  }\n  if (imageSource.width != null) {\n    object.width = imageSource.width;\n  }\n  return object;\n}\n"],"mappings":"AAUA,YAAY;AAACA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,wBAAA,GAAAA,wBAAA;AA8FN,SAASA,wBAAwBA,CACtCC,WAA2B,EACO;EAClC,IAAMC,MAA6B,GAAG,CAAC,CAAC;EACxC,IAAID,WAAW,CAACE,IAAI,IAAI,IAAI,EAAE;IAC5BD,MAAM,CAACC,IAAI,GAAGF,WAAW,CAACE,IAAI;EAChC;EACA,IAAIF,WAAW,CAACG,MAAM,IAAI,IAAI,EAAE;IAC9BF,MAAM,CAACE,MAAM,GAAGH,WAAW,CAACG,MAAM;EACpC;EACA,IAAIH,WAAW,CAACI,KAAK,IAAI,IAAI,EAAE;IAC7BH,MAAM,CAACG,KAAK,GAAGJ,WAAW,CAACI,KAAK;EAClC;EACA,IAAIJ,WAAW,CAACK,OAAO,IAAI,IAAI,EAAE;IAC/BJ,MAAM,CAACI,OAAO,GAAGL,WAAW,CAACK,OAAO;EACtC;EACA,IAAIL,WAAW,CAACM,MAAM,IAAI,IAAI,EAAE;IAC9BL,MAAM,CAACK,MAAM,GAAGN,WAAW,CAACM,MAAM;EACpC;EACA,IAAIN,WAAW,CAACO,MAAM,IAAI,IAAI,EAAE;IAC9BN,MAAM,CAACM,MAAM,GAAGP,WAAW,CAACO,MAAM;EACpC;EACA,IAAIP,WAAW,CAACQ,KAAK,IAAI,IAAI,EAAE;IAC7BP,MAAM,CAACO,KAAK,GAAGR,WAAW,CAACQ,KAAK;EAClC;EACA,IAAIR,WAAW,CAACS,GAAG,IAAI,IAAI,EAAE;IAC3BR,MAAM,CAACQ,GAAG,GAAGT,WAAW,CAACS,GAAG;EAC9B;EACA,IAAIT,WAAW,CAACU,KAAK,IAAI,IAAI,EAAE;IAC7BT,MAAM,CAACS,KAAK,GAAGV,WAAW,CAACU,KAAK;EAClC;EACA,OAAOT,MAAM;AACf"}