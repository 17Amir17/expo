{"version":3,"names":["Switch","require","default","TextInput","View","Text","_require","VirtualizedList","React","ShallowRenderer","ReactTestRenderer","shallowRenderer","byClickable","withMessage","node","_node$props","_node$props$onStartSh","_node$instance","_node$instance$state","type","props","onPress","disabled","onStartShouldSetResponder","testOnly_pressabilityConfig","instance","state","pressability","touchableHandlePress","byTestID","testID","byTextMatching","regex","exec","children","toString","enter","text","input","findByType","onChange","nativeEvent","onChangeText","maximumDepthError","tree","maxDepthLimit","maxDepth","maximumDepthOfJSON","toJSON","expectNoConsoleWarn","jest","spyOn","console","mockImplementation","_len","arguments","length","args","Array","_key","expect","toBeFalsy","expectNoConsoleError","hasNotFailed","_len2","_key2","expectRendersMatchingSnapshot","name","ComponentProvider","unmockComponent","resetAllMocks","create","_jsxRuntime","jsx","toMatchSnapshot","render","forEach","child","Math","max","renderAndEnforceStrictMode","element","renderWithStrictMode","WorkAroundBugWithStrictModeInTestRenderer","prps","StrictMode","tap","_touchable$props2","_touchable$props2$onS","touchable","find","value","_touchable$props","onValueChange","_touchable$props$onSt","scrollToBottom","list","onEndReached","fn","message"],"sources":["ReactNativeTestTools.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n/* eslint-env jest */\n\nimport type {ReactTestRenderer as ReactTestRendererType} from 'react-test-renderer';\n\nconst Switch = require('../Components/Switch/Switch').default;\nconst TextInput = require('../Components/TextInput/TextInput');\nconst View = require('../Components/View/View');\nconst Text = require('../Text/Text');\nconst {VirtualizedList} = require('@react-native/virtualized-lists');\nconst React = require('react');\nconst ShallowRenderer = require('react-shallow-renderer');\nconst ReactTestRenderer = require('react-test-renderer');\n\n/* $FlowFixMe[not-a-function] (>=0.125.1 site=react_native_fb) This comment\n * suppresses an error found when Flow v0.125.1 was deployed. To see the error,\n * delete this comment and run Flow. */\n// $FlowFixMe[invalid-constructor]\nconst shallowRenderer = new ShallowRenderer();\nexport type ReactTestInstance = $PropertyType<ReactTestRendererType, 'root'>;\nexport type Predicate = (node: ReactTestInstance) => boolean;\ntype $ReturnType<Fn> = $Call<<Ret, A>((...A) => Ret) => Ret, Fn>;\n/* $FlowFixMe[value-as-type] (>=0.125.1 site=react_native_fb) This comment\n * suppresses an error found when Flow v0.125.1 was deployed. To see the error,\n * delete this comment and run Flow. */\nexport type ReactTestRendererJSON =\n  /* $FlowFixMe[prop-missing] (>=0.125.1 site=react_native_fb) This comment\n   * suppresses an error found when Flow v0.125.1 was deployed. To see the error,\n   * delete this comment and run Flow. */\n  $ReturnType<ReactTestRenderer.create.toJSON>;\n\nfunction byClickable(): Predicate {\n  return withMessage(\n    node =>\n      // note: <Text /> lazy-mounts press handlers after the first press,\n      //       so this is a workaround for targeting text nodes.\n      (node.type === Text &&\n        node.props &&\n        typeof node.props.onPress === 'function') ||\n      // note: Special casing <Switch /> since it doesn't use touchable\n      (node.type === Switch && node.props && node.props.disabled !== true) ||\n      (node.type === View &&\n        node?.props?.onStartShouldSetResponder?.testOnly_pressabilityConfig) ||\n      // HACK: Find components that use `Pressability`.\n      node.instance?.state?.pressability != null ||\n      // TODO: Remove this after deleting `Touchable`.\n      (node.instance != null &&\n        // $FlowFixMe[prop-missing]\n        typeof node.instance.touchableHandlePress === 'function'),\n    'is clickable',\n  );\n}\n\nfunction byTestID(testID: string): Predicate {\n  return withMessage(\n    node => node.props && node.props.testID === testID,\n    `testID prop equals ${testID}`,\n  );\n}\n\nfunction byTextMatching(regex: RegExp): Predicate {\n  return withMessage(\n    node => node.props != null && regex.exec(node.props.children) !== null,\n    `text content matches ${regex.toString()}`,\n  );\n}\n\nfunction enter(instance: ReactTestInstance, text: string) {\n  const input = instance.findByType(TextInput);\n  input.props.onChange && input.props.onChange({nativeEvent: {text}});\n  input.props.onChangeText && input.props.onChangeText(text);\n}\n\n// Returns null if there is no error, otherwise returns an error message string.\nfunction maximumDepthError(\n  tree: ReactTestRendererType,\n  maxDepthLimit: number,\n): ?string {\n  const maxDepth = maximumDepthOfJSON(tree.toJSON());\n  if (maxDepth > maxDepthLimit) {\n    return (\n      `maximumDepth of ${maxDepth} exceeded limit of ${maxDepthLimit} - this is a proxy ` +\n      'metric to protect against stack overflow errors:\\n\\n' +\n      'https://fburl.com/rn-view-stack-overflow.\\n\\n' +\n      'To fix, you need to remove native layers from your hierarchy, such as unnecessary View ' +\n      'wrappers.'\n    );\n  } else {\n    return null;\n  }\n}\n\nfunction expectNoConsoleWarn() {\n  (jest: $FlowFixMe).spyOn(console, 'warn').mockImplementation((...args) => {\n    expect(args).toBeFalsy();\n  });\n}\n\nfunction expectNoConsoleError() {\n  let hasNotFailed = true;\n  (jest: $FlowFixMe).spyOn(console, 'error').mockImplementation((...args) => {\n    if (hasNotFailed) {\n      hasNotFailed = false; // set false to prevent infinite recursion\n      expect(args).toBeFalsy();\n    }\n  });\n}\n\nfunction expectRendersMatchingSnapshot(\n  name: string,\n  ComponentProvider: () => React.Element<any>,\n  unmockComponent: () => mixed,\n) {\n  let instance;\n\n  jest.resetAllMocks();\n\n  instance = ReactTestRenderer.create(<ComponentProvider />);\n  expect(instance).toMatchSnapshot(\n    'should deep render when mocked (please verify output manually)',\n  );\n\n  jest.resetAllMocks();\n  unmockComponent();\n\n  instance = shallowRenderer.render(<ComponentProvider />);\n  expect(instance).toMatchSnapshot(\n    `should shallow render as <${name} /> when not mocked`,\n  );\n\n  jest.resetAllMocks();\n\n  instance = shallowRenderer.render(<ComponentProvider />);\n  expect(instance).toMatchSnapshot(\n    `should shallow render as <${name} /> when mocked`,\n  );\n\n  jest.resetAllMocks();\n  unmockComponent();\n\n  instance = ReactTestRenderer.create(<ComponentProvider />);\n  expect(instance).toMatchSnapshot(\n    'should deep render when not mocked (please verify output manually)',\n  );\n}\n\n// Takes a node from toJSON()\nfunction maximumDepthOfJSON(node: ?ReactTestRendererJSON): number {\n  if (node == null) {\n    return 0;\n  } else if (typeof node === 'string' || node.children == null) {\n    return 1;\n  } else {\n    let maxDepth = 0;\n    node.children.forEach(child => {\n      maxDepth = Math.max(maximumDepthOfJSON(child) + 1, maxDepth);\n    });\n    return maxDepth;\n  }\n}\n\nfunction renderAndEnforceStrictMode(element: React.Node): any {\n  expectNoConsoleError();\n  return renderWithStrictMode(element);\n}\n\nfunction renderWithStrictMode(element: React.Node): ReactTestRendererType {\n  const WorkAroundBugWithStrictModeInTestRenderer = (prps: {\n    children: React.Node,\n  }) => prps.children;\n  const StrictMode = (React: $FlowFixMe).StrictMode;\n  return ReactTestRenderer.create(\n    <WorkAroundBugWithStrictModeInTestRenderer>\n      <StrictMode>{element}</StrictMode>\n    </WorkAroundBugWithStrictModeInTestRenderer>,\n  );\n}\n\nfunction tap(instance: ReactTestInstance) {\n  const touchable = instance.find(byClickable());\n  if (touchable.type === Text && touchable.props && touchable.props.onPress) {\n    touchable.props.onPress();\n  } else if (touchable.type === Switch && touchable.props) {\n    const value = !touchable.props.value;\n    const {onChange, onValueChange} = touchable.props;\n    onChange && onChange({nativeEvent: {value}});\n    onValueChange && onValueChange(value);\n  } else if (\n    touchable?.props?.onStartShouldSetResponder?.testOnly_pressabilityConfig\n  ) {\n    const {onPress, disabled} =\n      touchable.props.onStartShouldSetResponder.testOnly_pressabilityConfig();\n    if (!disabled) {\n      onPress({nativeEvent: {}});\n    }\n  } else {\n    // Only tap when props.disabled isn't set (or there aren't any props)\n    if (!touchable.props || !touchable.props.disabled) {\n      touchable.props.onPress({nativeEvent: {}});\n    }\n  }\n}\n\nfunction scrollToBottom(instance: ReactTestInstance) {\n  const list = instance.findByType(VirtualizedList);\n  list.props && list.props.onEndReached();\n}\n\n// To make error messages a little bit better, we attach a custom toString\n// implementation to a predicate\nfunction withMessage(fn: Predicate, message: string): Predicate {\n  (fn: any).toString = () => message;\n  return fn;\n}\n\nexport {byClickable};\nexport {byTestID};\nexport {byTextMatching};\nexport {enter};\nexport {expectNoConsoleWarn};\nexport {expectNoConsoleError};\nexport {expectRendersMatchingSnapshot};\nexport {maximumDepthError};\nexport {maximumDepthOfJSON};\nexport {renderAndEnforceStrictMode};\nexport {renderWithStrictMode};\nexport {scrollToBottom};\nexport {tap};\nexport {withMessage};\n"],"mappings":"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"}