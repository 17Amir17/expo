{"version":3,"names":["_NativePlatformConstantsAndroid","_interopRequireDefault","require","Platform","__constants","OS","Version","constants","NativePlatformConstantsAndroid","getConstants","isTesting","__DEV__","isTV","uiMode","select","spec","android","native","default","module","exports"],"sources":["Platform.android.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport NativePlatformConstantsAndroid from './NativePlatformConstantsAndroid';\n\nexport type PlatformSelectSpec<T> = {\n  android?: T,\n  native?: T,\n  default?: T,\n  ...\n};\n\nconst Platform = {\n  __constants: null,\n  OS: 'android',\n  // $FlowFixMe[unsafe-getters-setters]\n  get Version(): number {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.Version;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get constants(): {|\n    isTesting: boolean,\n    reactNativeVersion: {|\n      major: number,\n      minor: number,\n      patch: number,\n      prerelease: ?number,\n    |},\n    Version: number,\n    Release: string,\n    Serial: string,\n    Fingerprint: string,\n    Model: string,\n    ServerHost?: string,\n    uiMode: string,\n    Brand: string,\n    Manufacturer: string,\n  |} {\n    // $FlowFixMe[object-this-reference]\n    if (this.__constants == null) {\n      // $FlowFixMe[object-this-reference]\n      this.__constants = NativePlatformConstantsAndroid.getConstants();\n    }\n    // $FlowFixMe[object-this-reference]\n    return this.__constants;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTesting(): boolean {\n    if (__DEV__) {\n      // $FlowFixMe[object-this-reference]\n      return this.constants.isTesting;\n    }\n    return false;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTV(): boolean {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.uiMode === 'tv';\n  },\n  select: <T>(spec: PlatformSelectSpec<T>): T =>\n    'android' in spec\n      ? // $FlowFixMe[incompatible-return]\n        spec.android\n      : 'native' in spec\n      ? // $FlowFixMe[incompatible-return]\n        spec.native\n      : // $FlowFixMe[incompatible-return]\n        spec.default,\n};\n\nmodule.exports = Platform;\n"],"mappings":";AAUA,IAAAA,+BAAA,GAAAC,sBAAA,CAAAC,OAAA;AASA,IAAMC,QAAQ,GAAG;EACfC,WAAW,EAAE,IAAI;EACjBC,EAAE,EAAE,SAAS;EAEb,IAAIC,OAAOA,CAAA,EAAW;IAEpB,OAAO,IAAI,CAACC,SAAS,CAACD,OAAO;EAC/B,CAAC;EAED,IAAIC,SAASA,CAAA,EAiBV;IAED,IAAI,IAAI,CAACH,WAAW,IAAI,IAAI,EAAE;MAE5B,IAAI,CAACA,WAAW,GAAGI,uCAA8B,CAACC,YAAY,EAAE;IAClE;IAEA,OAAO,IAAI,CAACL,WAAW;EACzB,CAAC;EAED,IAAIM,SAASA,CAAA,EAAY;IACvB,IAAIC,OAAO,EAAE;MAEX,OAAO,IAAI,CAACJ,SAAS,CAACG,SAAS;IACjC;IACA,OAAO,KAAK;EACd,CAAC;EAED,IAAIE,IAAIA,CAAA,EAAY;IAElB,OAAO,IAAI,CAACL,SAAS,CAACM,MAAM,KAAK,IAAI;EACvC,CAAC;EACDC,MAAM,EAAE,SAAAA,OAAIC,IAA2B;IAAA,OACrC,SAAS,IAAIA,IAAI,GAEbA,IAAI,CAACC,OAAO,GACZ,QAAQ,IAAID,IAAI,GAEhBA,IAAI,CAACE,MAAM,GAEXF,IAAI,CAACG,OAAO;EAAA;AACpB,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGjB,QAAQ"}