{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_Platform","_virtualizedLists","_react","_interopRequireWildcard","_jsxRuntime","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","SectionList","forwardRef","props","ref","propsWithDefaults","assign","stickySectionHeadersEnabled","Platform","OS","wrapperRef","useRef","useImperativeHandle","scrollToLocation","params","_wrapperRef$current","current","recordInteraction","_wrapperRef$current2","_wrapperRef$current2$","getListRef","flashScrollIndicators","_wrapperRef$current3","_wrapperRef$current3$","getScrollResponder","_wrapperRef$current4","_wrapperRef$current4$","getScrollableNode","_wrapperRef$current5","_wrapperRef$current5$","setNativeProps","nativeProps","_wrapperRef$current6","_wrapperRef$current6$","jsx","VirtualizedSectionList","getItemCount","items","length","getItem","index","_default"],"sources":["SectionListModern.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {ScrollResponderType} from '../Components/ScrollView/ScrollView';\nimport type {\n  ScrollToLocationParamsType,\n  SectionBase as _SectionBase,\n  VirtualizedSectionListProps,\n} from '@react-native/virtualized-lists';\nimport type {AbstractComponent, Element, ElementRef} from 'react';\n\nimport Platform from '../Utilities/Platform';\nimport {VirtualizedSectionList} from '@react-native/virtualized-lists';\nimport React, {forwardRef, useImperativeHandle, useRef} from 'react';\n\ntype Item = any;\n\nexport type SectionBase<SectionItemT> = _SectionBase<SectionItemT>;\n\ntype RequiredProps<SectionT: SectionBase<any>> = {|\n  /**\n   * The actual data to render, akin to the `data` prop in [`<FlatList>`](https://reactnative.dev/docs/flatlist).\n   *\n   * General shape:\n   *\n   *     sections: $ReadOnlyArray<{\n   *       data: $ReadOnlyArray<SectionItem>,\n   *       renderItem?: ({item: SectionItem, ...}) => ?React.Element<*>,\n   *       ItemSeparatorComponent?: ?ReactClass<{highlighted: boolean, ...}>,\n   *     }>\n   */\n  sections: $ReadOnlyArray<SectionT>,\n|};\n\ntype OptionalProps<SectionT: SectionBase<any>> = {|\n  /**\n   * Default renderer for every item in every section. Can be over-ridden on a per-section basis.\n   */\n  renderItem?: (info: {\n    item: Item,\n    index: number,\n    section: SectionT,\n    separators: {\n      highlight: () => void,\n      unhighlight: () => void,\n      updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,\n      ...\n    },\n    ...\n  }) => null | Element<any>,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks item.key, then\n   * falls back to using the index, like react does. Note that this sets keys for each item, but\n   * each overall section still needs its own key.\n   */\n  keyExtractor?: ?(item: Item, index: number) => string,\n  /**\n   * Called once when the scroll position gets within `onEndReachedThreshold` of the rendered\n   * content.\n   */\n  onEndReached?: ?(info: {distanceFromEnd: number, ...}) => void,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n|};\n\nexport type Props<SectionT> = {|\n  ...$Diff<\n    VirtualizedSectionListProps<SectionT>,\n    {\n      getItem: $PropertyType<VirtualizedSectionListProps<SectionT>, 'getItem'>,\n      getItemCount: $PropertyType<\n        VirtualizedSectionListProps<SectionT>,\n        'getItemCount',\n      >,\n      renderItem: $PropertyType<\n        VirtualizedSectionListProps<SectionT>,\n        'renderItem',\n      >,\n      keyExtractor: $PropertyType<\n        VirtualizedSectionListProps<SectionT>,\n        'keyExtractor',\n      >,\n      ...\n    },\n  >,\n  ...RequiredProps<SectionT>,\n  ...OptionalProps<SectionT>,\n|};\n\n/**\n * A performant interface for rendering sectioned lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Configurable viewability callbacks.\n *  - List header support.\n *  - List footer support.\n *  - Item separator support.\n *  - Section header support.\n *  - Section separator support.\n *  - Heterogeneous data and item rendering support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *\n * If you don't need section support and want a simpler interface, use\n * [`<FlatList>`](https://reactnative.dev/docs/flatlist).\n *\n * Simple Examples:\n *\n *     <SectionList\n *       renderItem={({item}) => <ListItem title={item} />}\n *       renderSectionHeader={({section}) => <Header title={section.title} />}\n *       sections={[ // homogeneous rendering between sections\n *         {data: [...], title: ...},\n *         {data: [...], title: ...},\n *         {data: [...], title: ...},\n *       ]}\n *     />\n *\n *     <SectionList\n *       sections={[ // heterogeneous rendering between sections\n *         {data: [...], renderItem: ...},\n *         {data: [...], renderItem: ...},\n *         {data: [...], renderItem: ...},\n *       ]}\n *     />\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate and momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n */\nconst SectionList: AbstractComponent<Props<SectionBase<any>>, any> = forwardRef<\n  Props<SectionBase<any>>,\n  any,\n>((props, ref) => {\n  const propsWithDefaults = {\n    stickySectionHeadersEnabled: Platform.OS === 'ios',\n    ...props,\n  };\n\n  const wrapperRef = useRef<?ElementRef<typeof VirtualizedSectionList>>();\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      /**\n       * Scrolls to the item at the specified `sectionIndex` and `itemIndex` (within the section)\n       * positioned in the viewable area such that `viewPosition` 0 places it at the top (and may be\n       * covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle. `viewOffset` is a\n       * fixed number of pixels to offset the final target position, e.g. to compensate for sticky\n       * headers.\n       *\n       * Note: cannot scroll to locations outside the render window without specifying the\n       * `getItemLayout` prop.\n       */\n      scrollToLocation(params: ScrollToLocationParamsType) {\n        wrapperRef.current?.scrollToLocation(params);\n      },\n\n      /**\n       * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n       * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n       * taps on items or by navigation actions.\n       */\n      recordInteraction() {\n        wrapperRef.current?.getListRef()?.recordInteraction();\n      },\n\n      /**\n       * Displays the scroll indicators momentarily.\n       *\n       * @platform ios\n       */\n      flashScrollIndicators() {\n        wrapperRef.current?.getListRef()?.flashScrollIndicators();\n      },\n\n      /**\n       * Provides a handle to the underlying scroll responder.\n       */\n      getScrollResponder(): ?ScrollResponderType {\n        wrapperRef.current?.getListRef()?.getScrollResponder();\n      },\n\n      getScrollableNode(): any {\n        wrapperRef.current?.getListRef()?.getScrollableNode();\n      },\n\n      setNativeProps(nativeProps: Object) {\n        wrapperRef.current?.getListRef()?.setNativeProps(nativeProps);\n      },\n    }),\n    [wrapperRef],\n  );\n\n  return (\n    <VirtualizedSectionList\n      {...propsWithDefaults}\n      ref={wrapperRef}\n      getItemCount={items => items.length}\n      getItem={(items, index) => items[index]}\n    />\n  );\n});\n\nexport default SectionList;\n"],"mappings":"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"}