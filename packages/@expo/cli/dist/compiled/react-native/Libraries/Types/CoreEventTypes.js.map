{"version":3,"names":["React","_interopRequireWildcard","require","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set"],"sources":["CoreEventTypes.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {HostComponent} from '../Renderer/shims/ReactNativeTypes';\n\nimport * as React from 'react';\n\nexport type SyntheticEvent<+T> = $ReadOnly<{|\n  bubbles: ?boolean,\n  cancelable: ?boolean,\n  currentTarget: number | React.ElementRef<HostComponent<mixed>>,\n  defaultPrevented: ?boolean,\n  dispatchConfig: $ReadOnly<{|\n    registrationName: string,\n  |}>,\n  eventPhase: ?number,\n  preventDefault: () => void,\n  isDefaultPrevented: () => boolean,\n  stopPropagation: () => void,\n  isPropagationStopped: () => boolean,\n  isTrusted: ?boolean,\n  nativeEvent: T,\n  persist: () => void,\n  target: ?number | React.ElementRef<HostComponent<mixed>>,\n  timeStamp: number,\n  type: ?string,\n|}>;\n\nexport type ResponderSyntheticEvent<T> = $ReadOnly<{|\n  ...SyntheticEvent<T>,\n  touchHistory: $ReadOnly<{|\n    indexOfSingleActiveTouch: number,\n    mostRecentTimeStamp: number,\n    numberActiveTouches: number,\n    touchBank: $ReadOnlyArray<\n      $ReadOnly<{|\n        touchActive: boolean,\n        startPageX: number,\n        startPageY: number,\n        startTimeStamp: number,\n        currentPageX: number,\n        currentPageY: number,\n        currentTimeStamp: number,\n        previousPageX: number,\n        previousPageY: number,\n        previousTimeStamp: number,\n      |}>,\n    >,\n  |}>,\n|}>;\n\nexport type Layout = $ReadOnly<{|\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n|}>;\n\nexport type TextLayout = $ReadOnly<{|\n  ...Layout,\n  ascender: number,\n  capHeight: number,\n  descender: number,\n  text: string,\n  xHeight: number,\n|}>;\n\nexport type LayoutEvent = SyntheticEvent<\n  $ReadOnly<{|\n    layout: Layout,\n  |}>,\n>;\n\nexport type TextLayoutEvent = SyntheticEvent<\n  $ReadOnly<{|\n    lines: Array<TextLayout>,\n  |}>,\n>;\n\n/**\n * https://developer.mozilla.org/en-US/docs/Web/API/UIEvent\n */\nexport interface NativeUIEvent {\n  /**\n   * Returns a long with details about the event, depending on the event type.\n   */\n  +detail: number;\n}\n\n/**\n * https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n */\nexport interface NativeMouseEvent extends NativeUIEvent {\n  /**\n   * The X coordinate of the mouse pointer in global (screen) coordinates.\n   */\n  +screenX: number;\n  /**\n   * The Y coordinate of the mouse pointer in global (screen) coordinates.\n   */\n  +screenY: number;\n  /**\n   * The X coordinate of the mouse pointer relative to the whole document.\n   */\n  +pageX: number;\n  /**\n   * The Y coordinate of the mouse pointer relative to the whole document.\n   */\n  +pageY: number;\n  /**\n   * The X coordinate of the mouse pointer in local (DOM content) coordinates.\n   */\n  +clientX: number;\n  /**\n   * The Y coordinate of the mouse pointer in local (DOM content) coordinates.\n   */\n  +clientY: number;\n  /**\n   * Alias for NativeMouseEvent.clientX\n   */\n  +x: number;\n  /**\n   * Alias for NativeMouseEvent.clientY\n   */\n  +y: number;\n  /**\n   * Returns true if the control key was down when the mouse event was fired.\n   */\n  +ctrlKey: boolean;\n  /**\n   * Returns true if the shift key was down when the mouse event was fired.\n   */\n  +shiftKey: boolean;\n  /**\n   * Returns true if the alt key was down when the mouse event was fired.\n   */\n  +altKey: boolean;\n  /**\n   * Returns true if the meta key was down when the mouse event was fired.\n   */\n  +metaKey: boolean;\n  /**\n   * The button number that was pressed (if applicable) when the mouse event was fired.\n   */\n  +button: number;\n  /**\n   * The buttons being depressed (if any) when the mouse event was fired.\n   */\n  +buttons: number;\n  /**\n   * The secondary target for the event, if there is one.\n   */\n  +relatedTarget: null | number | React.ElementRef<HostComponent<mixed>>;\n  // offset is proposed: https://drafts.csswg.org/cssom-view/#extensions-to-the-mouseevent-interface\n  /**\n   * The X coordinate of the mouse pointer between that event and the padding edge of the target node\n   */\n  +offsetX: number;\n  /**\n   * The Y coordinate of the mouse pointer between that event and the padding edge of the target node\n   */\n  +offsetY: number;\n}\n\n/**\n * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent\n */\nexport interface NativePointerEvent extends NativeMouseEvent {\n  /**\n   * A unique identifier for the pointer causing the event.\n   */\n  +pointerId: number;\n  /**\n   * The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer\n   */\n  +width: number;\n  /**\n   * The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer.\n   */\n  +height: number;\n  /**\n   * The normalized pressure of the pointer input in the range 0 to 1, where 0 and 1 represent\n   * the minimum and maximum pressure the hardware is capable of detecting, respectively.\n   */\n  +pressure: number;\n  /**\n   * The normalized tangential pressure of the pointer input (also known as barrel pressure or\n   * cylinder stress) in the range -1 to 1, where 0 is the neutral position of the control.\n   */\n  +tangentialPressure: number;\n  /**\n   * The plane angle (in degrees, in the range of -90 to 90) between the Y–Z plane and the plane\n   * containing both the pointer (e.g. pen stylus) axis and the Y axis.\n   */\n  +tiltX: number;\n  /**\n   * The plane angle (in degrees, in the range of -90 to 90) between the X–Z plane and the plane\n   * containing both the pointer (e.g. pen stylus) axis and the X axis.\n   */\n  +tiltY: number;\n  /**\n   * The clockwise rotation of the pointer (e.g. pen stylus) around its major axis in degrees,\n   * with a value in the range 0 to 359.\n   */\n  +twist: number;\n  /**\n   * Indicates the device type that caused the event (mouse, pen, touch, etc.)\n   */\n  +pointerType: string;\n  /**\n   * Indicates if the pointer represents the primary pointer of this pointer type.\n   */\n  +isPrimary: boolean;\n}\n\nexport type PointerEvent = SyntheticEvent<NativePointerEvent>;\n\nexport type PressEvent = ResponderSyntheticEvent<\n  $ReadOnly<{|\n    changedTouches: $ReadOnlyArray<$PropertyType<PressEvent, 'nativeEvent'>>,\n    force?: number,\n    identifier: number,\n    locationX: number,\n    locationY: number,\n    pageX: number,\n    pageY: number,\n    target: ?number,\n    timestamp: number,\n    touches: $ReadOnlyArray<$PropertyType<PressEvent, 'nativeEvent'>>,\n  |}>,\n>;\n\nexport type ScrollEvent = SyntheticEvent<\n  $ReadOnly<{|\n    contentInset: $ReadOnly<{|\n      bottom: number,\n      left: number,\n      right: number,\n      top: number,\n    |}>,\n    contentOffset: $ReadOnly<{|\n      y: number,\n      x: number,\n    |}>,\n    contentSize: $ReadOnly<{|\n      height: number,\n      width: number,\n    |}>,\n    layoutMeasurement: $ReadOnly<{|\n      height: number,\n      width: number,\n    |}>,\n    targetContentOffset?: $ReadOnly<{|\n      y: number,\n      x: number,\n    |}>,\n    velocity?: $ReadOnly<{|\n      y: number,\n      x: number,\n    |}>,\n    zoomScale?: number,\n    responderIgnoreScroll?: boolean,\n  |}>,\n>;\n\nexport type BlurEvent = SyntheticEvent<\n  $ReadOnly<{|\n    target: number,\n  |}>,\n>;\n\nexport type FocusEvent = SyntheticEvent<\n  $ReadOnly<{|\n    target: number,\n  |}>,\n>;\n\nexport type MouseEvent = SyntheticEvent<\n  $ReadOnly<{|\n    clientX: number,\n    clientY: number,\n    pageX: number,\n    pageY: number,\n    timestamp: number,\n  |}>,\n>;\n"],"mappings":"AAYA,IAAAA,KAAA,GAAAC,uBAAA,CAAAC,OAAA;AAA+B,SAAAC,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAH,wBAAAO,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA,4BAAAE,OAAA,EAAAF,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,CAAAJ,OAAA,GAAAF,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA"}