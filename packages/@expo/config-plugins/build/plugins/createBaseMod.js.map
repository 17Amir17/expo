{"version":3,"file":"createBaseMod.js","names":["_debug","data","_interopRequireDefault","require","_path","_withMod","obj","__esModule","default","debug","Debug","createBaseMod","methodName","platform","modName","getFilePath","read","write","isIntrospective","withUnknown","config","_props","_props$skipEmptyMod","_props$saveToInternal","props","withBaseMod","mod","skipEmptyMod","saveToInternal","isProvider","action","modRequest","nextMod","templateProjectRoot","results","filePath","inputFilePath","platformProjectRoot","path","join","projectRoot","modResults","assertModResults","error","message","Object","defineProperty","value","platformName","ensuredResults","mods","Error","JSON","stringify","upperFirst","name","charAt","toUpperCase","slice","createPlatformBaseMod","provider","withGeneratedBaseMods","providers","entries","reduce","baseMod"],"sources":["../../src/plugins/createBaseMod.ts"],"sourcesContent":["import Debug from 'debug';\nimport path from 'path';\n\nimport {\n  ConfigPlugin,\n  ExportedConfig,\n  ExportedConfigWithProps,\n  ModPlatform,\n} from '../Plugin.types';\nimport { BaseModOptions, withBaseMod } from './withMod';\n\nconst debug = Debug('expo:config-plugins:base-mods');\n\nexport type ForwardedBaseModOptions = Partial<\n  Pick<BaseModOptions, 'saveToInternal' | 'skipEmptyMod'>\n>;\n\nexport type BaseModProviderMethods<\n  ModType,\n  Props extends ForwardedBaseModOptions = ForwardedBaseModOptions\n> = {\n  getFilePath: (config: ExportedConfigWithProps<ModType>, props: Props) => Promise<string> | string;\n  read: (\n    filePath: string,\n    config: ExportedConfigWithProps<ModType>,\n    props: Props\n  ) => Promise<ModType> | ModType;\n  write: (\n    filePath: string,\n    config: ExportedConfigWithProps<ModType>,\n    props: Props\n  ) => Promise<void> | void;\n  /**\n   * If the mod supports introspection, and avoids making any filesystem modifications during compilation.\n   * By enabling, this mod, and all of its descendants will be run in introspection mode.\n   * This should only be used for static files like JSON or XML, and not for application files that require regexes,\n   * or complex static files that require other files to be generated like Xcode `.pbxproj`.\n   */\n  isIntrospective?: boolean;\n};\n\nexport type CreateBaseModProps<\n  ModType,\n  Props extends ForwardedBaseModOptions = ForwardedBaseModOptions\n> = {\n  methodName: string;\n  platform: ModPlatform;\n  modName: string;\n} & BaseModProviderMethods<ModType, Props>;\n\nexport function createBaseMod<\n  ModType,\n  Props extends ForwardedBaseModOptions = ForwardedBaseModOptions\n>({\n  methodName,\n  platform,\n  modName,\n  getFilePath,\n  read,\n  write,\n  isIntrospective,\n}: CreateBaseModProps<ModType, Props>): ConfigPlugin<Props | void> {\n  const withUnknown: ConfigPlugin<Props | void> = (config, _props) => {\n    const props = _props || ({} as Props);\n    return withBaseMod<ModType>(config, {\n      platform,\n      mod: modName,\n      skipEmptyMod: props.skipEmptyMod ?? true,\n      saveToInternal: props.saveToInternal ?? false,\n      isProvider: true,\n      isIntrospective,\n      async action({ modRequest: { nextMod, templateProjectRoot, ...modRequest }, ...config }) {\n        try {\n          let results: ExportedConfigWithProps<ModType> = {\n            ...config,\n            modRequest,\n          };\n\n          const filePath = await getFilePath(results, props);\n          let inputFilePath = filePath;\n\n          // Change the input file path for resetting the provider.\n          if (templateProjectRoot) {\n            inputFilePath = await getFilePath(\n              {\n                ...results,\n                modRequest: {\n                  ...results.modRequest,\n                  // Calculate new paths relative to the replacement template root.\n                  platformProjectRoot: path.join(templateProjectRoot, results.modRequest.platform),\n                  projectRoot: templateProjectRoot,\n                },\n              },\n              props\n            );\n          }\n\n          if (inputFilePath === filePath) {\n            debug(`mods.${platform}.${modName}: file path: ${filePath || '[skipped]'}`);\n          } else {\n            debug(`mods.${platform}.${modName}: file path input: ${inputFilePath || '[skipped]'}`);\n            debug(`mods.${platform}.${modName}: file path output: ${filePath || '[skipped]'}`);\n          }\n\n          const modResults = await read(inputFilePath, results, props);\n\n          results = await nextMod!({\n            ...results,\n            modResults,\n            modRequest,\n          });\n\n          assertModResults(results, modRequest.platform, modRequest.modName);\n\n          await write(filePath, results, props);\n          return results;\n        } catch (error: any) {\n          error.message = `[${platform}.${modName}]: ${methodName}: ${error.message}`;\n          throw error;\n        }\n      },\n    });\n  };\n\n  if (methodName) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: methodName,\n    });\n  }\n\n  return withUnknown;\n}\n\nexport function assertModResults(results: any, platformName: string, modName: string) {\n  // If the results came from a mod, they'd be in the form of [config, data].\n  // Ensure the results are an array and omit the data since it should've been written by a data provider plugin.\n  const ensuredResults = results;\n\n  // Sanity check to help locate non compliant mods.\n  if (!ensuredResults || typeof ensuredResults !== 'object' || !ensuredResults?.mods) {\n    throw new Error(\n      `Mod \\`mods.${platformName}.${modName}\\` evaluated to an object that is not a valid project config. Instead got: ${JSON.stringify(\n        ensuredResults\n      )}`\n    );\n  }\n  return ensuredResults;\n}\n\nfunction upperFirst(name: string): string {\n  return name.charAt(0).toUpperCase() + name.slice(1);\n}\n\nexport function createPlatformBaseMod<\n  ModType,\n  Props extends ForwardedBaseModOptions = ForwardedBaseModOptions\n>({ modName, ...props }: Omit<CreateBaseModProps<ModType, Props>, 'methodName'>) {\n  // Generate the function name to ensure it's uniform and also to improve stack traces.\n  const methodName = `with${upperFirst(props.platform)}${upperFirst(modName)}BaseMod`;\n  return createBaseMod<ModType, Props>({\n    methodName,\n    modName,\n    ...props,\n  });\n}\n\n/** A TS wrapper for creating provides */\nexport function provider<ModType, Props extends ForwardedBaseModOptions = ForwardedBaseModOptions>(\n  props: BaseModProviderMethods<ModType, Props>\n) {\n  return props;\n}\n\n/** Plugin to create and append base mods from file providers */\nexport function withGeneratedBaseMods<ModName extends string>(\n  config: ExportedConfig,\n  {\n    platform,\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & {\n    /** Officially supports `'ios' | 'android'` (`ModPlatform`). Arbitrary strings are supported for adding out-of-tree platforms. */\n    platform: ModPlatform & string;\n    providers: Partial<Record<ModName, BaseModProviderMethods<any, any>>>;\n  }\n): ExportedConfig {\n  return Object.entries(providers).reduce((config, [modName, value]) => {\n    const baseMod = createPlatformBaseMod({\n      platform,\n      modName,\n      ...(value as any),\n    });\n    return baseMod(config, props);\n  }, config);\n}\n"],"mappings":"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"}