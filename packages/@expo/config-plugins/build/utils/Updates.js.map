{"version":3,"file":"Updates.js","names":["Fingerprint","data","_interopRequireWildcard","require","_plist","_interopRequireDefault","_sdkRuntimeVersions","_fs","_getenv","_path","_resolveFrom","_semver","_","_android","_Manifest","_Updates","_withAndroidBaseMods","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","getExpoUpdatesPackageVersion","projectRoot","expoUpdatesPackageJsonPath","resolveFrom","silent","fs","existsSync","packageJson","JSON","parse","readFileSync","version","getUpdateUrl","config","_config$updates$url","_config$updates","updates","url","getAppVersion","_config$version","getNativeVersion","platform","IOSConfig","Version","getVersion","buildNumber","getBuildNumber","versionCode","AndroidConfig","getVersionCode","Error","getRuntimeVersionNullableAsync","getRuntimeVersionAsync","boolish","console","log","_config$platform$runt","_config$platform","runtimeVersion","policy","sdkVersion","getRuntimeVersionForSDKVersion","warn","createProjectHashAsync","preHashTransformer","shouldTransformFileAtPath","filePath","includes","androidManifestPathFromPlatformProjectRoot","path","join","transformFileContentsToBeHashed","contents","fileContentsString","toString","androidManifest","Manifest","readAndroidManifestFromStringAsync","mainApplication","getMainApplicationOrThrow","removeMetaDataItemFromMainApplication","Config","RUNTIME_VERSION","Buffer","from","XML","format","expoPlist","plist","build","ignorePaths","stringify","getSDKVersion","getUpdatesEnabled","_config$updates2","enabled","undefined","getUpdatesTimeout","_config$updates$fallb","_config$updates3","fallbackToCacheTimeout","getUpdatesCheckOnLaunch","expoUpdatesPackageVersion","_config$updates4","_config$updates5","_config$updates6","_config$updates7","checkAutomatically","semver","gte","getUpdatesCodeSigningCertificate","_config$updates8","codeSigningCertificatePath","codeSigningCertificate","finalPath","getUpdatesCodeSigningMetadata","_config$updates9","codeSigningMetadata","getUpdatesCodeSigningMetadataStringified","metadata","getUpdatesRequestHeaders","_config$updates10","requestHeaders","getUpdatesRequestHeadersStringified"],"sources":["../../src/utils/Updates.ts"],"sourcesContent":["import { Android, ExpoConfig, IOS } from '@expo/config-types';\nimport * as Fingerprint from '@expo/fingerprint';\nimport { JSONObject } from '@expo/json-file';\nimport plist from '@expo/plist';\nimport { getRuntimeVersionForSDKVersion } from '@expo/sdk-runtime-versions';\nimport fs from 'fs';\nimport { boolish } from 'getenv';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport { AndroidConfig, IOSConfig, XML } from '..';\nimport { Manifest } from '../android';\nimport {\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} from '../android/Manifest';\nimport { Config } from '../ios/Updates';\nimport { androidManifestPathFromPlatformProjectRoot } from '../plugins/withAndroidBaseMods';\n\nexport type ExpoConfigUpdates = Pick<\n  ExpoConfig,\n  'sdkVersion' | 'owner' | 'runtimeVersion' | 'updates' | 'slug'\n>;\n\nexport function getExpoUpdatesPackageVersion(projectRoot: string): string | null {\n  const expoUpdatesPackageJsonPath = resolveFrom.silent(projectRoot, 'expo-updates/package.json');\n  if (!expoUpdatesPackageJsonPath || !fs.existsSync(expoUpdatesPackageJsonPath)) {\n    return null;\n  }\n  const packageJson = JSON.parse(fs.readFileSync(expoUpdatesPackageJsonPath, 'utf8'));\n  return packageJson.version;\n}\n\nexport function getUpdateUrl(config: Pick<ExpoConfigUpdates, 'updates'>): string | null {\n  return config.updates?.url ?? null;\n}\n\nexport function getAppVersion(config: Pick<ExpoConfig, 'version'>): string {\n  return config.version ?? '1.0.0';\n}\n\nexport function getNativeVersion(\n  config: Pick<ExpoConfig, 'version'> & {\n    android?: Pick<Android, 'versionCode'>;\n    ios?: Pick<IOS, 'buildNumber'>;\n  },\n  platform: 'android' | 'ios'\n): string {\n  const version = IOSConfig.Version.getVersion(config);\n  switch (platform) {\n    case 'ios': {\n      const buildNumber = IOSConfig.Version.getBuildNumber(config);\n      return `${version}(${buildNumber})`;\n    }\n    case 'android': {\n      const versionCode = AndroidConfig.Version.getVersionCode(config);\n      return `${version}(${versionCode})`;\n    }\n    default: {\n      throw new Error(\n        `\"${platform}\" is not a supported platform. Choose either \"ios\" or \"android\".`\n      );\n    }\n  }\n}\n\nexport async function getRuntimeVersionNullableAsync(\n  ...[projectRoot, config, platform]: Parameters<typeof getRuntimeVersionAsync>\n): Promise<string | null> {\n  try {\n    return await getRuntimeVersionAsync(projectRoot, config, platform);\n  } catch (e) {\n    if (boolish('EXPO_DEBUG', false)) {\n      console.log(e);\n    }\n    return null;\n  }\n}\n\nexport async function getRuntimeVersionAsync(\n  projectRoot: string,\n  config: Pick<ExpoConfig, 'version' | 'runtimeVersion' | 'sdkVersion'> & {\n    android?: Pick<Android, 'versionCode' | 'runtimeVersion'>;\n    ios?: Pick<IOS, 'buildNumber' | 'runtimeVersion'>;\n  },\n  platform: 'android' | 'ios'\n): Promise<string | null> {\n  const runtimeVersion = config[platform]?.runtimeVersion ?? config.runtimeVersion;\n  if (!runtimeVersion) {\n    return null;\n  }\n\n  if (typeof runtimeVersion === 'string') {\n    return runtimeVersion;\n  } else if (runtimeVersion.policy === 'appVersion') {\n    return getAppVersion(config);\n  } else if (runtimeVersion.policy === 'nativeVersion') {\n    return getNativeVersion(config, platform);\n  } else if (runtimeVersion.policy === 'sdkVersion') {\n    if (!config.sdkVersion) {\n      throw new Error(\"An SDK version must be defined when using the 'sdkVersion' runtime policy.\");\n    }\n    return getRuntimeVersionForSDKVersion(config.sdkVersion);\n  } else if (runtimeVersion.policy === 'fingerprintNativeExperimental') {\n    // need to pre-hash transform both ios and android files that have the fingerprint in them\n    // in order to generate a stable fingerprint (otherwise we'd be fingerprinting the last-generated fingerprint)\n    console.warn(\n      \"Use of the experimental 'fingerprintNativeExperimental' runtime policy may result in unexpected system behavior.\"\n    );\n    return await Fingerprint.createProjectHashAsync(projectRoot, {\n      preHashTransformer: {\n        shouldTransformFileAtPath: (filePath: string): boolean => {\n          // we need to nullify the runtime version (fingerprint) in AndroidManifest.xml\n          if (filePath.includes(androidManifestPathFromPlatformProjectRoot)) {\n            return true;\n          }\n\n          // we need to nullify the runtime version (fingerprint) in Expo.plist\n          if (filePath.includes(path.join('Supporting', 'Expo.plist'))) {\n            return true;\n          }\n\n          return false;\n        },\n        transformFileContentsToBeHashed: async (\n          filePath: string,\n          contents: Buffer\n        ): Promise<Buffer> => {\n          const fileContentsString = contents.toString();\n          if (filePath.includes(androidManifestPathFromPlatformProjectRoot)) {\n            const androidManifest =\n              await Manifest.readAndroidManifestFromStringAsync(fileContentsString);\n            const mainApplication = getMainApplicationOrThrow(androidManifest);\n            removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n            return Buffer.from(XML.format(androidManifest));\n          }\n\n          if (filePath.includes(path.join('Supporting', 'Expo.plist'))) {\n            const expoPlist: JSONObject = plist.parse(fileContentsString);\n            delete expoPlist[Config.RUNTIME_VERSION];\n            return Buffer.from(plist.build(expoPlist));\n          }\n\n          throw new Error(\n            'Unhandled transform request. This should not happen due to shouldTransformFileAtPath.'\n          );\n        },\n      },\n    });\n  } else if (runtimeVersion.policy === 'fingerprintNonNativeExperimental') {\n    console.warn(\n      \"Use of the experimental 'fingerprintNonNativeExperimental' runtime policy may result in unexpected system behavior.\"\n    );\n    // ignore everything in native directories to ensure fingerprint is the same no matter whether project has been prebuilt\n    return await Fingerprint.createProjectHashAsync(projectRoot, {\n      ignorePaths: ['/android/**/*', '/ios/**/*'],\n    });\n  }\n\n  throw new Error(\n    `\"${\n      typeof runtimeVersion === 'object' ? JSON.stringify(runtimeVersion) : runtimeVersion\n    }\" is not a valid runtime version. getRuntimeVersionAsync only supports a string, \"sdkVersion\", \"appVersion\", \"nativeVersion\" or \"fingerprintExperimental\" policy.`\n  );\n}\n\nexport function getSDKVersion(config: Pick<ExpoConfigUpdates, 'sdkVersion'>): string | null {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(config: Pick<ExpoConfigUpdates, 'updates'>): boolean {\n  // allow override of enabled property\n  if (config.updates?.enabled !== undefined) {\n    return config.updates.enabled;\n  }\n\n  return getUpdateUrl(config) !== null;\n}\n\nexport function getUpdatesTimeout(config: Pick<ExpoConfigUpdates, 'updates'>): number {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(\n  config: Pick<ExpoConfigUpdates, 'updates'>,\n  expoUpdatesPackageVersion?: string | null\n): 'NEVER' | 'ERROR_RECOVERY_ONLY' | 'ALWAYS' | 'WIFI_ONLY' {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    // native 'ERROR_RECOVERY_ONLY' option was only introduced in 0.11.x\n    if (expoUpdatesPackageVersion && semver.gte(expoUpdatesPackageVersion, '0.11.0')) {\n      return 'ERROR_RECOVERY_ONLY';\n    }\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  } else if (config.updates?.checkAutomatically === 'WIFI_ONLY') {\n    return 'WIFI_ONLY';\n  } else if (config.updates?.checkAutomatically === 'NEVER') {\n    return 'NEVER';\n  }\n  return 'ALWAYS';\n}\n\nexport function getUpdatesCodeSigningCertificate(\n  projectRoot: string,\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): string | undefined {\n  const codeSigningCertificatePath = config.updates?.codeSigningCertificate;\n  if (!codeSigningCertificatePath) {\n    return undefined;\n  }\n\n  const finalPath = path.join(projectRoot, codeSigningCertificatePath);\n  if (!fs.existsSync(finalPath)) {\n    throw new Error(`File not found at \\`updates.codeSigningCertificate\\` path: ${finalPath}`);\n  }\n\n  return fs.readFileSync(finalPath, 'utf8');\n}\n\nexport function getUpdatesCodeSigningMetadata(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): NonNullable<ExpoConfigUpdates['updates']>['codeSigningMetadata'] {\n  return config.updates?.codeSigningMetadata;\n}\n\nexport function getUpdatesCodeSigningMetadataStringified(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): string | undefined {\n  const metadata = getUpdatesCodeSigningMetadata(config);\n  if (!metadata) {\n    return undefined;\n  }\n\n  return JSON.stringify(metadata);\n}\n\nexport function getUpdatesRequestHeaders(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): NonNullable<ExpoConfigUpdates['updates']>['requestHeaders'] {\n  return config.updates?.requestHeaders;\n}\n\nexport function getUpdatesRequestHeadersStringified(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): string | undefined {\n  const metadata = getUpdatesRequestHeaders(config);\n  if (!metadata) {\n    return undefined;\n  }\n\n  return JSON.stringify(metadata);\n}\n"],"mappings":"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"}