{"version":3,"file":"ImageWrapper.js","sourceRoot":"","sources":["../../src/web/ImageWrapper.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, Ref, useMemo } from 'react';\n\nimport ColorTintFilter, { getTintColorStyle } from './ColorTintFilter';\nimport { ImageWrapperProps } from './ImageWrapper.types';\nimport { getImageWrapperEventHandler } from './getImageWrapperEventHandler';\nimport { absoluteFilledPosition, getObjectPositionFromContentPositionObject } from './positioning';\nimport { SrcSetSource } from './useSourceSelection';\nimport { ImageNativeProps, ImageSource } from '../Image.types';\nimport { useBlurhash } from '../utils/blurhash/useBlurhash';\nimport { isThumbhashString } from '../utils/resolveSources';\nimport { thumbHashStringToDataURL } from '../utils/thumbhash/thumbhash';\n\nfunction getFetchPriorityFromImagePriority(priority: ImageNativeProps['priority'] = 'normal') {\n  return priority && ['low', 'high'].includes(priority) ? priority : 'auto';\n}\n\nfunction getImgPropsFromSource(source: ImageSource | SrcSetSource | null | undefined) {\n  if (source && 'srcset' in source) {\n    return {\n      srcSet: source.srcset,\n      sizes: source.sizes,\n    };\n  }\n  return {};\n}\n\nfunction useThumbhash(source: ImageSource | null | undefined) {\n  const isThumbhash = isThumbhashString(source?.uri || '');\n  const strippedThumbhashString = source?.uri?.replace(/thumbhash:\\//, '') ?? '';\n  const thumbhashSource = useMemo(\n    () => (isThumbhash ? { uri: thumbHashStringToDataURL(strippedThumbhashString) } : null),\n    [strippedThumbhashString, isThumbhash]\n  );\n  return thumbhashSource;\n}\n\nfunction useImageHashes(source: ImageSource | null | undefined) {\n  const thumbhash = useThumbhash(source);\n  const blurhash = useBlurhash(source);\n  return useMemo(\n    () => ({\n      resolvedSource: blurhash ?? thumbhash ?? source,\n      isImageHash: !!blurhash || !!thumbhash,\n    }),\n    [blurhash, thumbhash]\n  );\n}\n\nfunction useCaching(source: ImageSource | null | undefined) {}\n\nconst ImageWrapper = React.forwardRef(\n  (\n    {\n      source,\n      events,\n      contentPosition,\n      hashPlaceholderContentPosition,\n      priority,\n      style,\n      hashPlaceholderStyle,\n      tintColor,\n      className,\n      accessibilityLabel,\n      ...props\n    }: ImageWrapperProps,\n    ref: Ref<HTMLImageElement>\n  ) => {\n    useEffect(() => {\n      events?.onMount?.forEach((e) => e?.());\n    }, []);\n\n    // Thumbhash uri always has to start with 'thumbhash:/'\n    const { resolvedSource, isImageHash } = useImageHashes(source);\n\n    const objectPosition = getObjectPositionFromContentPositionObject(\n      isImageHash ? hashPlaceholderContentPosition : contentPosition\n    );\n\n    useCaching(resolvedSource);\n\n    if (!resolvedSource) {\n      return null;\n    }\n    return (\n      <>\n        <ColorTintFilter tintColor={tintColor} />\n        <img\n          ref={ref}\n          alt={accessibilityLabel}\n          className={className}\n          src={resolvedSource?.uri || undefined}\n          key={source?.uri}\n          style={{\n            objectPosition,\n            ...absoluteFilledPosition,\n            ...getTintColorStyle(tintColor),\n            ...(isImageHash ? hashPlaceholderStyle : {}),\n            ...style,\n          }}\n          // @ts-ignore\n          // eslint-disable-next-line react/no-unknown-property\n          fetchpriority={getFetchPriorityFromImagePriority(priority || 'normal')}\n          {...getImageWrapperEventHandler(events, resolvedSource)}\n          {...getImgPropsFromSource(source)}\n          {...props}\n        />\n      </>\n    );\n  }\n);\n\nexport default ImageWrapper;\n"]}