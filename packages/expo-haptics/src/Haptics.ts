// @needsAudit
/**
 * The type of notification feedback generated by a UINotificationFeedbackGenerator object.
 * [`UINotificationFeedbackType`](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype)
 */
export enum NotificationFeedbackType {
  /**
   * A notification feedback type indicating that a task has completed successfully.
   */
  Success = 'success',
  /**
   * A notification feedback type indicating that a task has produced a warning.
   */
  Warning = 'warning',
  /**
   * A notification feedback type indicating that a task has failed.
   */
  Error = 'error',
}

// @needsAudit
/**
 * The mass of the objects in the collision simulated by a UIImpactFeedbackGenerator object
 * [`UINotificationFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle)
 */
export enum ImpactFeedbackStyle {
  /**
   * A collision between small, light user interface elements.
   */
  Light = 'light',
  /**
   * A collision between moderately sized user interface elements.
   */
  Medium = 'medium',
  /**
   * A collision between large, heavy user interface elements.
   */
  Heavy = 'heavy',
}

// TODO: Generate types from the native module.
const ExpoHaptics = globalThis.expo?.modules.ExpoHaptics as Partial<{
  notificationAsync(type?: NotificationFeedbackType): Promise<void>;
  impactAsync(style?: ImpactFeedbackStyle): Promise<void>;
  selectionAsync(): Promise<void>;
}>;

// @needsAudit
/**
 * Triggers notification feedback on native. This function is `undefined` on web.
 *
 * @param type A notification feedback type that on iOS is directly mapped to [UINotificationFeedbackType](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype),
 * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).
 * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.
 * @return A `Promise` which fulfils once native size haptics functionality is triggered.
 */
export const notificationAsync = ExpoHaptics.notificationAsync;

// @needsAudit
/**
 * Triggers impact feedback on native. This function is `undefined` on web.
 *
 * @param style A collision indicator that on iOS is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle),
 * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).
 * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy}`.
 * @return A `Promise` which fulfils once native size haptics functionality is triggered.
 */
export const impactAsync = ExpoHaptics.impactAsync;

// @needsAudit
/**
 * Triggers selection feedback on native. This function is `undefined` on web.
 *
 * Used to let a user know when a selection change has been registered.
 * @return A `Promise` which fulfils once native size haptics functionality is triggered.
 */
export const selectionAsync = ExpoHaptics.selectionAsync;
