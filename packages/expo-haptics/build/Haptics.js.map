{"version":3,"file":"Haptics.js","sourceRoot":"","sources":["../src/Haptics.ts"],"names":[],"mappings":"AAAA,cAAc;AACd;;;GAGG;AACH,MAAM,CAAN,IAAY,wBAaX;AAbD,WAAY,wBAAwB;IAClC;;OAEG;IACH,+CAAmB,CAAA;IACnB;;OAEG;IACH,+CAAmB,CAAA;IACnB;;OAEG;IACH,2CAAe,CAAA;AACjB,CAAC,EAbW,wBAAwB,KAAxB,wBAAwB,QAanC;AAED,cAAc;AACd;;;GAGG;AACH,MAAM,CAAN,IAAY,mBAaX;AAbD,WAAY,mBAAmB;IAC7B;;OAEG;IACH,sCAAe,CAAA;IACf;;OAEG;IACH,wCAAiB,CAAA;IACjB;;OAEG;IACH,sCAAe,CAAA;AACjB,CAAC,EAbW,mBAAmB,KAAnB,mBAAmB,QAa9B;AAED,+CAA+C;AAC/C,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,WAI3C,CAAC;AAEH,cAAc;AACd;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,CAAC;AAE/D,cAAc;AACd;;;;;GAKG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC;AAEnD,cAAc;AACd;;;GAGG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC","sourcesContent":["// @needsAudit\n/**\n * The type of notification feedback generated by a UINotificationFeedbackGenerator object.\n * [`UINotificationFeedbackType`](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype)\n */\nexport enum NotificationFeedbackType {\n  /**\n   * A notification feedback type indicating that a task has completed successfully.\n   */\n  Success = 'success',\n  /**\n   * A notification feedback type indicating that a task has produced a warning.\n   */\n  Warning = 'warning',\n  /**\n   * A notification feedback type indicating that a task has failed.\n   */\n  Error = 'error',\n}\n\n// @needsAudit\n/**\n * The mass of the objects in the collision simulated by a UIImpactFeedbackGenerator object\n * [`UINotificationFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle)\n */\nexport enum ImpactFeedbackStyle {\n  /**\n   * A collision between small, light user interface elements.\n   */\n  Light = 'light',\n  /**\n   * A collision between moderately sized user interface elements.\n   */\n  Medium = 'medium',\n  /**\n   * A collision between large, heavy user interface elements.\n   */\n  Heavy = 'heavy',\n}\n\n// TODO: Generate types from the native module.\nconst ExpoHaptics = globalThis.expo?.modules.ExpoHaptics as Partial<{\n  notificationAsync(type?: NotificationFeedbackType): Promise<void>;\n  impactAsync(style?: ImpactFeedbackStyle): Promise<void>;\n  selectionAsync(): Promise<void>;\n}>;\n\n// @needsAudit\n/**\n * The kind of notification response used in the feedback.\n * @param type A notification feedback type that on iOS is directly mapped to [UINotificationFeedbackType](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport const notificationAsync = ExpoHaptics.notificationAsync;\n\n// @needsAudit\n/**\n * @param style A collision indicator that on iOS is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport const impactAsync = ExpoHaptics.impactAsync;\n\n// @needsAudit\n/**\n * Used to let a user know when a selection change has been registered.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport const selectionAsync = ExpoHaptics.selectionAsync;\n"]}