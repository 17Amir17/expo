// @needsAudit
/**
 * The type of notification feedback generated by a UINotificationFeedbackGenerator object.
 * [`UINotificationFeedbackType`](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype)
 */
export var NotificationFeedbackType;
(function (NotificationFeedbackType) {
    /**
     * A notification feedback type indicating that a task has completed successfully.
     */
    NotificationFeedbackType["Success"] = "success";
    /**
     * A notification feedback type indicating that a task has produced a warning.
     */
    NotificationFeedbackType["Warning"] = "warning";
    /**
     * A notification feedback type indicating that a task has failed.
     */
    NotificationFeedbackType["Error"] = "error";
})(NotificationFeedbackType || (NotificationFeedbackType = {}));
// @needsAudit
/**
 * The mass of the objects in the collision simulated by a UIImpactFeedbackGenerator object
 * [`UINotificationFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle)
 */
export var ImpactFeedbackStyle;
(function (ImpactFeedbackStyle) {
    /**
     * A collision between small, light user interface elements.
     */
    ImpactFeedbackStyle["Light"] = "light";
    /**
     * A collision between moderately sized user interface elements.
     */
    ImpactFeedbackStyle["Medium"] = "medium";
    /**
     * A collision between large, heavy user interface elements.
     */
    ImpactFeedbackStyle["Heavy"] = "heavy";
})(ImpactFeedbackStyle || (ImpactFeedbackStyle = {}));
// TODO: Generate types from the native module.
const ExpoHaptics = globalThis.expo?.modules.ExpoHaptics;
// @needsAudit
/**
 * The kind of notification response used in the feedback.
 * @param type A notification feedback type that on iOS is directly mapped to [UINotificationFeedbackType](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype),
 * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).
 * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.
 * @return A `Promise` which fulfils once native size haptics functionality is triggered.
 */
export const notificationAsync = ExpoHaptics.notificationAsync;
// @needsAudit
/**
 * @param style A collision indicator that on iOS is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle),
 * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).
 * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy}`.
 * @return A `Promise` which fulfils once native size haptics functionality is triggered.
 */
export const impactAsync = ExpoHaptics.impactAsync;
// @needsAudit
/**
 * Used to let a user know when a selection change has been registered.
 * @return A `Promise` which fulfils once native size haptics functionality is triggered.
 */
export const selectionAsync = ExpoHaptics.selectionAsync;
//# sourceMappingURL=Haptics.js.map