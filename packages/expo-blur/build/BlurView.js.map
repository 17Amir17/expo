{"version":3,"file":"BlurView.js","sourceRoot":"","sources":["../src/BlurView.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,MAAM,mBAAmB,CAAC;AAC7D,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,cAAc,CAAC;AAGhD,OAAO,wBAAwB,MAAM,4BAA4B,CAAC;AAClE,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAE5C,MAAM,cAAc,GAAG,wBAAwB,CAAC,cAAc,CAAC,CAAC;AAEhE,yEAAyE;AACzE,0DAA0D;AAC1D,gFAAgF;AAChF,6EAA6E;AAC7E,MAAM,UAAU,GAAG,wBAAwB,EAAE,CAAC;AAC9C,MAAM,sBAAsB,GAAG,UAAU,EAAE,OAAO,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;AAE3F,SAAS,UAAU,CAAC,EAClB,IAAI,GAAG,SAAS,EAChB,SAAS,GAAG,EAAE,EACd,mBAAmB,GAAG,CAAC,EACvB,KAAK,EACL,QAAQ,EACR,GAAG,KAAK,EACM;IACd,MAAM,sBAAsB,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;IAExD,IAAI,sBAAsB,IAAI,UAAU,KAAK,SAAS,EAAE;QACtD,OAAO,CAAC,IAAI,CACV,oHAAoH;YAClH,kEAAkE,CACrE,CAAC;KACH;IAED,MAAM,aAAa,GACjB,sBAAsB,IAAI,sBAAsB,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,cAAc,CAAC;IAE7F,MAAM,aAAa,GACjB,sBAAsB;QACtB,UAAU,KAAK,SAAS;QACxB,iDAAiD;QACjD,sDAAsD;QACtD,UAAU,EAAE,gBAAgB,CAAC,GAAG,EAAE,CAAC,CAAC;YAClC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC;SAC1C,CAAC,CAAC,CAAC;IAEN,OAAO,CACL,oBAAC,IAAI,OAAK,KAAK,EAAE,KAAK,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC;QAC/C,oBAAC,aAAa,IACZ,IAAI,EAAE,IAAI,EACV,SAAS,EAAE,SAAS,EACpB,mBAAmB,EAAE,mBAAmB,EACxC,KAAK,EAAE,UAAU,CAAC,YAAY,EAC9B,aAAa,EAAE,aAAa,GAC5B;QACD,QAAQ,CACJ,CACR,CAAC;AACJ,CAAC;AAED,mHAAmH;AACnH,4EAA4E;AAC5E,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,KAAK,CAAC,SAAwB;IAClE,MAAM;QACJ,OAAO,oBAAC,UAAU,OAAK,IAAI,CAAC,KAAK,GAAI,CAAC;IACxC,CAAC;CACF;AAED,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;IAC/B,SAAS,EAAE,EAAE,eAAe,EAAE,aAAa,EAAE;CAC9C,CAAC,CAAC","sourcesContent":["import { requireNativeViewManager } from 'expo-modules-core';\nimport React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport { BlurViewProps } from './BlurView.types';\nimport getReanimatedIfAvailable from './getReanimatedIfAvailable';\nimport isSharedValue from './isSharedValue';\n\nconst NativeBlurView = requireNativeViewManager('ExpoBlurView');\n\n// Animated version of the NativeBlurView has to be created here  because\n// is not directly available to the user. Therefore, using\n// Animated.createAnimatedComponent(BlurView) will not have the desired effects.\n// We pass the animated props directly to the animated component if available\nconst Reanimated = getReanimatedIfAvailable();\nconst AnimatedNativeBlurView = Reanimated?.default.createAnimatedComponent(NativeBlurView);\n\nfunction FnBlurView({\n  tint = 'default',\n  intensity = 50,\n  blurReductionFactor = 4,\n  style,\n  children,\n  ...props\n}: BlurViewProps) {\n  const intensityIsSharedValue = isSharedValue(intensity);\n\n  if (intensityIsSharedValue && Reanimated === undefined) {\n    console.warn(\n      \"You are trying to animate the blur intensity using a SharedValue, but 'react-native-reanimated' is not available. \" +\n        \"Make sure that 'react-native-reanimated' is correctly installed.\"\n    );\n  }\n\n  const BlurComponent =\n    intensityIsSharedValue && AnimatedNativeBlurView ? AnimatedNativeBlurView : NativeBlurView;\n\n  const animatedProps =\n    intensityIsSharedValue &&\n    Reanimated !== undefined &&\n    // Number of hooks will not change during runtime\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    Reanimated?.useAnimatedProps(() => ({\n      intensity: Math.min(intensity.value, 100),\n    }));\n\n  return (\n    <View {...props} style={[styles.container, style]}>\n      <BlurComponent\n        tint={tint}\n        intensity={intensity}\n        blurReductionFactor={blurReductionFactor}\n        style={StyleSheet.absoluteFill}\n        animatedProps={animatedProps}\n      />\n      {children}\n    </View>\n  );\n}\n\n// Functional component is required to use useAnimatedProps and class-based component is required by React Animated\n// Wrapping function component with class-based component fixes the conflict\nexport default class BlurView extends React.Component<BlurViewProps> {\n  render() {\n    return <FnBlurView {...this.props} />;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: { backgroundColor: 'transparent' },\n});\n"]}