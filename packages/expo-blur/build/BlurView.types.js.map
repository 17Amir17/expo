{"version":3,"file":"BlurView.types.js","sourceRoot":"","sources":["../src/BlurView.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ViewProps } from 'react-native';\n\nexport type BlurViewProps = {\n  /**\n   * A tint mode which will be applied to the view.\n   * @default 'default'\n   */\n  tint?: BlurTint;\n  /**\n   * A number from `1` to `100` to control the intensity of the blur effect.\n   *\n   * You can animate this property using `Animated API` from React Native or using `react-native-reanimated`.\n   * > When animating this property with `react-native-reanimated` a [`SharedValue`](https://docs.swmansion.com/react-native-reanimated/docs/api/hooks/useSharedValue/)\n   * > should be passed instead of a `number`. In that case underlying component will be automatically marked as Animated, and the shared value will be applied to it.\n   *\n   * > Animating this property using `Animated API` from React Native with `setNativeDriver: true` does not work.\n   *\n   * @default 50\n   */\n  intensity?: number | SharedValue<number>;\n  /**\n   * A number by which the blur intensity will be divided on Android.\n   *\n   * Due to platform differences blurs on Android and iOS vary slightly and might look different\n   * at different intensity levels. This property can be used to fine tune blur intensity on Android to match it\n   * more closely with iOS.\n   * @default 4\n   * @platform android\n   *\n   */\n  blurReductionFactor?: number;\n  /**\n   * Animated props used for animating the BlurView's intensity.\n   * This prop has to be created with `Animated.createAnimatedProps` from `react-native-reanimated`.\n   *\n\n   */\n} & ViewProps;\n\nexport type BlurTint = 'light' | 'dark' | 'default';\n\n// SharedValue definition copied from react-native-reanimated\nexport type SharedValue<T> = { value: T };\n"]}