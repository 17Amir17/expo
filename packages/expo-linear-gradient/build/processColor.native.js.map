{"version":3,"file":"processColor.native.js","sourceRoot":"","sources":["../src/processColor.native.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH,YAAY,CAAC;AAEb,kEAAkE;AAElE,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAI7C,qDAAqD;AACrD,sDAAsD;AAEtD,2DAA2D;AAC3D,gDAAgD;AAEhD,OAAO,eAAe,MAAM,gCAAgC,CAAC;AAE7D,SAAS,cAAc,CACrB,KAAgD;IAElD,sDAAsD;IACtD,2EAA2E;IAC3E,2DAA2D;IAC3D,qCAAqC;IACrC,gCAAgC;IAChC,QAAQ;IACR,MAAM;IAEJ,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC1D,OAAO,eAAe,CAAC,KAAK,CAAC,CAAC;KAC/B;AACH,CAAC;AAID,0BAA0B;AAC1B,SAAS,YAAY,CAAC,KAAoC;IACxD,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;QACzC,OAAO,KAAK,CAAC;KACd;IAED,IAAI,eAAe,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;IAC5C,IAAI,eAAe,KAAK,IAAI,IAAI,eAAe,KAAK,SAAS,EAAE;QAC7D,OAAO,SAAS,CAAC;KAClB;IAEH,+CAA+C;IAC/C,iCAAiC;IACjC,iEAAiE;IAEjE,qEAAqE;IAErE,uCAAuC;IACvC,kCAAkC;IAClC,QAAQ;IACR,MAAM;IAEJ,IAAI,OAAO,eAAe,KAAK,QAAQ,EAAE;QACvC,OAAO,IAAI,CAAC;KACb;IAED,sCAAsC;IACtC,eAAe,GAAG,CAAC,CAAC,eAAe,IAAI,EAAE,CAAC,GAAG,CAAC,eAAe,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAE5E,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QAC7B,6DAA6D;QAC7D,qEAAqE;QACrE,mEAAmE;QACnE,6CAA6C;QAC7C,eAAe,GAAG,eAAe,GAAG,GAAG,CAAC;KACzC;IACD,OAAO,eAAe,CAAC;AACzB,CAAC;AAED,eAAe,YAAY,CAAC","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\n// import type {ColorValue, NativeColorValue} from './StyleSheet';\n\nimport { Platform } from 'expo-modules-core';\nimport type { ColorValue } from 'react-native';\n\ntype NativeColorValue = any;\n// const Platform = require('../Utilities/Platform');\n// const normalizeColor = require('./normalizeColor');\n\n// import type {ProcessedColorValue} from './processColor';\n// import type {ColorValue} from './StyleSheet';\n\nimport _normalizeColor from '@react-native/normalize-colors';\n\nfunction normalizeColor(\n  color: (ColorValue | ProcessedColorValue) | null,\n): ProcessedColorValue | null {\n//   if (typeof color === 'object' && color != null) {\n//     const {normalizeColorObject} = require('./PlatformColorValueTypes');\n//     const normalizedColor = normalizeColorObject(color);\n//     if (normalizedColor != null) {\n//       return normalizedColor;\n//     }\n//   }\n\n  if (typeof color === 'string' || typeof color === 'number') {\n    return _normalizeColor(color);\n  }\n}\n\nexport type ProcessedColorValue = number | NativeColorValue;\n\n/* eslint no-bitwise: 0 */\nfunction processColor(color?: (number | ColorValue) | null): ProcessedColorValue | null {\n  if (color === undefined || color === null) {\n    return color;\n  }\n\n  let normalizedColor = normalizeColor(color);\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n//   if (typeof normalizedColor === 'object') {\n//     const processColorObject =\n//       require('./PlatformColorValueTypes').processColorObject;\n\n//     const processedColorObj = processColorObject(normalizedColor);\n\n//     if (processedColorObj != null) {\n//       return processedColorObj;\n//     }\n//   }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  // Converts 0xrrggbbaa into 0xaarrggbb\n  normalizedColor = ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0;\n\n  if (Platform.OS === 'android') {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    normalizedColor = normalizedColor | 0x0;\n  }\n  return normalizedColor;\n}\n\nexport default processColor;\n"]}