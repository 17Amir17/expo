diff --git a/node_modules/metro/src/ModuleGraph/worker/collectDependencies.js b/node_modules/metro/src/ModuleGraph/worker/collectDependencies.js
index a5a96a1..720ef58 100644
--- a/node_modules/metro/src/ModuleGraph/worker/collectDependencies.js
+++ b/node_modules/metro/src/ModuleGraph/worker/collectDependencies.js
@@ -39,6 +39,7 @@ function collectDependencies(ast, options) {
     keepRequireNames: options.keepRequireNames,
     allowOptionalDependencies: options.allowOptionalDependencies,
     unstable_allowRequireContext: options.unstable_allowRequireContext,
+    ignoredModules: options.ignoredModules ?? [],
   };
   const visitor = {
     CallExpression(path, state) {
@@ -254,10 +255,11 @@ function processRequireContextCall(path, state) {
     },
     path
   );
-
-  // require() the generated module representing this context
-  path.get("callee").replaceWith(types.identifier("require"));
-  transformer.transformSyncRequire(path, dep, state);
+  if (dep) {
+    // require() the generated module representing this context
+    path.get("callee").replaceWith(types.identifier("require"));
+    transformer.transformSyncRequire(path, dep, state);
+  }
 }
 function processResolveWeakCall(path, state) {
   const name = getModuleNameFromCallArgs(path);
@@ -273,11 +275,13 @@ function processResolveWeakCall(path, state) {
     },
     path
   );
-  path.replaceWith(
-    makeResolveWeakTemplate({
-      MODULE_ID: createModuleIDExpression(dependency, state),
-    })
-  );
+  if (dependency) {
+    path.replaceWith(
+      makeResolveWeakTemplate({
+        MODULE_ID: createModuleIDExpression(dependency, state),
+      })
+    );
+  }
 }
 function collectImports(path, state) {
   if (path.node.source) {
@@ -306,11 +310,14 @@ function processImportCall(path, state, options) {
     },
     path
   );
-  const transformer = state.dependencyTransformer;
-  if (options.asyncType === "async") {
-    transformer.transformImportCall(path, dep, state);
+  if (dep) {
+    const transformer = state.dependencyTransformer;
+    if (options.asyncType === "async") {
+      transformer.transformImportCall(path, dep, state);
+    } else {
+      transformer.transformPrefetch(path, dep, state);
+    }
   } else {
-    transformer.transformPrefetch(path, dep, state);
   }
 }
 function processRequireCall(path, state) {
@@ -332,7 +339,12 @@ function processRequireCall(path, state) {
     },
     path
   );
-  transformer.transformSyncRequire(path, dep, state);
+  if (dep) {
+    transformer.transformSyncRequire(path, dep, state);
+  } else {
+    // Convert the call from `_$$_REQUIRE()` `$$require_external()`.
+    path.get("callee").replaceWith(types.identifier("$$require_external"));    
+  }
 }
 function getNearestLocFromPath(path) {
   let current = path;
@@ -350,6 +362,17 @@ function getNearestLocFromPath(path) {
   );
 }
 function registerDependency(state, qualifier, path) {
+  if (
+    state.ignoredModules.some((externalMatcher) => {
+      if (typeof externalMatcher === "string") {
+        return externalMatcher === qualifier.name;
+      } else {
+        return externalMatcher.test(qualifier.name);
+      }
+    })
+  ) {
+    return null;
+  }
   const dependency = state.dependencyRegistry.registerDependency(qualifier);
   const loc = getNearestLocFromPath(path);
   if (loc != null) {
diff --git a/node_modules/metro/src/Server.js b/node_modules/metro/src/Server.js
index 365f48a..2e139f5 100644
--- a/node_modules/metro/src/Server.js
+++ b/node_modules/metro/src/Server.js
@@ -9,46 +9,42 @@
  * @oncall react_native
  */
 
-"use strict";
+'use strict';
 
-const { getAsset } = require("./Assets");
-const baseJSBundle = require("./DeltaBundler/Serializers/baseJSBundle");
-const getAllFiles = require("./DeltaBundler/Serializers/getAllFiles");
-const getAssets = require("./DeltaBundler/Serializers/getAssets");
-const {
-  getExplodedSourceMap,
-} = require("./DeltaBundler/Serializers/getExplodedSourceMap");
-const getRamBundleInfo = require("./DeltaBundler/Serializers/getRamBundleInfo");
-const sourceMapString = require("./DeltaBundler/Serializers/sourceMapString");
-const IncrementalBundler = require("./IncrementalBundler");
-const ResourceNotFoundError = require("./IncrementalBundler/ResourceNotFoundError");
-const bundleToString = require("./lib/bundleToString");
-const formatBundlingError = require("./lib/formatBundlingError");
-const getGraphId = require("./lib/getGraphId");
-const parseOptionsFromUrl = require("./lib/parseOptionsFromUrl");
-const splitBundleOptions = require("./lib/splitBundleOptions");
-const transformHelpers = require("./lib/transformHelpers");
-const {
-  UnableToResolveError,
-} = require("./node-haste/DependencyGraph/ModuleResolution");
-const parsePlatformFilePath = require("./node-haste/lib/parsePlatformFilePath");
-const MultipartResponse = require("./Server/MultipartResponse");
-const symbolicate = require("./Server/symbolicate");
-const { codeFrameColumns } = require("@babel/code-frame");
-const debug = require("debug")("Metro:Server");
-const fs = require("graceful-fs");
-const invariant = require("invariant");
-const jscSafeUrl = require("jsc-safe-url");
+const { getAsset } = require('./Assets');
+const baseJSBundle = require('./DeltaBundler/Serializers/baseJSBundle');
+const getAllFiles = require('./DeltaBundler/Serializers/getAllFiles');
+const getAssets = require('./DeltaBundler/Serializers/getAssets');
+const { getExplodedSourceMap } = require('./DeltaBundler/Serializers/getExplodedSourceMap');
+const getRamBundleInfo = require('./DeltaBundler/Serializers/getRamBundleInfo');
+const sourceMapString = require('./DeltaBundler/Serializers/sourceMapString');
+const IncrementalBundler = require('./IncrementalBundler');
+const ResourceNotFoundError = require('./IncrementalBundler/ResourceNotFoundError');
+const bundleToString = require('./lib/bundleToString');
+const formatBundlingError = require('./lib/formatBundlingError');
+const getGraphId = require('./lib/getGraphId');
+const parseOptionsFromUrl = require('./lib/parseOptionsFromUrl');
+const splitBundleOptions = require('./lib/splitBundleOptions');
+const transformHelpers = require('./lib/transformHelpers');
+const { UnableToResolveError } = require('./node-haste/DependencyGraph/ModuleResolution');
+const parsePlatformFilePath = require('./node-haste/lib/parsePlatformFilePath');
+const MultipartResponse = require('./Server/MultipartResponse');
+const symbolicate = require('./Server/symbolicate');
+const { codeFrameColumns } = require('@babel/code-frame');
+const debug = require('debug')('Metro:Server');
+const fs = require('graceful-fs');
+const invariant = require('invariant');
+const jscSafeUrl = require('jsc-safe-url');
 const {
   Logger,
   Logger: { createActionStartEntry, createActionEndEntry, log },
-} = require("metro-core");
-const mime = require("mime-types");
-const nullthrows = require("nullthrows");
-const path = require("path");
-const { performance } = require("perf_hooks");
-const querystring = require("querystring");
-const url = require("url");
+} = require('metro-core');
+const mime = require('mime-types');
+const nullthrows = require('nullthrows');
+const path = require('path');
+const { performance } = require('perf_hooks');
+const querystring = require('querystring');
+const url = require('url');
 const noopLogger = {
   start: () => {},
   point: () => {},
@@ -56,8 +52,8 @@ const noopLogger = {
   subSpan: () => noopLogger,
   end: () => {},
 };
-const DELTA_ID_HEADER = "X-Metro-Delta-ID";
-const FILES_CHANGED_COUNT_HEADER = "X-Metro-Files-Changed-Count";
+const DELTA_ID_HEADER = 'X-Metro-Delta-ID';
+const FILES_CHANGED_COUNT_HEADER = 'X-Metro-Files-Changed-Count';
 class Server {
   constructor(config, options) {
     this._config = config;
@@ -65,7 +61,7 @@ class Server {
     if (this._config.resetCache) {
       this._config.cacheStores.forEach((store) => store.clear());
       this._config.reporter.update({
-        type: "transform_cache_reset",
+        type: 'transform_cache_reset',
       });
     }
     this._reporter = config.reporter;
@@ -120,7 +116,7 @@ class Server {
       asyncRequireModulePath: await this._resolveRelativePath(
         this._config.transformer.asyncRequireModulePath,
         {
-          relativeTo: "project",
+          relativeTo: 'project',
           resolverOptions,
           transformOptions,
         }
@@ -132,18 +128,15 @@ class Server {
       includeAsyncPaths: graphOptions.lazy,
       projectRoot: this._config.projectRoot,
       modulesOnly: serializerOptions.modulesOnly,
-      runBeforeMainModule:
-        this._config.serializer.getModulesRunBeforeMainModule(
-          path.relative(this._config.projectRoot, entryPoint)
-        ),
+      runBeforeMainModule: this._config.serializer.getModulesRunBeforeMainModule(
+        path.relative(this._config.projectRoot, entryPoint)
+      ),
       runModule: serializerOptions.runModule,
       sourceMapUrl: serializerOptions.sourceMapUrl,
       sourceUrl: serializerOptions.sourceUrl,
       inlineSourceMap: serializerOptions.inlineSourceMap,
-      serverRoot:
-        this._config.server.unstable_serverRoot ?? this._config.projectRoot,
-      shouldAddToIgnoreList: (module) =>
-        this._shouldAddModuleToIgnoreList(module),
+      serverRoot: this._config.server.unstable_serverRoot ?? this._config.projectRoot,
+      shouldAddToIgnoreList: (module) => this._shouldAddModuleToIgnoreList(module),
     };
     let bundleCode = null;
     let bundleMap = null;
@@ -154,26 +147,21 @@ class Server {
         graph,
         bundleOptions
       );
-      if (typeof bundle === "string") {
+      if (typeof bundle === 'string') {
         bundleCode = bundle;
       } else {
         bundleCode = bundle.code;
         bundleMap = bundle.map;
       }
     } else {
-      bundleCode = bundleToString(
-        baseJSBundle(entryPoint, prepend, graph, bundleOptions)
-      ).code;
+      bundleCode = bundleToString(baseJSBundle(entryPoint, prepend, graph, bundleOptions)).code;
     }
     if (!bundleMap) {
-      bundleMap = sourceMapString(
-        [...prepend, ...this._getSortedModules(graph)],
-        {
-          excludeSource: serializerOptions.excludeSource,
-          processModuleFilter: this._config.serializer.processModuleFilter,
-          shouldAddToIgnoreList: bundleOptions.shouldAddToIgnoreList,
-        }
-      );
+      bundleMap = sourceMapString([...prepend, ...this._getSortedModules(graph)], {
+        excludeSource: serializerOptions.excludeSource,
+        processModuleFilter: this._config.serializer.processModuleFilter,
+        shouldAddToIgnoreList: bundleOptions.shouldAddToIgnoreList,
+      });
     }
     return {
       code: bundleCode,
@@ -204,7 +192,7 @@ class Server {
       asyncRequireModulePath: await this._resolveRelativePath(
         this._config.transformer.asyncRequireModulePath,
         {
-          relativeTo: "project",
+          relativeTo: 'project',
           resolverOptions,
           transformOptions,
         }
@@ -219,18 +207,15 @@ class Server {
       platform: transformOptions.platform,
       projectRoot: this._config.projectRoot,
       modulesOnly: serializerOptions.modulesOnly,
-      runBeforeMainModule:
-        this._config.serializer.getModulesRunBeforeMainModule(
-          path.relative(this._config.projectRoot, entryPoint)
-        ),
+      runBeforeMainModule: this._config.serializer.getModulesRunBeforeMainModule(
+        path.relative(this._config.projectRoot, entryPoint)
+      ),
       runModule: serializerOptions.runModule,
       sourceMapUrl: serializerOptions.sourceMapUrl,
       sourceUrl: serializerOptions.sourceUrl,
       inlineSourceMap: serializerOptions.inlineSourceMap,
-      serverRoot:
-        this._config.server.unstable_serverRoot ?? this._config.projectRoot,
-      shouldAddToIgnoreList: (module) =>
-        this._shouldAddModuleToIgnoreList(module),
+      serverRoot: this._config.server.unstable_serverRoot ?? this._config.projectRoot,
+      shouldAddToIgnoreList: (module) => this._shouldAddModuleToIgnoreList(module),
     });
   }
   async getAssets(options) {
@@ -266,7 +251,7 @@ class Server {
     } = splitBundleOptions({
       ...Server.DEFAULT_BUNDLE_OPTIONS,
       ...options,
-      bundleType: "bundle",
+      bundleType: 'bundle',
     });
     const { prepend, graph } = await this._bundler.buildGraph(
       entryFile,
@@ -279,8 +264,7 @@ class Server {
       }
     );
     const platform =
-      transformOptions.platform ||
-      parsePlatformFilePath(entryFile, this._platforms).platform;
+      transformOptions.platform || parsePlatformFilePath(entryFile, this._platforms).platform;
 
     // $FlowFixMe[incompatible-return]
     return await getAllFiles(prepend, graph, {
@@ -290,29 +274,24 @@ class Server {
   }
   _rangeRequestMiddleware(req, res, data, assetPath) {
     if (req.headers && req.headers.range) {
-      const [rangeStart, rangeEnd] = req.headers.range
-        .replace(/bytes=/, "")
-        .split("-");
+      const [rangeStart, rangeEnd] = req.headers.range.replace(/bytes=/, '').split('-');
       const dataStart = parseInt(rangeStart, 10);
       const dataEnd = rangeEnd ? parseInt(rangeEnd, 10) : data.length - 1;
       const chunksize = dataEnd - dataStart + 1;
       res.writeHead(206, {
-        "Accept-Ranges": "bytes",
-        "Content-Length": chunksize.toString(),
-        "Content-Range": `bytes ${dataStart}-${dataEnd}/${data.length}`,
+        'Accept-Ranges': 'bytes',
+        'Content-Length': chunksize.toString(),
+        'Content-Range': `bytes ${dataStart}-${dataEnd}/${data.length}`,
       });
       return data.slice(dataStart, dataEnd + 1);
     }
-    res.setHeader("Content-Length", String(Buffer.byteLength(data)));
+    res.setHeader('Content-Length', String(Buffer.byteLength(data)));
     return data;
   }
   async _processSingleAssetRequest(req, res) {
     const urlObj = url.parse(decodeURI(req.url), true);
     let [, assetPath] =
-      (urlObj &&
-        urlObj.pathname &&
-        urlObj.pathname.match(/^\/assets\/(.+)$/)) ||
-      [];
+      (urlObj && urlObj.pathname && urlObj.pathname.match(/^\/assets\/(.+)$/)) || [];
     if (!assetPath && urlObj && urlObj.query && urlObj.query.unstable_path) {
       const [, actualPath, secondaryQuery] = nullthrows(
         urlObj.query.unstable_path.match(/^([^?]*)\??(.*)$/)
@@ -323,11 +302,11 @@ class Server {
       assetPath = actualPath;
     }
     if (!assetPath) {
-      throw new Error("Could not extract asset path from URL");
+      throw new Error('Could not extract asset path from URL');
     }
     const processingAssetRequestLogEntry = log(
       createActionStartEntry({
-        action_name: "Processing asset request",
+        action_name: 'Processing asset request',
         asset: assetPath[1],
       })
     );
@@ -342,9 +321,9 @@ class Server {
       // Tell clients to cache this for 1 year.
       // This is safe as the asset url contains a hash of the asset.
       if (process.env.REACT_NATIVE_ENABLE_ASSET_CACHING === true) {
-        res.setHeader("Cache-Control", "max-age=31536000");
+        res.setHeader('Cache-Control', 'max-age=31536000');
       }
-      res.setHeader("Content-Type", mime.lookup(path.basename(assetPath)));
+      res.setHeader('Content-Type', mime.lookup(path.basename(assetPath)));
       res.end(this._rangeRequestMiddleware(req, res, data, assetPath));
       process.nextTick(() => {
         log(createActionEndEntry(processingAssetRequestLogEntry));
@@ -352,7 +331,7 @@ class Server {
     } catch (error) {
       console.error(error.stack);
       res.writeHead(404);
-      res.end("Asset not found");
+      res.end('Asset not found');
     }
   }
   processRequest = (req, res, next) => {
@@ -372,80 +351,54 @@ class Server {
     const urlObj = url.parse(req.url, true);
     const { host } = req.headers;
     debug(
-      `Handling request: ${host ? "http://" + host : ""}${req.url}` +
-        (originalUrl !== req.url ? ` (rewritten from ${originalUrl})` : "")
+      `Handling request: ${host ? 'http://' + host : ''}${req.url}` +
+        (originalUrl !== req.url ? ` (rewritten from ${originalUrl})` : '')
     );
     const formattedUrl = url.format({
       ...urlObj,
       host,
-      protocol: "http",
+      protocol: 'http',
     });
-    const pathname = urlObj.pathname || "";
+    const pathname = urlObj.pathname || '';
     const buildNumber = this.getNewBuildNumber();
-    if (pathname.endsWith(".bundle")) {
+    if (pathname.endsWith('.bundle')) {
       const options = this._parseOptions(formattedUrl);
       await this._processBundleRequest(req, res, options, {
         buildNumber,
         bundlePerfLogger:
-          this._config.unstable_perfLoggerFactory?.("BUNDLING_REQUEST", {
+          this._config.unstable_perfLoggerFactory?.('BUNDLING_REQUEST', {
             key: buildNumber,
           }) ?? noopLogger,
       });
       if (this._serverOptions && this._serverOptions.onBundleBuilt) {
         this._serverOptions.onBundleBuilt(pathname);
       }
-    } else if (pathname.endsWith(".map")) {
+    } else if (pathname.endsWith('.map')) {
       // Chrome dev tools may need to access the source maps.
-      res.setHeader("Access-Control-Allow-Origin", "devtools://devtools");
-      await this._processSourceMapRequest(
-        req,
-        res,
-        this._parseOptions(formattedUrl),
-        {
-          buildNumber,
-          bundlePerfLogger: noopLogger,
-        }
-      );
-    } else if (pathname.endsWith(".assets")) {
-      await this._processAssetsRequest(
-        req,
-        res,
-        this._parseOptions(formattedUrl),
-        {
-          buildNumber,
-          bundlePerfLogger: noopLogger,
-        }
-      );
-    } else if (pathname.startsWith("/assets/") || pathname === "/assets") {
+      res.setHeader('Access-Control-Allow-Origin', 'devtools://devtools');
+      await this._processSourceMapRequest(req, res, this._parseOptions(formattedUrl), {
+        buildNumber,
+        bundlePerfLogger: noopLogger,
+      });
+    } else if (pathname.endsWith('.assets')) {
+      await this._processAssetsRequest(req, res, this._parseOptions(formattedUrl), {
+        buildNumber,
+        bundlePerfLogger: noopLogger,
+      });
+    } else if (pathname.startsWith('/assets/') || pathname === '/assets') {
       await this._processSingleAssetRequest(req, res);
-    } else if (pathname === "/symbolicate") {
+    } else if (pathname === '/symbolicate') {
       await this._symbolicate(req, res);
     } else {
       next();
     }
   }
-  _createRequestProcessor({
-    createStartEntry,
-    createEndEntry,
-    build,
-    delete: deleteFn,
-    finish,
-  }) {
-    return async function requestProcessor(
-      req,
-      res,
-      bundleOptions,
-      buildContext
-    ) {
+  _createRequestProcessor({ createStartEntry, createEndEntry, build, delete: deleteFn, finish }) {
+    return async function requestProcessor(req, res, bundleOptions, buildContext) {
       const requestStartTimestamp = performance.timeOrigin + performance.now();
       const { buildNumber } = buildContext;
-      const {
-        entryFile,
-        graphOptions,
-        resolverOptions,
-        serializerOptions,
-        transformOptions,
-      } = splitBundleOptions(bundleOptions);
+      const { entryFile, graphOptions, resolverOptions, serializerOptions, transformOptions } =
+        splitBundleOptions(bundleOptions);
 
       /**
        * `entryFile` is relative to projectRoot, we need to use resolution function
@@ -454,7 +407,7 @@ class Server {
       let resolvedEntryFilePath;
       try {
         resolvedEntryFilePath = await this._resolveRelativePath(entryFile, {
-          relativeTo: "server",
+          relativeTo: 'server',
           resolverOptions,
           transformOptions,
         });
@@ -462,21 +415,20 @@ class Server {
         const formattedError = formatBundlingError(error);
         const status = error instanceof UnableToResolveError ? 404 : 500;
         res.writeHead(status, {
-          "Content-Type": "application/json; charset=UTF-8",
+          'Content-Type': 'application/json; charset=UTF-8',
         });
         res.end(JSON.stringify(formattedError));
         return;
       }
       const graphId = getGraphId(resolvedEntryFilePath, transformOptions, {
-        unstable_allowRequireContext:
-          this._config.transformer.unstable_allowRequireContext,
+        unstable_allowRequireContext: this._config.transformer.unstable_allowRequireContext,
         resolverOptions,
         shallow: graphOptions.shallow,
         lazy: graphOptions.lazy,
       });
 
       // For resources that support deletion, handle the DELETE method.
-      if (deleteFn && req.method === "DELETE") {
+      if (deleteFn && req.method === 'DELETE') {
         const deleteContext = {
           graphId,
           req,
@@ -488,7 +440,7 @@ class Server {
           const formattedError = formatBundlingError(error);
           const status = error instanceof ResourceNotFoundError ? 404 : 500;
           res.writeHead(status, {
-            "Content-Type": "application/json; charset=UTF-8",
+            'Content-Type': 'application/json; charset=UTF-8',
           });
           res.end(JSON.stringify(formattedError));
         }
@@ -499,10 +451,7 @@ class Server {
       let lastProgress = -1;
       if (this._config.reporter) {
         onProgress = (transformedFileCount, totalFileCount) => {
-          const currentProgress = parseInt(
-            (transformedFileCount / totalFileCount) * 100,
-            10
-          );
+          const currentProgress = parseInt((transformedFileCount / totalFileCount) * 100, 10);
 
           // We want to throttle the updates so that we only show meaningful
           // UI updates slow enough for the client to actually handle them. For
@@ -512,7 +461,7 @@ class Server {
             if (mres instanceof MultipartResponse) {
               mres.writeChunk(
                 {
-                  "Content-Type": "application/json",
+                  'Content-Type': 'application/json',
                 },
                 JSON.stringify({
                   done: transformedFileCount,
@@ -535,7 +484,7 @@ class Server {
           }
           this._reporter.update({
             buildID: getBuildID(buildNumber),
-            type: "bundle_transform_progressed",
+            type: 'bundle_transform_progressed',
             transformedFileCount,
             totalFileCount,
           });
@@ -552,8 +501,8 @@ class Server {
           minify: transformOptions.minify,
           platform: transformOptions.platform,
         },
-        isPrefetch: req.method === "HEAD",
-        type: "bundle_build_started",
+        isPrefetch: req.method === 'HEAD',
+        type: 'bundle_build_started',
       });
       const startContext = {
         buildNumber,
@@ -570,9 +519,7 @@ class Server {
         bundlePerfLogger: buildContext.bundlePerfLogger,
         requestStartTimestamp,
       };
-      const logEntry = log(
-        createActionStartEntry(createStartEntry(startContext))
-      );
+      const logEntry = log(createActionStartEntry(createStartEntry(startContext)));
       let result;
       try {
         result = await build(startContext);
@@ -580,28 +527,28 @@ class Server {
         const formattedError = formatBundlingError(error);
         const status = error instanceof ResourceNotFoundError ? 404 : 500;
         mres.writeHead(status, {
-          "Content-Type": "application/json; charset=UTF-8",
+          'Content-Type': 'application/json; charset=UTF-8',
         });
         mres.end(JSON.stringify(formattedError));
         this._reporter.update({
           buildID: getBuildID(buildNumber),
-          type: "bundle_build_failed",
+          type: 'bundle_build_failed',
           bundleOptions,
         });
         this._reporter.update({
           error,
-          type: "bundling_error",
+          type: 'bundling_error',
         });
         log({
-          action_name: "bundling_error",
+          action_name: 'bundling_error',
           error_type: formattedError.type,
-          log_entry_label: "bundling_error",
+          log_entry_label: 'bundling_error',
           bundle_id: graphId,
           build_id: getBuildID(buildNumber),
           stack: formattedError.message,
         });
-        debug("Bundling error", error);
-        buildContext.bundlePerfLogger.end("FAIL");
+        debug('Bundling error', error);
+        buildContext.bundlePerfLogger.end('FAIL');
         return;
       }
       const endContext = {
@@ -611,7 +558,7 @@ class Server {
       finish(endContext);
       this._reporter.update({
         buildID: getBuildID(buildNumber),
-        type: "bundle_build_done",
+        type: 'bundle_build_done',
       });
       log(
         /* $FlowFixMe(>=0.122.0 site=react_native_fb) This comment suppresses
@@ -627,14 +574,14 @@ class Server {
   _processBundleRequest = this._createRequestProcessor({
     createStartEntry(context) {
       return {
-        action_name: "Requesting bundle",
+        action_name: 'Requesting bundle',
         bundle_url: context.req.url,
         entry_point: context.entryFile,
-        bundler: "delta",
+        bundler: 'delta',
         build_id: getBuildID(context.buildNumber),
         bundle_options: context.bundleOptions,
         bundle_hash: context.graphId,
-        user_agent: context.req.headers["user-agent"] ?? "unknown",
+        user_agent: context.req.headers['user-agent'] ?? 'unknown',
       };
     },
     createEndEntry(context) {
@@ -662,7 +609,7 @@ class Server {
         },
       });
       const revPromise = this._bundler.getRevisionByGraphId(graphId);
-      bundlePerfLogger.point("resolvingAndTransformingDependencies_start");
+      bundlePerfLogger.point('resolvingAndTransformingDependencies_start');
       bundlePerfLogger.annotate({
         bool: {
           initial_build: revPromise == null,
@@ -670,64 +617,50 @@ class Server {
       });
       const { delta, revision } = await (revPromise != null
         ? this._bundler.updateGraph(await revPromise, false)
-        : this._bundler.initializeGraph(
-            entryFile,
-            transformOptions,
-            resolverOptions,
-            {
-              onProgress,
-              shallow: graphOptions.shallow,
-              lazy: graphOptions.lazy,
-            }
-          ));
+        : this._bundler.initializeGraph(entryFile, transformOptions, resolverOptions, {
+            onProgress,
+            shallow: graphOptions.shallow,
+            lazy: graphOptions.lazy,
+          }));
       bundlePerfLogger.annotate({
         int: {
           graph_node_count: revision.graph.dependencies.size,
         },
       });
-      bundlePerfLogger.point("resolvingAndTransformingDependencies_end");
-      bundlePerfLogger.point("serializingBundle_start");
+      bundlePerfLogger.point('resolvingAndTransformingDependencies_end');
+      bundlePerfLogger.point('serializingBundle_start');
       const serializer =
         this._config.serializer.customSerializer ||
         ((entryPoint, preModules, graph, options) =>
-          bundleToString(baseJSBundle(entryPoint, preModules, graph, options))
-            .code);
-      const bundle = await serializer(
-        entryFile,
-        revision.prepend,
-        revision.graph,
-        {
-          asyncRequireModulePath: await this._resolveRelativePath(
-            this._config.transformer.asyncRequireModulePath,
-            {
-              relativeTo: "project",
-              resolverOptions,
-              transformOptions,
-            }
-          ),
-          processModuleFilter: this._config.serializer.processModuleFilter,
-          createModuleId: this._createModuleId,
-          getRunModuleStatement: this._config.serializer.getRunModuleStatement,
-          includeAsyncPaths: graphOptions.lazy,
-          dev: transformOptions.dev,
-          projectRoot: this._config.projectRoot,
-          modulesOnly: serializerOptions.modulesOnly,
-          runBeforeMainModule:
-            this._config.serializer.getModulesRunBeforeMainModule(
-              path.relative(this._config.projectRoot, entryFile)
-            ),
-          runModule: serializerOptions.runModule,
-          sourceMapUrl: serializerOptions.sourceMapUrl,
-          sourceUrl: serializerOptions.sourceUrl,
-          inlineSourceMap: serializerOptions.inlineSourceMap,
-          serverRoot:
-            this._config.server.unstable_serverRoot ?? this._config.projectRoot,
-          shouldAddToIgnoreList: (module) =>
-            this._shouldAddModuleToIgnoreList(module),
-        }
-      );
-      bundlePerfLogger.point("serializingBundle_end");
-      const bundleCode = typeof bundle === "string" ? bundle : bundle.code;
+          bundleToString(baseJSBundle(entryPoint, preModules, graph, options)).code);
+      const bundle = await serializer(entryFile, revision.prepend, revision.graph, {
+        asyncRequireModulePath: await this._resolveRelativePath(
+          this._config.transformer.asyncRequireModulePath,
+          {
+            relativeTo: 'project',
+            resolverOptions,
+            transformOptions,
+          }
+        ),
+        processModuleFilter: this._config.serializer.processModuleFilter,
+        createModuleId: this._createModuleId,
+        getRunModuleStatement: this._config.serializer.getRunModuleStatement,
+        includeAsyncPaths: graphOptions.lazy,
+        dev: transformOptions.dev,
+        projectRoot: this._config.projectRoot,
+        modulesOnly: serializerOptions.modulesOnly,
+        runBeforeMainModule: this._config.serializer.getModulesRunBeforeMainModule(
+          path.relative(this._config.projectRoot, entryFile)
+        ),
+        runModule: serializerOptions.runModule,
+        sourceMapUrl: serializerOptions.sourceMapUrl,
+        sourceUrl: serializerOptions.sourceUrl,
+        inlineSourceMap: serializerOptions.inlineSourceMap,
+        serverRoot: this._config.server.unstable_serverRoot ?? this._config.projectRoot,
+        shouldAddToIgnoreList: (module) => this._shouldAddModuleToIgnoreList(module),
+      });
+      bundlePerfLogger.point('serializingBundle_end');
+      const bundleCode = typeof bundle === 'string' ? bundle : bundle.code;
       return {
         numModifiedFiles: delta.reset
           ? delta.added.size + revision.prepend.length
@@ -744,47 +677,40 @@ class Server {
           bundle_byte_length: Buffer.byteLength(result.bundle),
         },
       });
-      mres.once("error", () => {
-        bundlePerfLogger.end("FAIL");
+      mres.once('error', () => {
+        bundlePerfLogger.end('FAIL');
       });
-      mres.once("finish", () => {
-        bundlePerfLogger.end("SUCCESS");
+      mres.once('finish', () => {
+        bundlePerfLogger.end('SUCCESS');
       });
       if (
         // We avoid parsing the dates since the client should never send a more
         // recent date than the one returned by the Delta Bundler (if that's the
         // case it's fine to return the whole bundle).
-        req.headers["if-modified-since"] ===
-        result.lastModifiedDate.toUTCString()
+        req.headers['if-modified-since'] === result.lastModifiedDate.toUTCString()
       ) {
         bundlePerfLogger.annotate({
           string: {
-            http_status: "304",
+            http_status: '304',
           },
         });
-        debug("Responding with 304");
+        debug('Responding with 304');
         mres.writeHead(304);
         mres.end();
       } else {
         bundlePerfLogger.annotate({
           string: {
-            http_status: "200",
+            http_status: '200',
           },
         });
-        mres.setHeader(
-          FILES_CHANGED_COUNT_HEADER,
-          String(result.numModifiedFiles)
-        );
+        mres.setHeader(FILES_CHANGED_COUNT_HEADER, String(result.numModifiedFiles));
         mres.setHeader(DELTA_ID_HEADER, String(result.nextRevId));
         if (serializerOptions?.sourceUrl != null) {
-          mres.setHeader("Content-Location", serializerOptions.sourceUrl);
+          mres.setHeader('Content-Location', serializerOptions.sourceUrl);
         }
-        mres.setHeader("Content-Type", "application/javascript; charset=UTF-8");
-        mres.setHeader("Last-Modified", result.lastModifiedDate.toUTCString());
-        mres.setHeader(
-          "Content-Length",
-          String(Buffer.byteLength(result.bundle))
-        );
+        mres.setHeader('Content-Type', 'application/javascript; charset=UTF-8');
+        mres.setHeader('Last-Modified', result.lastModifiedDate.toUTCString());
+        mres.setHeader('Content-Length', String(Buffer.byteLength(result.bundle)));
         mres.end(result.bundle);
       }
     },
@@ -804,22 +730,20 @@ class Server {
       this._createModuleId(module.path);
     }
     // Sort by IDs
-    return modules.sort(
-      (a, b) => this._createModuleId(a.path) - this._createModuleId(b.path)
-    );
+    return modules.sort((a, b) => this._createModuleId(a.path) - this._createModuleId(b.path));
   }
   _processSourceMapRequest = this._createRequestProcessor({
     createStartEntry(context) {
       return {
-        action_name: "Requesting sourcemap",
+        action_name: 'Requesting sourcemap',
         bundle_url: context.req.url,
         entry_point: context.entryFile,
-        bundler: "delta",
+        bundler: 'delta',
       };
     },
     createEndEntry(context) {
       return {
-        bundler: "delta",
+        bundler: 'delta',
       };
     },
     build: async ({
@@ -845,10 +769,7 @@ class Server {
           }
         ));
       } else {
-        ({ revision } = await this._bundler.updateGraph(
-          await revPromise,
-          false
-        ));
+        ({ revision } = await this._bundler.updateGraph(await revPromise, false));
       }
       let { prepend, graph } = revision;
       if (serializerOptions.modulesOnly) {
@@ -857,35 +778,29 @@ class Server {
       return sourceMapString([...prepend, ...this._getSortedModules(graph)], {
         excludeSource: serializerOptions.excludeSource,
         processModuleFilter: this._config.serializer.processModuleFilter,
-        shouldAddToIgnoreList: (module) =>
-          this._shouldAddModuleToIgnoreList(module),
+        shouldAddToIgnoreList: (module) => this._shouldAddModuleToIgnoreList(module),
       });
     },
     finish({ mres, result }) {
-      mres.setHeader("Content-Type", "application/json");
+      mres.setHeader('Content-Type', 'application/json');
       mres.end(result.toString());
     },
   });
   _processAssetsRequest = this._createRequestProcessor({
     createStartEntry(context) {
       return {
-        action_name: "Requesting assets",
+        action_name: 'Requesting assets',
         bundle_url: context.req.url,
         entry_point: context.entryFile,
-        bundler: "delta",
+        bundler: 'delta',
       };
     },
     createEndEntry(context) {
       return {
-        bundler: "delta",
+        bundler: 'delta',
       };
     },
-    build: async ({
-      entryFile,
-      onProgress,
-      resolverOptions,
-      transformOptions,
-    }) => {
+    build: async ({ entryFile, onProgress, resolverOptions, transformOptions }) => {
       const dependencies = await this._bundler.getDependencies(
         [entryFile],
         transformOptions,
@@ -905,7 +820,7 @@ class Server {
       });
     },
     finish({ mres, result }) {
-      mres.setHeader("Content-Type", "application/json");
+      mres.setHeader('Content-Type', 'application/json');
       mres.end(JSON.stringify(result));
     },
   });
@@ -913,18 +828,14 @@ class Server {
     const getCodeFrame = (urls, symbolicatedStack) => {
       for (let i = 0; i < symbolicatedStack.length; i++) {
         const { collapse, column, file, lineNumber } = symbolicatedStack[i];
-        if (
-          collapse ||
-          lineNumber == null ||
-          (file != null && urls.has(file))
-        ) {
+        if (collapse || lineNumber == null || (file != null && urls.has(file))) {
           continue;
         }
-        const fileAbsolute = path.resolve(this._config.projectRoot, file ?? "");
+        const fileAbsolute = path.resolve(this._config.projectRoot, file ?? '');
         try {
           return {
             content: codeFrameColumns(
-              fs.readFileSync(fileAbsolute, "utf8"),
+              fs.readFileSync(fileAbsolute, 'utf8'),
               {
                 // Metro returns 0 based columns but codeFrameColumns expects 1-based columns
                 // $FlowFixMe[unsafe-addition]
@@ -944,28 +855,30 @@ class Server {
             fileName: file,
           };
         } catch (error) {
-          console.error(error);
+          if (error.code !== 'ENOENT') {
+            console.error(error);
+          } else {
+            return null;
+          }
         }
       }
       return null;
     };
     try {
-      const symbolicatingLogEntry = log(
-        createActionStartEntry("Symbolicating")
-      );
-      debug("Start symbolication");
+      const symbolicatingLogEntry = log(createActionStartEntry('Symbolicating'));
+      debug('Start symbolication');
       /* $FlowFixMe: where is `rawBody` defined? Is it added by the `connect` framework? */
       const body = await req.rawBody;
       const parsedBody = JSON.parse(body);
       const rewriteAndNormalizeStackFrame = (frame, lineNumber) => {
         invariant(
-          frame != null && typeof frame === "object",
-          "Bad stack frame at line %d, expected object, received: %s",
+          frame != null && typeof frame === 'object',
+          'Bad stack frame at line %d, expected object, received: %s',
           lineNumber,
           typeof frame
         );
         const frameFile = frame.file;
-        if (typeof frameFile === "string" && frameFile.includes("://")) {
+        if (typeof frameFile === 'string' && frameFile.includes('://')) {
           return {
             ...frame,
             file: this._rewriteAndNormalizeUrl(frameFile),
@@ -983,28 +896,26 @@ class Server {
         if (
           sourceUrl != null &&
           !urls.has(sourceUrl) &&
-          !sourceUrl.endsWith("/debuggerWorker.js") &&
-          sourceUrl.startsWith("http")
+          !sourceUrl.endsWith('/debuggerWorker.js') &&
+          sourceUrl.startsWith('http')
         ) {
           urls.add(sourceUrl);
         }
       });
-      debug("Getting source maps for symbolication");
+      debug('Getting source maps for symbolication');
       const sourceMaps = await Promise.all(
         Array.from(urls.values()).map((normalizedUrl) =>
-          this._explodedSourceMapForBundleOptions(
-            this._parseOptions(normalizedUrl)
-          )
+          this._explodedSourceMapForBundleOptions(this._parseOptions(normalizedUrl))
         )
       );
-      debug("Performing fast symbolication");
+      debug('Performing fast symbolication');
       const symbolicatedStack = await symbolicate(
         stack,
         zip(urls.values(), sourceMaps),
         this._config,
         parsedBody.extraData ?? {}
       );
-      debug("Symbolication done");
+      debug('Symbolication done');
       res.end(
         JSON.stringify({
           codeFrame: getCodeFrame(urls, symbolicatedStack),
@@ -1039,13 +950,12 @@ class Server {
      * to find the appropriate file with supported extensions.
      */
     const resolvedEntryFilePath = await this._resolveRelativePath(entryFile, {
-      relativeTo: "server",
+      relativeTo: 'server',
       resolverOptions,
       transformOptions,
     });
     const graphId = getGraphId(resolvedEntryFilePath, transformOptions, {
-      unstable_allowRequireContext:
-        this._config.transformer.unstable_allowRequireContext,
+      unstable_allowRequireContext: this._config.transformer.unstable_allowRequireContext,
       resolverOptions,
       shallow: graphOptions.shallow,
       lazy: graphOptions.lazy,
@@ -1070,26 +980,17 @@ class Server {
     if (serializerOptions.modulesOnly) {
       prepend = [];
     }
-    return getExplodedSourceMap(
-      [...prepend, ...this._getSortedModules(graph)],
-      {
-        processModuleFilter: this._config.serializer.processModuleFilter,
-      }
-    );
+    return getExplodedSourceMap([...prepend, ...this._getSortedModules(graph)], {
+      processModuleFilter: this._config.serializer.processModuleFilter,
+    });
   }
-  async _resolveRelativePath(
-    filePath,
-    { relativeTo, resolverOptions, transformOptions }
-  ) {
+  async _resolveRelativePath(filePath, { relativeTo, resolverOptions, transformOptions }) {
     const resolutionFn = await transformHelpers.getResolveDependencyFn(
       this._bundler.getBundler(),
       transformOptions.platform,
       resolverOptions
     );
-    const rootDir =
-      relativeTo === "server"
-        ? this._getServerRootDir()
-        : this._config.projectRoot;
+    const rootDir = relativeTo === 'server' ? this._getServerRootDir() : this._config.projectRoot;
     return resolutionFn(`${rootDir}/.`, {
       name: filePath,
       data: {
@@ -1114,7 +1015,7 @@ class Server {
     dev: true,
     hot: false,
     minify: false,
-    unstable_transformProfile: "default",
+    unstable_transformProfile: 'default',
   };
   static DEFAULT_BUNDLE_OPTIONS = {
     ...Server.DEFAULT_GRAPH_OPTIONS,
@@ -1144,9 +1045,9 @@ class Server {
     // and clean up these heuristics.
     return (
       // Prelude code, see getPrependedScripts.js
-      module.path === "__prelude__" ||
+      module.path === '__prelude__' ||
       // Generated require.context() module, see contextModule.js
-      module.path.includes("?ctx=") ||
+      module.path.includes('?ctx=') ||
       this._config.serializer.isThirdPartyModule(module)
     );
   }
diff --git a/node_modules/metro/src/lib/getPrependedScripts.js b/node_modules/metro/src/lib/getPrependedScripts.js
index 28beef3..d92a599 100644
--- a/node_modules/metro/src/lib/getPrependedScripts.js
+++ b/node_modules/metro/src/lib/getPrependedScripts.js
@@ -9,33 +9,28 @@
  * @oncall react_native
  */
 
-"use strict";
+'use strict';
 
-var _CountingSet = _interopRequireDefault(require("./CountingSet"));
+var _CountingSet = _interopRequireDefault(require('./CountingSet'));
 function _interopRequireDefault(obj) {
   return obj && obj.__esModule ? obj : { default: obj };
 }
-const countLines = require("./countLines");
-const getPreludeCode = require("./getPreludeCode");
-const transformHelpers = require("./transformHelpers");
-const defaults = require("metro-config/src/defaults/defaults");
-async function getPrependedScripts(
-  config,
-  options,
-  resolverOptions,
-  bundler,
-  deltaBundler
-) {
+const countLines = require('./countLines');
+const getPreludeCode = require('./getPreludeCode');
+const transformHelpers = require('./transformHelpers');
+const defaults = require('metro-config/src/defaults/defaults');
+async function getPrependedScripts(config, options, resolverOptions, bundler, deltaBundler) {
   // Get all the polyfills from the relevant option params (the
   // `getPolyfills()` method and the `polyfillModuleNames` variable).
   const polyfillModuleNames = config.serializer
     .getPolyfills({
       platform: options.platform,
+      customResolverOptions: resolverOptions.customResolverOptions,
     })
     .concat(config.serializer.polyfillModuleNames);
   const transformOptions = {
     ...options,
-    type: "script",
+    type: 'script',
   };
   const dependencies = await deltaBundler.getDependencies(
     [defaults.moduleSystem, ...polyfillModuleNames],
@@ -53,13 +48,11 @@ async function getPrependedScripts(
         transformOptions,
         resolverOptions
       ),
-      unstable_allowRequireContext:
-        config.transformer.unstable_allowRequireContext,
+      unstable_allowRequireContext: config.transformer.unstable_allowRequireContext,
       transformOptions,
       onProgress: null,
       lazy: false,
-      unstable_enablePackageExports:
-        config.resolver.unstable_enablePackageExports,
+      unstable_enablePackageExports: config.resolver.unstable_enablePackageExports,
       shallow: false,
     }
   );
@@ -78,7 +71,7 @@ function _getPrelude({ dev, globalPrefix, requireCycleIgnorePatterns }) {
     globalPrefix,
     requireCycleIgnorePatterns,
   });
-  const name = "__prelude__";
+  const name = '__prelude__';
   return {
     dependencies: new Map(),
     getSource: () => Buffer.from(code),
@@ -86,7 +79,7 @@ function _getPrelude({ dev, globalPrefix, requireCycleIgnorePatterns }) {
     path: name,
     output: [
       {
-        type: "js/script/virtual",
+        type: 'js/script/virtual',
         data: {
           code,
           lineCount: countLines(code),
diff --git a/node_modules/metro/src/lib/getPrependedScripts.js.flow b/node_modules/metro/src/lib/getPrependedScripts.js.flow
index 3518dcb..8779519 100644
--- a/node_modules/metro/src/lib/getPrependedScripts.js.flow
+++ b/node_modules/metro/src/lib/getPrependedScripts.js.flow
@@ -12,10 +12,10 @@
 'use strict';
 
 import type Bundler from '../Bundler';
-import type DeltaBundler, {Module} from '../DeltaBundler';
-import type {TransformInputOptions} from '../DeltaBundler/types.flow';
-import type {ResolverInputOptions} from '../shared/types.flow';
-import type {ConfigT} from 'metro-config/src/configTypes.flow';
+import type DeltaBundler, { Module } from '../DeltaBundler';
+import type { TransformInputOptions } from '../DeltaBundler/types.flow';
+import type { ResolverInputOptions } from '../shared/types.flow';
+import type { ConfigT } from 'metro-config/src/configTypes.flow';
 
 import CountingSet from './CountingSet';
 
@@ -28,17 +28,18 @@ async function getPrependedScripts(
   config: ConfigT,
   options: $Diff<
     TransformInputOptions,
-    {type: $PropertyType<TransformInputOptions, 'type'>, ...},
+    { type: $PropertyType<TransformInputOptions, 'type'>, ... },
   >,
   resolverOptions: ResolverInputOptions,
   bundler: Bundler,
-  deltaBundler: DeltaBundler<>,
+  deltaBundler: DeltaBundler<>
 ): Promise<$ReadOnlyArray<Module<>>> {
   // Get all the polyfills from the relevant option params (the
   // `getPolyfills()` method and the `polyfillModuleNames` variable).
   const polyfillModuleNames = config.serializer
     .getPolyfills({
       platform: options.platform,
+      customResolverOptions: resolverOptions.customResolverOptions,
     })
     .concat(config.serializer.polyfillModuleNames);
 
@@ -53,7 +54,7 @@ async function getPrependedScripts(
       resolve: await transformHelpers.getResolveDependencyFn(
         bundler,
         options.platform,
-        resolverOptions,
+        resolverOptions
       ),
       transform: await transformHelpers.getTransformFn(
         [defaults.moduleSystem, ...polyfillModuleNames],
@@ -61,17 +62,15 @@ async function getPrependedScripts(
         deltaBundler,
         config,
         transformOptions,
-        resolverOptions,
+        resolverOptions
       ),
-      unstable_allowRequireContext:
-        config.transformer.unstable_allowRequireContext,
+      unstable_allowRequireContext: config.transformer.unstable_allowRequireContext,
       transformOptions,
       onProgress: null,
       lazy: false,
-      unstable_enablePackageExports:
-        config.resolver.unstable_enablePackageExports,
+      unstable_enablePackageExports: config.resolver.unstable_enablePackageExports,
       shallow: false,
-    },
+    }
   );
 
   return [
diff --git a/node_modules/metro/src/node-haste/DependencyGraph/ModuleResolution.js b/node_modules/metro/src/node-haste/DependencyGraph/ModuleResolution.js
index 06594a3..ec9375e 100644
--- a/node_modules/metro/src/node-haste/DependencyGraph/ModuleResolution.js
+++ b/node_modules/metro/src/node-haste/DependencyGraph/ModuleResolution.js
@@ -314,6 +314,12 @@ function refineDependencyLocation(loc, fileContents, targetSpecifier) {
   // Note that module names may not always be found in the source code verbatim,
   // whether because of escaping or because of exotic dependency APIs.
   for (let line = loc.end.line - 1; line >= loc.start.line - 1; line--) {
+    
+    if (lines[line] == null) {
+      break;
+    }
+
+
     const maxColumn =
       line === loc.end.line ? loc.end.column + 2 : lines[line].length;
     const minColumn = line === loc.start.line ? loc.start.column - 1 : 0;
