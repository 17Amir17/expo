diff --git a/node_modules/metro/src/ModuleGraph/worker/collectDependencies.js b/node_modules/metro/src/ModuleGraph/worker/collectDependencies.js
index a5a96a1..720ef58 100644
--- a/node_modules/metro/src/ModuleGraph/worker/collectDependencies.js
+++ b/node_modules/metro/src/ModuleGraph/worker/collectDependencies.js
@@ -39,6 +39,7 @@ function collectDependencies(ast, options) {
     keepRequireNames: options.keepRequireNames,
     allowOptionalDependencies: options.allowOptionalDependencies,
     unstable_allowRequireContext: options.unstable_allowRequireContext,
+    ignoredModules: options.ignoredModules ?? [],
   };
   const visitor = {
     CallExpression(path, state) {
@@ -254,10 +255,11 @@ function processRequireContextCall(path, state) {
     },
     path
   );
-
-  // require() the generated module representing this context
-  path.get("callee").replaceWith(types.identifier("require"));
-  transformer.transformSyncRequire(path, dep, state);
+  if (dep) {
+    // require() the generated module representing this context
+    path.get("callee").replaceWith(types.identifier("require"));
+    transformer.transformSyncRequire(path, dep, state);
+  }
 }
 function processResolveWeakCall(path, state) {
   const name = getModuleNameFromCallArgs(path);
@@ -273,11 +275,13 @@ function processResolveWeakCall(path, state) {
     },
     path
   );
-  path.replaceWith(
-    makeResolveWeakTemplate({
-      MODULE_ID: createModuleIDExpression(dependency, state),
-    })
-  );
+  if (dependency) {
+    path.replaceWith(
+      makeResolveWeakTemplate({
+        MODULE_ID: createModuleIDExpression(dependency, state),
+      })
+    );
+  }
 }
 function collectImports(path, state) {
   if (path.node.source) {
@@ -306,11 +310,14 @@ function processImportCall(path, state, options) {
     },
     path
   );
-  const transformer = state.dependencyTransformer;
-  if (options.asyncType === "async") {
-    transformer.transformImportCall(path, dep, state);
+  if (dep) {
+    const transformer = state.dependencyTransformer;
+    if (options.asyncType === "async") {
+      transformer.transformImportCall(path, dep, state);
+    } else {
+      transformer.transformPrefetch(path, dep, state);
+    }
   } else {
-    transformer.transformPrefetch(path, dep, state);
   }
 }
 function processRequireCall(path, state) {
@@ -332,7 +339,12 @@ function processRequireCall(path, state) {
     },
     path
   );
-  transformer.transformSyncRequire(path, dep, state);
+  if (dep) {
+    transformer.transformSyncRequire(path, dep, state);
+  } else {
+    // Convert the call from `_$$_REQUIRE()` `$$require_external()`.
+    path.get("callee").replaceWith(types.identifier("$$require_external"));    
+  }
 }
 function getNearestLocFromPath(path) {
   let current = path;
@@ -350,6 +362,17 @@ function getNearestLocFromPath(path) {
   );
 }
 function registerDependency(state, qualifier, path) {
+  if (
+    state.ignoredModules.some((externalMatcher) => {
+      if (typeof externalMatcher === "string") {
+        return externalMatcher === qualifier.name;
+      } else {
+        return externalMatcher.test(qualifier.name);
+      }
+    })
+  ) {
+    return null;
+  }
   const dependency = state.dependencyRegistry.registerDependency(qualifier);
   const loc = getNearestLocFromPath(path);
   if (loc != null) {
diff --git a/node_modules/metro/src/lib/getPrependedScripts.js b/node_modules/metro/src/lib/getPrependedScripts.js
index 28beef3..d92a599 100644
--- a/node_modules/metro/src/lib/getPrependedScripts.js
+++ b/node_modules/metro/src/lib/getPrependedScripts.js
@@ -9,33 +9,28 @@
  * @oncall react_native
  */
 
-"use strict";
+'use strict';
 
-var _CountingSet = _interopRequireDefault(require("./CountingSet"));
+var _CountingSet = _interopRequireDefault(require('./CountingSet'));
 function _interopRequireDefault(obj) {
   return obj && obj.__esModule ? obj : { default: obj };
 }
-const countLines = require("./countLines");
-const getPreludeCode = require("./getPreludeCode");
-const transformHelpers = require("./transformHelpers");
-const defaults = require("metro-config/src/defaults/defaults");
-async function getPrependedScripts(
-  config,
-  options,
-  resolverOptions,
-  bundler,
-  deltaBundler
-) {
+const countLines = require('./countLines');
+const getPreludeCode = require('./getPreludeCode');
+const transformHelpers = require('./transformHelpers');
+const defaults = require('metro-config/src/defaults/defaults');
+async function getPrependedScripts(config, options, resolverOptions, bundler, deltaBundler) {
   // Get all the polyfills from the relevant option params (the
   // `getPolyfills()` method and the `polyfillModuleNames` variable).
   const polyfillModuleNames = config.serializer
     .getPolyfills({
       platform: options.platform,
+      customResolverOptions: resolverOptions.customResolverOptions,
     })
     .concat(config.serializer.polyfillModuleNames);
   const transformOptions = {
     ...options,
-    type: "script",
+    type: 'script',
   };
   const dependencies = await deltaBundler.getDependencies(
     [defaults.moduleSystem, ...polyfillModuleNames],
@@ -53,13 +48,11 @@ async function getPrependedScripts(
         transformOptions,
         resolverOptions
       ),
-      unstable_allowRequireContext:
-        config.transformer.unstable_allowRequireContext,
+      unstable_allowRequireContext: config.transformer.unstable_allowRequireContext,
       transformOptions,
       onProgress: null,
       lazy: false,
-      unstable_enablePackageExports:
-        config.resolver.unstable_enablePackageExports,
+      unstable_enablePackageExports: config.resolver.unstable_enablePackageExports,
       shallow: false,
     }
   );
@@ -78,7 +71,7 @@ function _getPrelude({ dev, globalPrefix, requireCycleIgnorePatterns }) {
     globalPrefix,
     requireCycleIgnorePatterns,
   });
-  const name = "__prelude__";
+  const name = '__prelude__';
   return {
     dependencies: new Map(),
     getSource: () => Buffer.from(code),
@@ -86,7 +79,7 @@ function _getPrelude({ dev, globalPrefix, requireCycleIgnorePatterns }) {
     path: name,
     output: [
       {
-        type: "js/script/virtual",
+        type: 'js/script/virtual',
         data: {
           code,
           lineCount: countLines(code),
diff --git a/node_modules/metro/src/lib/getPrependedScripts.js.flow b/node_modules/metro/src/lib/getPrependedScripts.js.flow
index 3518dcb..8779519 100644
--- a/node_modules/metro/src/lib/getPrependedScripts.js.flow
+++ b/node_modules/metro/src/lib/getPrependedScripts.js.flow
@@ -12,10 +12,10 @@
 'use strict';
 
 import type Bundler from '../Bundler';
-import type DeltaBundler, {Module} from '../DeltaBundler';
-import type {TransformInputOptions} from '../DeltaBundler/types.flow';
-import type {ResolverInputOptions} from '../shared/types.flow';
-import type {ConfigT} from 'metro-config/src/configTypes.flow';
+import type DeltaBundler, { Module } from '../DeltaBundler';
+import type { TransformInputOptions } from '../DeltaBundler/types.flow';
+import type { ResolverInputOptions } from '../shared/types.flow';
+import type { ConfigT } from 'metro-config/src/configTypes.flow';
 
 import CountingSet from './CountingSet';
 
@@ -28,17 +28,18 @@ async function getPrependedScripts(
   config: ConfigT,
   options: $Diff<
     TransformInputOptions,
-    {type: $PropertyType<TransformInputOptions, 'type'>, ...},
+    { type: $PropertyType<TransformInputOptions, 'type'>, ... },
   >,
   resolverOptions: ResolverInputOptions,
   bundler: Bundler,
-  deltaBundler: DeltaBundler<>,
+  deltaBundler: DeltaBundler<>
 ): Promise<$ReadOnlyArray<Module<>>> {
   // Get all the polyfills from the relevant option params (the
   // `getPolyfills()` method and the `polyfillModuleNames` variable).
   const polyfillModuleNames = config.serializer
     .getPolyfills({
       platform: options.platform,
+      customResolverOptions: resolverOptions.customResolverOptions,
     })
     .concat(config.serializer.polyfillModuleNames);
 
@@ -53,7 +54,7 @@ async function getPrependedScripts(
       resolve: await transformHelpers.getResolveDependencyFn(
         bundler,
         options.platform,
-        resolverOptions,
+        resolverOptions
       ),
       transform: await transformHelpers.getTransformFn(
         [defaults.moduleSystem, ...polyfillModuleNames],
@@ -61,17 +62,15 @@ async function getPrependedScripts(
         deltaBundler,
         config,
         transformOptions,
-        resolverOptions,
+        resolverOptions
       ),
-      unstable_allowRequireContext:
-        config.transformer.unstable_allowRequireContext,
+      unstable_allowRequireContext: config.transformer.unstable_allowRequireContext,
       transformOptions,
       onProgress: null,
       lazy: false,
-      unstable_enablePackageExports:
-        config.resolver.unstable_enablePackageExports,
+      unstable_enablePackageExports: config.resolver.unstable_enablePackageExports,
       shallow: false,
-    },
+    }
   );
 
   return [
